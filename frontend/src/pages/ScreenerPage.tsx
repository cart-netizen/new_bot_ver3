// frontend/src/pages/ScreenerPage.tsx
/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä–∏–Ω–µ—Ä–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä.
 *
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
 * - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω–µ—Ä–∞ —Å real-time –¥–∞–Ω–Ω—ã–º–∏
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
 * - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä —Å volume > 4M USDT
 * - –†–∞—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
 * - –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ REST API
 *
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:
 * - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç screenerStore –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
 * - –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ WebSocket —á–µ—Ä–µ–∑ Layout
 * - Memory-optimized –ø–æ–¥—Ö–æ–¥
 *
 * –û–±–Ω–æ–≤–ª–µ–Ω–æ: –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ REST API
 */

import { useEffect, useState } from 'react';
import { ScreenerTable } from '../components/screener/ScreenerTable';
import { useScreenerStore } from '../store/screenerStore';
import { AlertCircle, Info, Activity, Loader2 } from 'lucide-react';
import { toast } from 'sonner';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∫—Ä–∏–Ω–µ—Ä–∞.
 */
export function ScreenerPage() {
  const {
    isConnected,
    isLoading,
    memoryStats,
    loadInitialData,
    cleanupMemory
  } = useScreenerStore();

  const [isInitializing, setIsInitializing] = useState(true);

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.
   */
  useEffect(() => {
    console.log('[ScreenerPage] Initializing...');

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    cleanupMemory();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ REST API
    loadInitialData()
      .then(() => {
        console.log('[ScreenerPage] Initial data loaded successfully');
        setIsInitializing(false);
      })
      .catch((error) => {
        console.error('[ScreenerPage] Failed to load initial data:', error);
        setIsInitializing(false);
      });

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ (–∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã)
    const cleanupInterval = setInterval(() => {
      console.log('[ScreenerPage] Running periodic cleanup...');
      cleanupMemory();
    }, 2 * 60 * 1000);

    return () => {
      clearInterval(cleanupInterval);
      console.log('[ScreenerPage] Unmounting, cleaning up...');
    };
  }, [cleanupMemory, loadInitialData]);

  /**
   * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏ (—Ç–æ–ª—å–∫–æ –≤ dev mode).
   */
  useEffect(() => {
    if (import.meta.env.DEV && !isInitializing) {
      console.log('[ScreenerPage] Memory stats:', memoryStats);

      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 80% –ª–∏–º–∏—Ç–∞ –ø–∞—Ä
      if (memoryStats.totalPairs > 80) {
        toast.warning('–ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ª–∏–º–∏—Ç—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä –≤ —Å–∫—Ä–∏–Ω–µ—Ä–µ', {
          description: `${memoryStats.totalPairs} –∏–∑ 100 –ø–∞—Ä`,
        });
      }
    }
  }, [memoryStats, isInitializing]);

  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
   */
  if (isInitializing || isLoading) {
    return (
      <div className="p-6">
        <div className="mb-6">
          <h1 className="text-2xl font-bold text-white mb-2">–°–∫—Ä–∏–Ω–µ—Ä –¢–æ—Ä–≥–æ–≤—ã—Ö –ü–∞—Ä</h1>
          <p className="text-gray-400">
            –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
          </p>
        </div>

        <div className="flex items-center justify-center min-h-[400px]">
          <div className="text-center">
            <Loader2 className="animate-spin h-12 w-12 text-primary mx-auto mb-4" />
            <p className="text-gray-400 mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω–µ—Ä–∞...</p>
            <p className="text-sm text-gray-500">
              –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            </p>
          </div>
        </div>
      </div>
    );
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
   */
  const renderConnectionWarning = () => {
    if (isConnected) {
      return null;
    }

    return (
      <div className="mb-6 bg-yellow-500/10 border border-yellow-500/30 rounded-lg p-4">
        <div className="flex items-start gap-3">
          <AlertCircle className="h-5 w-5 text-yellow-500 flex-shrink-0 mt-0.5" />
          <div>
            <h3 className="text-sm font-semibold text-yellow-500 mb-1">
              –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
            </h3>
            <p className="text-sm text-gray-400">
              –î–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω–µ—Ä–∞ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ WebSocket.
              –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.
            </p>
          </div>
        </div>
      </div>
    );
  };

  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞.
   */
  const renderInfoPanel = () => {
    return (
      <div className="mb-6 bg-blue-500/10 border border-blue-500/30 rounded-lg p-4">
        <div className="flex items-start gap-3">
          <Info className="h-5 w-5 text-blue-500 flex-shrink-0 mt-0.5" />
          <div>
            <h3 className="text-sm font-semibold text-blue-500 mb-2">
              –û —Å–∫—Ä–∏–Ω–µ—Ä–µ
            </h3>
            <ul className="text-sm text-gray-400 space-y-1">
              <li>‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–∞—Ä—ã —Å –æ–±—ä—ë–º–æ–º —Ç–æ—Ä–≥–æ–≤ {'>'} 4,000,000 USDT –∑–∞ 24 —á–∞—Å–∞</li>
              <li>‚Ä¢ –î–∏–Ω–∞–º–∏–∫–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º: 1m, 3m, 5m, 15m</li>
              <li>‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ WebSocket</li>
              <li>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</li>
              <li>‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä: 100</li>
            </ul>
          </div>
        </div>
      </div>
    );
  };

  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏ (—Ç–æ–ª—å–∫–æ –≤ dev mode).
   */
  const renderMemoryStats = () => {
    if (!import.meta.env.DEV) {
      return null;
    }

    return (
      <div className="mb-6 bg-gray-800/50 border border-gray-700 rounded-lg p-4">
        <div className="flex items-start gap-3">
          <Activity className="h-5 w-5 text-gray-400 flex-shrink-0 mt-0.5" />
          <div className="flex-1">
            <h3 className="text-sm font-semibold text-gray-300 mb-2">
              –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏ (Dev Mode)
            </h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
              <div>
                <p className="text-gray-500">–í—Å–µ–≥–æ –ø–∞—Ä</p>
                <p className="text-white font-medium">{memoryStats.totalPairs}</p>
              </div>
              <div>
                <p className="text-gray-500">–ê–∫—Ç–∏–≤–Ω—ã—Ö</p>
                <p className="text-white font-medium">{memoryStats.activePairs}</p>
              </div>
              <div>
                <p className="text-gray-500">–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω</p>
                <p className="text-white font-medium">{memoryStats.totalPricePoints} —Ç–æ—á–µ–∫</p>
              </div>
              <div>
                <p className="text-gray-500">–ü–æ—Å–ª. –æ—á–∏—Å—Ç–∫–∞</p>
                <p className="text-white font-medium">
                  {new Date(memoryStats.lastCleanup).toLocaleTimeString()}
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
   */
  const renderConnectionStatus = () => {
    return (
      <div className="mb-6 flex items-center justify-between">
        <div className="flex items-center gap-2">
          <div
            className={`h-2 w-2 rounded-full ${
              isConnected ? 'bg-green-500 animate-pulse' : 'bg-red-500'
            }`}
          />
          <span className="text-sm text-gray-400">
            {isConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É' : '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'}
          </span>
        </div>

        <div className="text-sm text-gray-500">
          –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        </div>
      </div>
    );
  };

  return (
    <div className="p-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-white mb-2">
          –°–∫—Ä–∏–Ω–µ—Ä –¢–æ—Ä–≥–æ–≤—ã—Ö –ü–∞—Ä
        </h1>
        <p className="text-gray-400">
          –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        </p>
      </div>

      {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
      {renderConnectionStatus()}

      {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ */}
      {renderConnectionWarning()}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å */}
      {renderInfoPanel()}

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏ (dev mode) */}
      {renderMemoryStats()}

      {/* –¢–∞–±–ª–∏—Ü–∞ —Å–∫—Ä–∏–Ω–µ—Ä–∞ */}
      <div className="bg-gray-900 rounded-lg border border-gray-800 overflow-hidden">
        <ScreenerTable />
      </div>

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –≤–Ω–∏–∑—É */}
      <div className="mt-6 text-center">
        <p className="text-sm text-gray-500">
          üí° –°–æ–≤–µ—Ç: –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        </p>
      </div>
    </div>
  );
}