// frontend/src/components/layout/Layout.tsx
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å React Strict Mode

import { useEffect, useCallback, useRef } from 'react';
import { Outlet } from 'react-router-dom';
import { Header } from './Header';
import { Sidebar } from './Sidebar';
import { useAuthStore } from '../../store/authStore';
import { useMarketStore } from '../../store/marketStore';
import { useTradingStore } from '../../store/tradingStore';
import { wsService } from '../../services/websocket.service';
import { toast } from 'sonner';
import {useScreenerStore} from "@/store/screenerStore";

/**
 * –ì–ª–∞–≤–Ω—ã–π Layout –∫–æ–º–ø–æ–Ω–µ–Ω—Ç.
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ.
 *
 * –í–ê–ñ–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç React Strict Mode,
 * –∫–æ—Ç–æ—Ä—ã–π –≤ dev —Ä–µ–∂–∏–º–µ –º–æ–Ω—Ç–∏—Ä—É–µ—Ç/—Ä–∞–∑–º–æ–Ω—Ç–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–≤–∞–∂–¥—ã.
 */
const lastNotificationTime = new Map<string, number>();
const NOTIFICATION_COOLDOWN = 3 * 60 * 1000; // 3 –º–∏–Ω—É—Ç—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ throttling
const shouldShowNotification = (symbol: string): boolean => {
  const now = Date.now();
  const lastTime = lastNotificationTime.get(symbol) || 0;

  if (now - lastTime < NOTIFICATION_COOLDOWN) {
    return false; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º
  }

  lastNotificationTime.set(symbol, now);
  return true; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º
};

export function Layout() {
  const { token, isAuthenticated } = useAuthStore();
  const { updateOrderBook, updateMetrics, setConnected } = useMarketStore();
  const { addSignal } = useTradingStore();
  const { updatePairs } = useScreenerStore();
  // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–≤–æ–π–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const isConnectingRef = useRef(false);
  const connectionAttemptRef = useRef(0);

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Å–æ–±—ã—Ç–∏–π.
   */
  const connectWebSocket = useCallback(() => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    if (isConnectingRef.current) {
      console.log('[Layout] Already connecting, skipping duplicate call');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º JWT
    if (!token) {
      console.error('[Layout] No auth token available');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ (JWT –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å 3 —á–∞—Å—Ç–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–æ–π)
    const tokenParts = token.split('.');
    if (tokenParts.length !== 3) {
      console.error('[Layout] Invalid token format:', token.substring(0, 20) + '...');
      toast.error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
      localStorage.removeItem('auth-token');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
    if (wsService.isConnected()) {
      console.log('[Layout] WebSocket already connected');
      setConnected(true);
      return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    isConnectingRef.current = true;
    connectionAttemptRef.current++;

    const attemptId = connectionAttemptRef.current;
    console.log(`[Layout] üîå Connection attempt #${attemptId}`);
    console.log('[Layout] Token valid, connecting to WebSocket...');
    console.log('[Layout] Token preview:', token.substring(0, 20) + '...' + token.substring(token.length - 20));

    wsService.connect(token, {
      // –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      onConnect: () => {
        console.log(`[Layout] ‚úÖ WebSocket connected (attempt #${attemptId})`);
        setConnected(true);
        isConnectingRef.current = false;
        toast.success('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      },

      // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
      onDisconnect: () => {
        console.log(`[Layout] ‚ùå WebSocket disconnected (attempt #${attemptId})`);
        setConnected(false);
        isConnectingRef.current = false;
        toast.error('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
      },

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
      onBotStatus: (data) => {
        console.log('[Layout] Bot status update:', data.status);
      },

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞
      onOrderBookUpdate: (symbol, orderbook) => {
        updateOrderBook(symbol, orderbook);
      },

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
      onMetricsUpdate: (symbol, metricsData) => {
        updateMetrics(symbol, metricsData);
      },
      // –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¥–ª—è screener_update
      onScreenerUpdate: (data) => {
        console.log('[Layout] Screener update, pairs:', data.pairs?.length);
        updatePairs(data.pairs);
      },

      // –ù–æ–≤—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
      onTradingSignal: (signal) => {
        addSignal(signal); // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ —Å—Ç–æ—Ä

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 3 –º–∏–Ω—É—Ç—ã
        if (shouldShowNotification(signal.symbol)) {
          toast.info(`–°–∏–≥–Ω–∞–ª: ${signal.signal_type} ${signal.symbol}`, {
            description: signal.reason,
          });
        }
      },

      // –û—à–∏–±–∫–∞
      onError: (error) => {
        console.error('[Layout] WebSocket error:', error);
        isConnectingRef.current = false;

        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω
        if (error.includes('—Ç–æ–∫–µ–Ω') || error.includes('token') || error.includes('–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü')) {
          console.error('[Layout] Authentication error detected, clearing token');
          localStorage.removeItem('auth-token');
          toast.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
        } else {
          toast.error(`–û—à–∏–±–∫–∞: ${error}`);
        }
      },
    });
  }, [token, setConnected, updateOrderBook, updateMetrics, addSignal, updatePairs]);

  /**
   * –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket.
   *
   * –í–ê–ñ–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç React Strict Mode:
   * - –í dev —Ä–µ–∂–∏–º–µ React –º–æ–Ω—Ç–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ‚Üí –≤—ã–∑—ã–≤–∞–µ—Ç cleanup ‚Üí –º–æ–Ω—Ç–∏—Ä—É–µ—Ç —Å–Ω–æ–≤–∞
   * - –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º isConnectingRef –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–≤–æ–π–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   * - Cleanup –æ—Ç–∫–ª—é—á–∞–µ—Ç WebSocket —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –†–ï–ê–õ–¨–ù–û–ú —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
   */
  useEffect(() => {
    console.log('[Layout] Effect triggered');
    console.log('[Layout] isAuthenticated:', isAuthenticated);
    console.log('[Layout] token exists:', !!token);
    console.log('[Layout] isConnecting:', isConnectingRef.current);
    console.log('[Layout] wsService.isConnected():', wsService.isConnected());

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É—Å–ª–æ–≤–∏—è
    if (!isAuthenticated) {
      console.warn('[Layout] User not authenticated, skipping WebSocket connection');
      return;
    }

    if (!token) {
      console.warn('[Layout] No token available, skipping WebSocket connection');
      return;
    }

    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è React Strict Mode
    // –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É cleanup –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    const timeoutId = setTimeout(() => {
      console.log('[Layout] Delayed initialization after React Strict Mode cleanup');
      connectWebSocket();
    }, 100); // 100ms –∑–∞–¥–µ—Ä–∂–∫–∞

    // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      console.log('[Layout] Cleanup triggered');

      // –û—Ç–º–µ–Ω—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –¥–æ –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      clearTimeout(timeoutId);

      // –í–ê–ñ–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º WebSocket —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ù–ï React Strict Mode remount
      // React Strict Mode –≤—ã–∑—ã–≤–∞–µ—Ç cleanup ‚Üí effect —Å–Ω–æ–≤–∞ –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ (< 50ms)
      // –†–µ–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

      // –î–∞–µ–º WebSocket –≤—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º
      const disconnectTimeoutId = setTimeout(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω (–ø—Ä–æ—à–ª–æ –≤—Ä–µ–º—è)
        // –∏ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ React Strict Mode remount
        if (wsService.isConnected()) {
          console.log('[Layout] Cleanup: Disconnecting WebSocket (real unmount)');
          wsService.disconnect();
          setConnected(false);
          isConnectingRef.current = false;
        } else {
          console.log('[Layout] Cleanup: WebSocket not connected, skipping disconnect');
        }
      }, 200); // –î–∞–µ–º 200ms –Ω–∞ —Å–ª—É—á–∞–π React Strict Mode

      return () => {
        clearTimeout(disconnectTimeoutId);
      };
    };
  }, [isAuthenticated, token, connectWebSocket, setConnected]);

  return (
    <div className="min-h-screen bg-background flex flex-col">
      <Header />
      <div className="flex-1 flex">
        <Sidebar />
        <main className="flex-1 p-6 overflow-auto">
          <Outlet />
        </main>
      </div>
    </div>
  );
}