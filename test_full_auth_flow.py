"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
–≠–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞.
"""

import asyncio
import aiohttp
import websockets
import json
import os
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BACKEND_URL = "http://localhost:8000"
WS_URL = "ws://localhost:8000/ws"
PASSWORD = os.getenv("APP_PASSWORD", "robocop89")


async def test_full_flow():
  """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç: –ª–æ–≥–∏–Ω ‚Üí –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ ‚Üí WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ."""

  print("=" * 80)
  print("üîê –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –ü–†–û–¶–ï–°–°–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò")
  print("=" * 80)
  print()

  # –®–ê–ì 1: –õ–æ–≥–∏–Ω
  print("üìù –®–ê–ì 1: –õ–æ–≥–∏–Ω —á–µ—Ä–µ–∑ /auth/login")
  print("-" * 80)

  token = None

  try:
    async with aiohttp.ClientSession() as session:
      login_url = f"{BACKEND_URL}/auth/login"
      login_data = {"password": PASSWORD}

      print(f"URL: {login_url}")
      print(f"–î–∞–Ω–Ω—ã–µ: {json.dumps(login_data, indent=2)}")
      print()
      print("‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")

      async with session.post(login_url, json=login_data) as response:
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: HTTP {response.status}")
        print()

        if response.status == 200:
          data = await response.json()
          token = data.get("access_token")

          print("‚úÖ –õ–û–ì–ò–ù –£–°–ü–ï–®–ï–ù!")
          print(f"   Token –ø–æ–ª—É—á–µ–Ω: {token[:20]}...{token[-20:]}")
          print()

        elif response.status == 401:
          error_data = await response.json()
          print("‚ùå –û–®–ò–ë–ö–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò!")
          print(f"   {error_data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
          print()
          print("üí° –ü–†–ò–ß–ò–ù–ê:")
          print(f"   –ü–∞—Ä–æ–ª—å –≤ .env: {PASSWORD}")
          print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å")
          return

        else:
          print(f"‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status}")
          text = await response.text()
          print(f"   –û—Ç–≤–µ—Ç: {text[:200]}")
          return

  except aiohttp.ClientConnectorError:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±—ç–∫–µ–Ω–¥—É")
    print()
    print("üí° –†–ï–®–ï–ù–ò–ï:")
    print("   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω:")
    print("      cd backend")
    print("      python main.py")
    return

  except Exception as e:
    print(f"‚ùå –û–®–ò–ë–ö–ê: {type(e).__name__}: {e}")
    import traceback
    traceback.print_exc()
    return

  # –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
  print("üîç –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ /auth/verify")
  print("-" * 80)

  try:
    async with aiohttp.ClientSession() as session:
      verify_url = f"{BACKEND_URL}/auth/verify"
      headers = {"Authorization": f"Bearer {token}"}

      print(f"URL: {verify_url}")
      print(f"Header: Authorization: Bearer {token[:20]}...")
      print()
      print("‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")

      async with session.get(verify_url, headers=headers) as response:
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: HTTP {response.status}")
        print()

        if response.status == 200:
          data = await response.json()
          print("‚úÖ –¢–û–ö–ï–ù –í–ê–õ–ò–î–ù–´–ô!")
          print(f"   User ID: {data.get('user_id')}")
          print()
        else:
          print(f"‚ö†Ô∏è  –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π: {response.status}")
          text = await response.text()
          print(f"   {text}")
          return

  except Exception as e:
    print(f"‚ùå –û–®–ò–ë–ö–ê: {type(e).__name__}: {e}")
    return

  # –®–ê–ì 3: WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  print("üîå –®–ê–ì 3: WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
  print("-" * 80)

  try:
    print(f"URL: {WS_URL}")
    print()
    print("‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")

    async with websockets.connect(WS_URL) as websocket:
      print("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
      print()

      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
      auth_message = {
        "type": "authenticate",
        "token": token
      }

      print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –í–ê–õ–ò–î–ù–´–ú —Ç–æ–∫–µ–Ω–æ–º...")
      await websocket.send(json.dumps(auth_message))
      print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
      print()

      # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
      print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...")
      try:
        response = await asyncio.wait_for(websocket.recv(), timeout=5.0)
        response_data = json.loads(response)

        print("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:")
        print(json.dumps(response_data, indent=2, ensure_ascii=False))
        print()

        if response_data.get("type") == "authenticated":
          print("üéâ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –í WEBSOCKET –£–°–ü–ï–®–ù–ê!")
          print()

          # –¢–µ—Å—Ç–∏—Ä—É–µ–º ping
          print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ ping...")
          ping_message = {"type": "ping"}
          await websocket.send(json.dumps(ping_message))

          pong = await asyncio.wait_for(websocket.recv(), timeout=2.0)
          pong_data = json.loads(pong)
          print("‚úÖ –ü–æ–ª—É—á–µ–Ω pong:")
          print(json.dumps(pong_data, indent=2, ensure_ascii=False))
          print()

          # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          print("üì§ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
          subscribe_message = {
            "type": "subscribe",
            "channels": ["orderbook", "signals", "bot_status"]
          }
          await websocket.send(json.dumps(subscribe_message))

          sub_response = await asyncio.wait_for(websocket.recv(), timeout=2.0)
          sub_data = json.loads(sub_response)
          print("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É:")
          print(json.dumps(sub_data, indent=2, ensure_ascii=False))
          print()

          print("=" * 80)
          print("üéâ –í–°–Å –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!")
          print("=" * 80)
          print()
          print("‚úÖ –õ–æ–≥–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç")
          print("‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π")
          print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è")
          print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ WebSocket —Ä–∞–±–æ—Ç–∞–µ—Ç")
          print("‚úÖ Ping/pong —Ä–∞–±–æ—Ç–∞–µ—Ç")
          print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
          print()
          print("üí° –í–´–í–û–î:")
          print("   –ü—Ä–æ–±–ª–µ–º–∞ –ù–ï –Ω–∞ –±—ç–∫–µ–Ω–¥–µ!")
          print("   –ü—Ä–æ–±–ª–µ–º–∞ –≤ –ª–æ–≥–∏–∫–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:")
          print("   - –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ WS")
          print("   - –ò–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤ WebSocket —Å–µ—Ä–≤–∏—Å")

        elif response_data.get("type") == "error":
          print("‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:")
          print(f"   {response_data.get('message')}")

      except asyncio.TimeoutError:
        print("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞")

  except Exception as e:
    print(f"‚ùå –û–®–ò–ë–ö–ê WebSocket: {type(e).__name__}: {e}")
    import traceback
    traceback.print_exc()

  print()
  print("=" * 80)


async def test_auth_endpoint():
  """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
  print()
  print("üîê –ë–´–°–¢–†–´–ô –¢–ï–°–¢ /auth/login")
  print("=" * 80)

  try:
    async with aiohttp.ClientSession() as session:
      url = f"{BACKEND_URL}/auth/login"

      # –¢–µ—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
      print(f"–¢–µ—Å—Ç —Å –ø–∞—Ä–æ–ª–µ–º: {PASSWORD}")
      async with session.post(url, json={"password": PASSWORD}) as response:
        if response.status == 200:
          data = await response.json()
          print(f"‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω! Token –ø–æ–ª—É—á–µ–Ω.")
        else:
          print(f"‚ùå –û—à–∏–±–∫–∞: HTTP {response.status}")
          print(await response.text())

  except Exception as e:
    print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")

  print("=" * 80)


if __name__ == "__main__":
  print()
  print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò")
  print()

  try:
    # –°–Ω–∞—á–∞–ª–∞ –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
    asyncio.run(test_auth_endpoint())

    print()
    print()

    # –ü–æ—Ç–æ–º –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç
    asyncio.run(test_full_flow())

  except KeyboardInterrupt:
    print("\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")