"""
Spoofing Detector –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π –æ—Ä–¥–µ—Ä–∞–º–∏.

Spoofing - —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –±–µ–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Ü–µ–Ω–æ–π.

–ü—Ä–∏–∑–Ω–∞–∫–∏ spoofing:
- –ö—Ä—É–ø–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ —Å—Ç–∞–∫–∞–Ω–∞
- –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã
- –ö–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ (TTL) –∫—Ä—É–ø–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
- –û—Ä–¥–µ—Ä–∞ –¥–∞–ª–µ–∫–æ –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
- –ü–∞—Ç—Ç–µ—Ä–Ω: —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ -> –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã -> –æ—Ç–º–µ–Ω–∞

–ü—É—Ç—å: backend/ml_engine/detection/spoofing_detector.py
"""

from typing import Dict, List, Optional, Tuple, Deque
from dataclasses import dataclass
from datetime import datetime, timedelta
from collections import deque, defaultdict
import numpy as np

from backend.core.logger import get_logger
from backend.models.orderbook import OrderBookSnapshot, OrderBookLevel

logger = get_logger(__name__)


@dataclass
class SpoofingConfig:
  """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞."""
  # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫—Ä—É–ø–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
  large_order_threshold_usdt: float = 50000.0  # $50k+
  large_order_relative_threshold: float = 0.1  # 10% –æ—Ç total depth

  # –ü–æ—Ä–æ–≥–∏ –¥–ª—è TTL
  suspicious_ttl_seconds: float = 10.0  # < 10 —Å–µ–∫—É–Ω–¥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ

  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç mid price
  min_distance_from_mid: float = 0.001  # 0.1% –æ—Ç mid price
  max_distance_from_mid: float = 0.01  # 1% –æ—Ç mid price

  # –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
  history_window_seconds: int = 300  # 5 –º–∏–Ω—É—Ç

  # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
  cancel_rate_threshold: float = 0.7  # 70%+ –æ—Ç–º–µ–Ω = –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
  min_events_for_detection: int = 3  # –ú–∏–Ω–∏–º—É–º —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞


@dataclass
class OrderEvent:
  """–°–æ–±—ã—Ç–∏–µ —Å –æ—Ä–¥–µ—Ä–æ–º."""
  timestamp: int  # ms
  side: str  # "bid" –∏–ª–∏ "ask"
  price: float
  volume: float
  event_type: str  # "placed", "cancelled", "filled", "modified"
  distance_from_mid: float  # % –æ—Ç mid price


@dataclass
class SpoofingPattern:
  """–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω spoofing."""
  symbol: str
  timestamp: int
  side: str  # "bid" –∏–ª–∏ "ask"
  confidence: float  # 0-1

  # –î–µ—Ç–∞–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
  large_orders_count: int
  total_volume: float
  avg_ttl_seconds: float
  cancel_rate: float
  avg_distance_from_mid: float

  # –°–æ–±—ã—Ç–∏—è
  events: List[OrderEvent]

  # –ü—Ä–∏—á–∏–Ω–∞
  reason: str


class LevelHistory:
  """–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—Ä–æ–≤–Ω—è –≤ —Å—Ç–∞–∫–∞–Ω–µ."""

  def __init__(self, price: float, side: str):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —É—Ä–æ–≤–Ω—è.

    Args:
        price: –¶–µ–Ω–∞ —É—Ä–æ–≤–Ω—è
        side: –°—Ç–æ—Ä–æ–Ω–∞ ("bid" –∏–ª–∏ "ask")
    """
    self.price = price
    self.side = side
    self.first_seen: Optional[int] = None  # timestamp ms
    self.last_seen: Optional[int] = None
    self.max_volume: float = 0.0
    self.volume_history: Deque[Tuple[int, float]] = deque(maxlen=100)
    self.events: List[OrderEvent] = []

  def update(self, timestamp: int, volume: float, mid_price: float):
    """–û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —É—Ä–æ–≤–Ω—è."""
    if self.first_seen is None:
      self.first_seen = timestamp

    self.last_seen = timestamp
    self.max_volume = max(self.max_volume, volume)
    self.volume_history.append((timestamp, volume))

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
    if len(self.volume_history) == 1:
      event_type = "placed"
    elif volume > self.volume_history[-2][1]:
      event_type = "modified"  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
    elif volume < self.volume_history[-2][1]:
      event_type = "modified"  # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
    else:
      return  # –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

    distance = abs(self.price - mid_price) / mid_price

    event = OrderEvent(
      timestamp=timestamp,
      side=self.side,
      price=self.price,
      volume=volume,
      event_type=event_type,
      distance_from_mid=distance
    )
    self.events.append(event)

  def mark_cancelled(self, timestamp: int, mid_price: float):
    """–û—Ç–º–µ—Ç–∏—Ç—å –æ—Ç–º–µ–Ω—É —É—Ä–æ–≤–Ω—è."""
    distance = abs(self.price - mid_price) / mid_price

    event = OrderEvent(
      timestamp=timestamp,
      side=self.side,
      price=self.price,
      volume=0.0,
      event_type="cancelled",
      distance_from_mid=distance
    )
    self.events.append(event)

  def get_ttl(self) -> float:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —É—Ä–æ–≤–Ω—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö."""
    if self.first_seen and self.last_seen:
      return (self.last_seen - self.first_seen) / 1000.0
    return 0.0

  def is_suspicious(self, config: SpoofingConfig) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–≤–Ω—è."""
    ttl = self.get_ttl()

    # –ö—Ä—É–ø–Ω—ã–π –æ–±—ä–µ–º
    is_large = self.max_volume * self.price >= config.large_order_threshold_usdt

    # –ö–æ—Ä–æ—Ç–∫–∏–π TTL
    short_lived = 0 < ttl < config.suspicious_ttl_seconds

    # –ë—ã—Å—Ç—Ä–æ –æ—Ç–º–µ–Ω–µ–Ω
    was_cancelled = (
        len(self.events) > 0
        and self.events[-1].event_type == "cancelled"
    )

    return is_large and short_lived and was_cancelled


class SpoofingDetector:
  """
  –î–µ—Ç–µ–∫—Ç–æ—Ä spoofing –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π.

  –ê–ª–≥–æ—Ä–∏—Ç–º:
  1. –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤ —Å—Ç–∞–∫–∞–Ω–µ
  2. –í—ã—á–∏—Å–ª—è–µ–º TTL (Time To Live) –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
  3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –∫—Ä—É–ø–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
  4. –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º spoofing –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
  """

  def __init__(self, config: SpoofingConfig):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞.

    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
    """
    self.config = config

    # –ò—Å—Ç–æ—Ä–∏—è —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    # symbol -> side -> price -> LevelHistory
    self.level_history: Dict[str, Dict[str, Dict[float, LevelHistory]]] = defaultdict(
      lambda: {"bid": {}, "ask": {}}
    )

    # –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    self.detected_patterns: Dict[str, List[SpoofingPattern]] = defaultdict(list)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    self.total_checks = 0
    self.patterns_detected = 0

    logger.info(
      f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω SpoofingDetector: "
      f"large_order_threshold={config.large_order_threshold_usdt}, "
      f"suspicious_ttl={config.suspicious_ttl_seconds}s"
    )

  def update(self, snapshot: OrderBookSnapshot):
    """
    –û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä –Ω–æ–≤—ã–º snapshot —Å—Ç–∞–∫–∞–Ω–∞.

    Args:
        snapshot: Snapshot —Å—Ç–∞–∫–∞–Ω–∞
    """
    symbol = snapshot.symbol
    timestamp = snapshot.timestamp
    mid_price = snapshot.mid_price

    if mid_price is None or mid_price == 0:
      return

    # –¢–µ–∫—É—â–∏–µ —É—Ä–æ–≤–Ω–∏ –∏–∑ snapshot (bids/asks - —ç—Ç–æ list[tuple[float, float]])
    current_bids = {price: volume for price, volume in snapshot.bids}
    current_asks = {price: volume for price, volume in snapshot.asks}

    # –û–±–Ω–æ–≤–ª—è–µ–º bid —É—Ä–æ–≤–Ω–∏
    self._update_side(
      symbol,
      "bid",
      current_bids,
      timestamp,
      mid_price
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º ask —É—Ä–æ–≤–Ω–∏
    self._update_side(
      symbol,
      "ask",
      current_asks,
      timestamp,
      mid_price
    )

    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    self.total_checks += 1
    if self.total_checks % 100 == 0:  # –ö–∞–∂–¥—ã–µ 100 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      self._detect_patterns(symbol, timestamp, mid_price)
      self._cleanup_old_history(symbol, timestamp)

  def _update_side(
      self,
      symbol: str,
      side: str,
      current_levels: Dict[float, float],
      timestamp: int,
      mid_price: float
  ):
    """–û–±–Ω–æ–≤–∏—Ç—å –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É —Å—Ç–∞–∫–∞–Ω–∞."""
    history_side = self.level_history[symbol][side]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—Ä–æ–≤–Ω–∏
    for price, volume in current_levels.items():
      if price not in history_side:
        # –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        history_side[price] = LevelHistory(price, side)

      history_side[price].update(timestamp, volume, mid_price)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ (–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ)
    removed_prices = set(history_side.keys()) - set(current_levels.keys())
    for price in removed_prices:
      history_side[price].mark_cancelled(timestamp, mid_price)

  def _detect_patterns(
      self,
      symbol: str,
      timestamp: int,
      mid_price: float
  ):
    """–û–±–Ω–∞—Ä—É–∂–∏—Ç—å spoofing –ø–∞—Ç—Ç–µ—Ä–Ω—ã."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç–æ—Ä–æ–Ω—É
    for side in ["bid", "ask"]:
      pattern = self._analyze_side_for_spoofing(
        symbol,
        side,
        timestamp,
        mid_price
      )

      if pattern:
        self.detected_patterns[symbol].append(pattern)
        self.patterns_detected += 1

        logger.warning(
          f"üö® SPOOFING –û–ë–ù–ê–†–£–ñ–ï–ù [{symbol}]: "
          f"side={side}, confidence={pattern.confidence:.2f}, "
          f"reason={pattern.reason}"
        )

  def _analyze_side_for_spoofing(
      self,
      symbol: str,
      side: str,
      timestamp: int,
      mid_price: float
  ) -> Optional[SpoofingPattern]:
    """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –Ω–∞ spoofing."""
    history_side = self.level_history[symbol][side]

    if not history_side:
      return None

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
    suspicious_levels = [
      level for level in history_side.values()
      if level.is_suspicious(self.config)
    ]

    if len(suspicious_levels) < self.config.min_events_for_detection:
      return None

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
    total_volume = sum(level.max_volume for level in suspicious_levels)
    total_volume_usdt = sum(
      level.max_volume * level.price
      for level in suspicious_levels
    )

    ttls = [level.get_ttl() for level in suspicious_levels]
    avg_ttl = np.mean(ttls) if ttls else 0.0

    # –°—á–∏—Ç–∞–µ–º cancel rate
    all_events = []
    for level in suspicious_levels:
      all_events.extend(level.events)

    cancelled_count = sum(
      1 for e in all_events
      if e.event_type == "cancelled"
    )
    cancel_rate = cancelled_count / len(all_events) if all_events else 0.0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏
    if cancel_rate < self.config.cancel_rate_threshold:
      return None

    # –°—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –æ—Ç mid price
    distances = [
      level.events[-1].distance_from_mid
      for level in suspicious_levels
      if level.events
    ]
    avg_distance = np.mean(distances) if distances else 0.0

    # –í—ã—á–∏—Å–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    confidence = self._calculate_confidence(
      cancel_rate=cancel_rate,
      avg_ttl=avg_ttl,
      total_volume_usdt=total_volume_usdt,
      avg_distance=avg_distance
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É
    reason = (
      f"{len(suspicious_levels)} –∫—Ä—É–ø–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ "
      f"(${total_volume_usdt:,.0f}) —Å –≤—ã—Å–æ–∫–æ–π –æ—Ç–º–µ–Ω–æ–π ({cancel_rate:.1%}) "
      f"–∏ –∫–æ—Ä–æ—Ç–∫–∏–º TTL ({avg_ttl:.1f}s)"
    )

    return SpoofingPattern(
      symbol=symbol,
      timestamp=timestamp,
      side=side,
      confidence=confidence,
      large_orders_count=len(suspicious_levels),
      total_volume=total_volume,
      avg_ttl_seconds=avg_ttl,
      cancel_rate=cancel_rate,
      avg_distance_from_mid=avg_distance,
      events=all_events[-20:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–±—ã—Ç–∏–π
      reason=reason
    )

  def _calculate_confidence(
      self,
      cancel_rate: float,
      avg_ttl: float,
      total_volume_usdt: float,
      avg_distance: float
  ) -> float:
    """–í—ã—á–∏—Å–ª–∏—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ spoofing –ø–∞—Ç—Ç–µ—Ä–Ω–µ."""
    confidence = 0.0

    # –í—ã—Å–æ–∫–∞—è –æ—Ç–º–µ–Ω–∞
    if cancel_rate > 0.9:
      confidence += 0.4
    elif cancel_rate > 0.8:
      confidence += 0.3
    elif cancel_rate > 0.7:
      confidence += 0.2

    # –ö–æ—Ä–æ—Ç–∫–∏–π TTL
    if avg_ttl < 5.0:
      confidence += 0.3
    elif avg_ttl < 10.0:
      confidence += 0.2

    # –ö—Ä—É–ø–Ω—ã–π –æ–±—ä–µ–º
    if total_volume_usdt > 100000:
      confidence += 0.2
    elif total_volume_usdt > 50000:
      confidence += 0.1

    # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è
    if (
        self.config.min_distance_from_mid
        < avg_distance
        < self.config.max_distance_from_mid
    ):
      confidence += 0.1

    return min(confidence, 1.0)

  def _cleanup_old_history(self, symbol: str, timestamp: int):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π –∏—Å—Ç–æ—Ä–∏–∏."""
    cutoff_time = timestamp - (self.config.history_window_seconds * 1000)

    for side in ["bid", "ask"]:
      history_side = self.level_history[symbol][side]

      # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —É—Ä–æ–≤–Ω–∏
      old_prices = [
        price for price, level in history_side.items()
        if level.last_seen and level.last_seen < cutoff_time
      ]

      for price in old_prices:
        del history_side[price]

  def get_recent_patterns(
      self,
      symbol: str,
      time_window_seconds: int = 60
  ) -> List[SpoofingPattern]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã spoofing.

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        time_window_seconds: –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ

    Returns:
        –°–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    """
    current_time = int(datetime.now().timestamp() * 1000)
    cutoff_time = current_time - (time_window_seconds * 1000)

    patterns = self.detected_patterns.get(symbol, [])

    return [
      p for p in patterns
      if p.timestamp >= cutoff_time
    ]

  def is_spoofing_active(
      self,
      symbol: str,
      side: Optional[str] = None,
      time_window_seconds: int = 60
  ) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å spoofing.

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        side: –°—Ç–æ—Ä–æ–Ω–∞ ("bid"/"ask") –∏–ª–∏ None –¥–ª—è –æ–±–µ–∏—Ö
        time_window_seconds: –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ

    Returns:
        True –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π spoofing
    """
    patterns = self.get_recent_patterns(symbol, time_window_seconds)

    if side:
      patterns = [p for p in patterns if p.side == side]

    return len(patterns) > 0

  def get_statistics(self) -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞."""
    total_patterns = sum(
      len(patterns)
      for patterns in self.detected_patterns.values()
    )

    return {
      'total_checks': self.total_checks,
      'patterns_detected': self.patterns_detected,
      'total_patterns': total_patterns,
      'symbols_monitored': len(self.level_history),
      'detection_rate': (
        self.patterns_detected / self.total_checks
        if self.total_checks > 0
        else 0.0
      )
    }


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
  from backend.models.orderbook import OrderBookSnapshot, OrderBookLevel

  # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä
  config = SpoofingConfig(
    large_order_threshold_usdt=50000.0,
    suspicious_ttl_seconds=10.0,
    cancel_rate_threshold=0.7
  )

  detector = SpoofingDetector(config)

  # –°–∏–º—É–ª–∏—Ä—É–µ–º spoofing –ø–∞—Ç—Ç–µ—Ä–Ω
  base_time = int(datetime.now().timestamp() * 1000)

  # Snapshot 1: –ë–æ–ª—å—à–æ–π bid –æ—Ä–¥–µ—Ä –ø–æ—è–≤–ª—è–µ—Ç—Å—è
  snapshot1 = OrderBookSnapshot(
    symbol="BTCUSDT",
    bids=[
      OrderBookLevel(50000.0, 10.0),  # $500k - –∫—Ä—É–ø–Ω—ã–π –æ—Ä–¥–µ—Ä
      OrderBookLevel(49999.0, 1.0),
    ],
    asks=[
      OrderBookLevel(50001.0, 1.0),
    ],
    timestamp=base_time
  )

  detector.update(snapshot1)

  # Snapshot 2: 5 —Å–µ–∫—É–Ω–¥ —Å–ø—É—Å—Ç—è, –æ—Ä–¥–µ—Ä –≤—Å–µ –µ—â–µ —Ç–∞–º
  snapshot2 = OrderBookSnapshot(
    symbol="BTCUSDT",
    bids=[
      OrderBookLevel(50000.0, 10.0),
      OrderBookLevel(49999.0, 1.0),
    ],
    asks=[
      OrderBookLevel(50001.0, 1.0),
    ],
    timestamp=base_time + 5000
  )

  detector.update(snapshot2)

  # Snapshot 3: 8 —Å–µ–∫—É–Ω–¥ —Å–ø—É—Å—Ç—è, –∫—Ä—É–ø–Ω—ã–π –æ—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω (spoofing!)
  snapshot3 = OrderBookSnapshot(
    symbol="BTCUSDT",
    bids=[
      OrderBookLevel(49999.0, 1.0),  # –ö—Ä—É–ø–Ω—ã–π bid –∏—Å—á–µ–∑
    ],
    asks=[
      OrderBookLevel(50001.0, 1.0),
    ],
    timestamp=base_time + 8000
  )

  detector.update(snapshot3)

  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ
  patterns = detector.get_recent_patterns("BTCUSDT", time_window_seconds=60)

  print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(patterns)}")
  for pattern in patterns:
    print(f"  Side: {pattern.side}")
    print(f"  Confidence: {pattern.confidence:.2f}")
    print(f"  Reason: {pattern.reason}")

  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  stats = detector.get_statistics()
  print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
  print(f"  Total checks: {stats['total_checks']}")
  print(f"  Patterns detected: {stats['patterns_detected']}")