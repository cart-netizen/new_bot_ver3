"""
Layering Detector –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è layering –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π.

Layering - —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö —Ü–µ–Ω—ã
–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∂–Ω–æ–≥–æ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ —Å–ø—Ä–æ—Å–µ/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏.

–ü—Ä–∏–∑–Ω–∞–∫–∏ layering:
- –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ—Ö–æ–∂–∏—Ö —É—Ä–æ–≤–Ω—è—Ö
- –û—Ä–¥–µ—Ä–∞ —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (–≤ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏)
- –ü–æ—Ö–æ–∂–∏–µ —Ä–∞–∑–º–µ—Ä—ã –æ—Ä–¥–µ—Ä–æ–≤
- –û—Ä–¥–µ—Ä–∞ —Å –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã —Å—Ç–∞–∫–∞–Ω–∞
- –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã

–ü—É—Ç—å: backend/ml_engine/detection/layering_detector.py
"""

from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from datetime import datetime
from collections import defaultdict, deque
import numpy as np

from core.logger import get_logger
from models.orderbook import OrderBookSnapshot, OrderBookLevel

logger = get_logger(__name__)


@dataclass
class LayeringConfig:
  """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞."""
  # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è layer
  min_orders_in_layer: int = 3  # –ú–∏–Ω–∏–º—É–º –æ—Ä–¥–µ—Ä–æ–≤ –≤ —Å–ª–æ–µ
  max_price_spread_pct: float = 0.005  # –ú–∞–∫—Å —Ä–∞–∑–±—Ä–æ—Å —Ü–µ–Ω –≤ —Å–ª–æ–µ (0.5%)

  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
  placement_window_seconds: float = 30.0  # –û–∫–Ω–æ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
  cancellation_window_seconds: float = 60.0  # –û–∫–Ω–æ –¥–ª—è –æ—Ç–º–µ–Ω—ã

  # –ü–æ—Ä–æ–≥–∏ –æ–±—ä–µ–º–∞
  volume_similarity_threshold: float = 0.3  # 30% —Ä–∞–∑–Ω–∏—Ü–∞ –º–∞–∫—Å
  min_layer_volume_usdt: float = 30000.0  # $30k+ –Ω–∞ —Å–ª–æ–π

  # –ò—Å—Ç–æ—Ä–∏—è
  history_window_seconds: int = 300  # 5 –º–∏–Ω—É—Ç

  # –î–µ—Ç–µ–∫—Ü–∏—è
  min_confidence: float = 0.6


@dataclass
class OrderLayer:
  """–°–ª–æ–π –æ—Ä–¥–µ—Ä–æ–≤."""
  side: str  # "bid" –∏–ª–∏ "ask"
  prices: List[float]
  volumes: List[float]
  timestamps: List[int]

  # –ú–µ—Ç—Ä–∏–∫–∏ —Å–ª–æ—è
  price_spread: float
  total_volume: float
  avg_volume: float
  volume_std: float
  placement_duration: float  # seconds

  @property
  def order_count(self) -> int:
    return len(self.prices)

  @property
  def mid_price(self) -> float:
    return float(np.mean(self.prices))


@dataclass
class LayeringPattern:
  """–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω layering."""
  symbol: str
  timestamp: int
  side: str
  confidence: float

  # –î–µ—Ç–∞–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
  layers: List[OrderLayer]
  total_orders: int
  total_volume: float
  placement_duration: float
  cancellation_detected: bool

  reason: str


class OrderTracker:
  """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ layering."""

  def __init__(self, symbol: str, side: str):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è tracker.

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        side: –°—Ç–æ—Ä–æ–Ω–∞ ("bid" –∏–ª–∏ "ask")
    """
    self.symbol = symbol
    self.side = side

    # –ò—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤: price -> (timestamp, volume)
    self.order_history: Dict[float, List[Tuple[int, float]]] = defaultdict(list)

    # –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
    self.active_orders: Dict[float, float] = {}  # price -> volume

  def update(self, levels: List[OrderBookLevel], timestamp: int):
    """–û–±–Ω–æ–≤–∏—Ç—å tracker —Å –Ω–æ–≤—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏."""
    current_prices = {level.price: level.quantity for level in levels}

    # –ù–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞
    new_prices = set(current_prices.keys()) - set(self.active_orders.keys())
    for price in new_prices:
      volume = current_prices[price]
      self.order_history[price].append((timestamp, volume))

    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
    for price in set(current_prices.keys()) & set(self.active_orders.keys()):
      if current_prices[price] != self.active_orders[price]:
        self.order_history[price].append((timestamp, current_prices[price]))

    # –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
    cancelled_prices = set(self.active_orders.keys()) - set(current_prices.keys())
    for price in cancelled_prices:
      self.order_history[price].append((timestamp, 0.0))  # 0 = cancelled

    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ
    self.active_orders = current_prices

  def find_recent_placements(
      self,
      window_seconds: float,
      current_time: int
  ) -> List[Tuple[float, int, float]]:
    """
    –ù–∞–π—Ç–∏ –Ω–µ–¥–∞–≤–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞.

    Returns:
        List[(price, timestamp, volume)]
    """
    cutoff_time = current_time - int(window_seconds * 1000)

    placements = []
    for price, history in self.order_history.items():
      for timestamp, volume in history:
        if timestamp >= cutoff_time and volume > 0:
          # –≠—Ç–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∏–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ
          placements.append((price, timestamp, volume))

    return placements

  def find_recent_cancellations(
      self,
      window_seconds: float,
      current_time: int
  ) -> List[Tuple[float, int]]:
    """
    –ù–∞–π—Ç–∏ –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞.

    Returns:
        List[(price, timestamp)]
    """
    cutoff_time = current_time - int(window_seconds * 1000)

    cancellations = []
    for price, history in self.order_history.items():
      for timestamp, volume in history:
        if timestamp >= cutoff_time and volume == 0:
          cancellations.append((price, timestamp))

    return cancellations

  def cleanup_old_history(self, cutoff_time: int):
    """–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é."""
    for price in list(self.order_history.keys()):
      # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
      self.order_history[price] = [
        (ts, vol) for ts, vol in self.order_history[price]
        if ts >= cutoff_time
      ]

      # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ
      if not self.order_history[price]:
        del self.order_history[price]


class LayeringDetector:
  """
  –î–µ—Ç–µ–∫—Ç–æ—Ä layering –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π.

  –ê–ª–≥–æ—Ä–∏—Ç–º:
  1. –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
  2. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–ª–∏–∑–∫–∏–µ –æ—Ä–¥–µ—Ä–∞ –≤ "—Å–ª–æ–∏" (layers)
  3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–ª–æ–µ–≤
  4. –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º layering –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  5. –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Ç–º–µ–Ω—É —Å–ª–æ–µ–≤
  """

  def __init__(self, config: LayeringConfig):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞.

    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    """
    self.config = config

    # Trackers –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    # symbol -> side -> OrderTracker
    self.trackers: Dict[str, Dict[str, OrderTracker]] = {}


    # –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    self.detected_patterns: Dict[str, List[LayeringPattern]] = defaultdict(list)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    self.total_checks = 0
    self.patterns_detected = 0

    logger.info(
      f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω LayeringDetector: "
      f"min_orders={config.min_orders_in_layer}, "
      f"price_spread={config.max_price_spread_pct:.2%}"
    )

  def update(self, snapshot: OrderBookSnapshot):
    """
    –û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä –Ω–æ–≤—ã–º snapshot.

    Args:
        snapshot: Snapshot —Å—Ç–∞–∫–∞–Ω–∞
    """
    symbol = snapshot.symbol
    timestamp = snapshot.timestamp

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º trackers –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if symbol not in self.trackers:
      self.trackers[symbol] = {
        "bid": OrderTracker(symbol, "bid"),
        "ask": OrderTracker(symbol, "ask")
      }

    # –û–±–Ω–æ–≤–ª—è–µ–º trackers
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º tuples –≤ OrderBookLevel
    from models.orderbook import OrderBookLevel

    bid_levels = [
      OrderBookLevel(price=price, quantity=qty)
      for price, qty in snapshot.bids
    ]
    ask_levels = [
      OrderBookLevel(price=price, quantity=qty)
      for price, qty in snapshot.asks
    ]

    # –û–±–Ω–æ–≤–ª—è–µ–º trackers
    self.trackers[symbol]["bid"].update(bid_levels, timestamp)
    self.trackers[symbol]["ask"].update(ask_levels, timestamp)

    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –¥–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    self.total_checks += 1
    if self.total_checks % 50 == 0:  # –ö–∞–∂–¥—ã–µ 50 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      self._detect_patterns(symbol, timestamp, snapshot.mid_price)
      self._cleanup_old_data(symbol, timestamp)

  def _detect_patterns(
      self,
      symbol: str,
      timestamp: int,
      mid_price: Optional[float]
  ):
    """–û–±–Ω–∞—Ä—É–∂–∏—Ç—å layering –ø–∞—Ç—Ç–µ—Ä–Ω—ã."""
    if mid_price is None:
      return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç–æ—Ä–æ–Ω—É
    for side in ["bid", "ask"]:
      pattern = self._analyze_side_for_layering(
        symbol,
        side,
        timestamp,
        mid_price
      )

      if pattern:
        self.detected_patterns[symbol].append(pattern)
        self.patterns_detected += 1

        logger.warning(
          f"üö® LAYERING –û–ë–ù–ê–†–£–ñ–ï–ù [{symbol}]: "
          f"side={side}, layers={len(pattern.layers)}, "
          f"confidence={pattern.confidence:.2f}, "
          f"reason={pattern.reason}"
        )

  def _analyze_side_for_layering(
      self,
      symbol: str,
      side: str,
      timestamp: int,
      mid_price: float
  ) -> Optional[LayeringPattern]:
    """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –Ω–∞ layering."""
    tracker = self.trackers[symbol][side]

    # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–¥–∞–≤–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
    placements = tracker.find_recent_placements(
      self.config.placement_window_seconds,
      timestamp
    )

    if len(placements) < self.config.min_orders_in_layer:
      return None

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ä–¥–µ—Ä–∞ –≤ —Å–ª–æ–∏
    layers = self._group_into_layers(placements, mid_price)

    if not layers:
      return None

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    valid_layers = [
      layer for layer in layers
      if self._is_valid_layer(layer)
    ]

    if not valid_layers:
      return None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—ã
    cancellations = tracker.find_recent_cancellations(
      self.config.cancellation_window_seconds,
      timestamp
    )

    cancellation_detected = len(cancellations) >= self.config.min_orders_in_layer

    # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    total_orders = sum(layer.order_count for layer in valid_layers)
    total_volume = sum(layer.total_volume for layer in valid_layers)

    # Placement duration
    all_timestamps = []
    for layer in valid_layers:
      all_timestamps.extend(layer.timestamps)

    if len(all_timestamps) > 1:
      placement_duration = (
                               max(all_timestamps) - min(all_timestamps)
                           ) / 1000.0
    else:
      placement_duration = 0.0

    # –í—ã—á–∏—Å–ª—è–µ–º confidence
    confidence = self._calculate_confidence(
      layers=valid_layers,
      total_volume=total_volume,
      placement_duration=placement_duration,
      cancellation_detected=cancellation_detected
    )

    if confidence < self.config.min_confidence:
      return None

    # –§–æ—Ä–º–∏—Ä—É–µ–º reason
    reason = (
      f"{len(valid_layers)} —Å–ª–æ–µ–≤ —Å {total_orders} –æ—Ä–¥–µ—Ä–∞–º–∏ "
      f"(${total_volume * mid_price:,.0f}) "
      f"—Ä–∞–∑–º–µ—â–µ–Ω—ã –∑–∞ {placement_duration:.1f}s"
    )

    if cancellation_detected:
      reason += f", {len(cancellations)} –æ—Ç–º–µ–Ω –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"

    return LayeringPattern(
      symbol=symbol,
      timestamp=timestamp,
      side=side,
      confidence=confidence,
      layers=valid_layers,
      total_orders=total_orders,
      total_volume=total_volume,
      placement_duration=placement_duration,
      cancellation_detected=cancellation_detected,
      reason=reason
    )

  def _group_into_layers(
      self,
      placements: List[Tuple[float, int, float]],
      mid_price: float
  ) -> List[OrderLayer]:
    """
    –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–¥–µ—Ä–∞ –≤ —Å–ª–æ–∏.

    Args:
        placements: [(price, timestamp, volume)]
        mid_price: –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞

    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–µ–≤
    """
    if not placements:
      return []

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
    placements_sorted = sorted(placements, key=lambda x: x[0])

    layers = []
    current_layer_prices = [placements_sorted[0][0]]
    current_layer_volumes = [placements_sorted[0][2]]
    current_layer_timestamps = [placements_sorted[0][1]]

    for i in range(1, len(placements_sorted)):
      price, timestamp, volume = placements_sorted[i]

      # –í—ã—á–∏—Å–ª—è–µ–º spread –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –≤ —Å–ª–æ–µ
      base_price = current_layer_prices[0]
      spread = abs(price - base_price) / mid_price

      if spread <= self.config.max_price_spread_pct:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–∏–π —Å–ª–æ–π
        current_layer_prices.append(price)
        current_layer_volumes.append(volume)
        current_layer_timestamps.append(timestamp)
      else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–π
        if len(current_layer_prices) >= self.config.min_orders_in_layer:
          layer = self._create_layer(
            current_layer_prices,
            current_layer_volumes,
            current_layer_timestamps
          )
          if layer:
            layers.append(layer)

        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–π
        current_layer_prices = [price]
        current_layer_volumes = [volume]
        current_layer_timestamps = [timestamp]

    # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–æ–π
    if len(current_layer_prices) >= self.config.min_orders_in_layer:
      layer = self._create_layer(
        current_layer_prices,
        current_layer_volumes,
        current_layer_timestamps
      )
      if layer:
        layers.append(layer)

    return layers

  def _create_layer(
      self,
      prices: List[float],
      volumes: List[float],
      timestamps: List[int]
  ) -> Optional[OrderLayer]:
    """–°–æ–∑–¥–∞—Ç—å —Å–ª–æ–π –∏–∑ –æ—Ä–¥–µ—Ä–æ–≤."""
    if not prices:
      return None

    # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    price_spread = float((max(prices) - min(prices)) / np.mean(prices))
    total_volume = float(sum(volumes))
    avg_volume = float(np.mean(volumes))
    volume_std = float(np.std(volumes)) if len(volumes) > 1 else 0.0

    placement_duration = (
      (max(timestamps) - min(timestamps)) / 1000.0
      if len(timestamps) > 1
      else 0.0
    )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É (bid –∏–ª–∏ ask) –ø–æ —Ü–µ–Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥—Ä—É–≥–∏—Ö
    # –£–ø—Ä–æ—â–µ–Ω–Ω–æ - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–æ—Ä–æ–Ω—É –æ—Ç tracker
    side = "bid"  # –ë—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ–∑–∂–µ

    return OrderLayer(
      side=side,
      prices=prices,
      volumes=volumes,
      timestamps=timestamps,
      price_spread=price_spread,
      total_volume=total_volume,
      avg_volume=avg_volume,
      volume_std=volume_std,
      placement_duration=placement_duration
    )

  def _is_valid_layer(self, layer: OrderLayer) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–ª–æ—è."""
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
    if layer.total_volume < self.config.min_layer_volume_usdt / layer.mid_price:
      return False

    # –°—Ö–æ–∂–µ—Å—Ç—å –æ–±—ä–µ–º–æ–≤
    if layer.order_count > 1:
      cv = layer.volume_std / layer.avg_volume  # Coefficient of variation
      if cv > self.config.volume_similarity_threshold:
        return False

    return True

  def _calculate_confidence(
      self,
      layers: List[OrderLayer],
      total_volume: float,
      placement_duration: float,
      cancellation_detected: bool
  ) -> float:
    """–í—ã—á–∏—Å–ª–∏—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ layering –ø–∞—Ç—Ç–µ—Ä–Ω–µ."""
    confidence = 0.0

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤
    if len(layers) >= 5:
      confidence += 0.3
    elif len(layers) >= 3:
      confidence += 0.2

    # –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
    if placement_duration < 10.0:
      confidence += 0.3
    elif placement_duration < 30.0:
      confidence += 0.2

    # –ö—Ä—É–ø–Ω—ã–π –æ–±—ä–µ–º
    # (total_volume —É–∂–µ –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ, —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ –ø—Ä–∏–º–µ—Ä–Ω—É—é —Ü–µ–Ω—É)
    # –£–ø—Ä–æ—â–µ–Ω–∏–µ: –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É ~50000
    total_usdt = total_volume * 50000
    if total_usdt > 100000:
      confidence += 0.2
    elif total_usdt > 50000:
      confidence += 0.1

    # –û—Ç–º–µ–Ω—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã
    if cancellation_detected:
      confidence += 0.2

    return min(confidence, 1.0)

  def _cleanup_old_data(self, symbol: str, timestamp: int):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    cutoff_time = timestamp - (self.config.history_window_seconds * 1000)

    for side in ["bid", "ask"]:
      tracker = self.trackers[symbol][side]
      if tracker:
        tracker.cleanup_old_history(cutoff_time)

  def get_recent_patterns(
      self,
      symbol: str,
      time_window_seconds: int = 60
  ) -> List[LayeringPattern]:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã layering."""
    current_time = int(datetime.now().timestamp() * 1000)
    cutoff_time = current_time - (time_window_seconds * 1000)

    patterns = self.detected_patterns.get(symbol, [])

    return [
      p for p in patterns
      if p.timestamp >= cutoff_time
    ]

  def is_layering_active(
      self,
      symbol: str,
      side: Optional[str] = None,
      time_window_seconds: int = 60
  ) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å layering."""
    patterns = self.get_recent_patterns(symbol, time_window_seconds)

    if side:
      patterns = [p for p in patterns if p.side == side]

    return len(patterns) > 0

  def get_statistics(self) -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞."""
    total_patterns = sum(
      len(patterns)
      for patterns in self.detected_patterns.values()
    )

    return {
      'total_checks': self.total_checks,
      'patterns_detected': self.patterns_detected,
      'total_patterns': total_patterns,
      'symbols_monitored': len(self.trackers),
      'detection_rate': (
        self.patterns_detected / self.total_checks
        if self.total_checks > 0
        else 0.0
      )
    }


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
  from models.orderbook import OrderBookSnapshot, OrderBookLevel

  config = LayeringConfig(
    min_orders_in_layer=3,
    max_price_spread_pct=0.005,
    min_layer_volume_usdt=30000.0
  )

  detector = LayeringDetector(config)

  # –°–∏–º—É–ª–∏—Ä—É–µ–º layering: –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ bid –æ—Ä–¥–µ—Ä–∞ –±–ª–∏–∑–∫–æ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É
  base_time = int(datetime.now().timestamp() * 1000)

  # Snapshot 1: –ù–∞—á–∞–ª–æ layering
  snapshot1 = OrderBookSnapshot(
    symbol="BTCUSDT",
    bids=[
      OrderBookLevel(50000.0, 2.0),
      OrderBookLevel(49995.0, 2.1),
      OrderBookLevel(49990.0, 1.9),
    ],
    asks=[OrderBookLevel(50100.0, 1.0)],
    timestamp=base_time
  )

  detector.update(snapshot1)

  # Snapshot 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ—â–µ –æ—Ä–¥–µ—Ä–æ–≤
  snapshot2 = OrderBookSnapshot(
    symbol="BTCUSDT",
    bids=[
      OrderBookLevel(50000.0, 2.0),
      OrderBookLevel(49995.0, 2.1),
      OrderBookLevel(49990.0, 1.9),
      OrderBookLevel(49985.0, 2.0),  # –ù–æ–≤—ã–π
    ],
    asks=[OrderBookLevel(50100.0, 1.0)],
    timestamp=base_time + 5000
  )

  detector.update(snapshot2)

  # –ü—Ä–æ–≤–µ—Ä–∫–∞
  patterns = detector.get_recent_patterns("BTCUSDT")
  print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ layering –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(patterns)}")

  for pattern in patterns:
    print(f"  Side: {pattern.side}")
    print(f"  Layers: {len(pattern.layers)}")
    print(f"  Confidence: {pattern.confidence:.2f}")
    print(f"  Reason: {pattern.reason}")