"""
ML Signal Validator —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞.

–ò–∑–º–µ–Ω–µ–Ω–∏—è:
1. –î–æ–±–∞–≤–ª–µ–Ω health check –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
2. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ML —Å–µ—Ä–≤–µ—Ä–∞
3. –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è fallback
4. Graceful degradation –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ML
"""

import asyncio
import aiohttp
from typing import Dict, Optional, Tuple
from dataclasses import dataclass
from datetime import datetime
import numpy as np
from collections import deque

from core.logger import get_logger
from models.signal import TradingSignal, SignalType, SignalStrength
from ml_engine.features import FeatureVector
from utils.helpers import safe_enum_value

logger = get_logger(__name__)


@dataclass
class ValidationConfig:
  """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞."""
  # Model Server
  model_server_url: str = "http://localhost:8001"
  model_version: str = "latest"
  request_timeout: float = 5.0  # seconds

  # Health Check
  health_check_enabled: bool = True
  health_check_interval: int = 30  # seconds
  health_check_timeout: float = 2.0  # seconds

  # Validation thresholds
  min_ml_confidence: float = 0.6
  confidence_boost_factor: float = 1.2
  confidence_penalty_factor: float = 0.7

  # Hybrid decision
  ml_weight: float = 0.6
  strategy_weight: float = 0.4

  # Fallback
  use_fallback_on_error: bool = True
  fallback_to_strategy: bool = True

  # Caching
  cache_predictions: bool = True
  cache_ttl_seconds: int = 30


@dataclass
class ValidationResult:
  """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞."""
  original_signal: TradingSignal
  ml_direction: Optional[str]
  ml_confidence: Optional[float]
  ml_expected_return: Optional[float]

  validated: bool
  final_signal_type: SignalType
  final_confidence: float

  agreement: bool
  reason: str

  inference_time_ms: float
  used_fallback: bool


class MLSignalValidator:
  """
  –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ ML –º–æ–¥–µ–ª—å —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é.
  """

  def __init__(self, config: ValidationConfig):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞.

    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
    """
    self.config = config

    # HTTP session –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
    self.session: Optional[aiohttp.ClientSession] = None

    # –ö—ç—à –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    self.prediction_cache: Dict[str, Tuple[Dict, float]] = {}

    # –°—Ç–∞—Ç—É—Å ML —Å–µ—Ä–≤–µ—Ä–∞
    self.ml_server_available: bool = False
    self.last_health_check: Optional[float] = None
    self.health_check_task: Optional[asyncio.Task] = None

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    self.total_validations = 0
    self.ml_success_count = 0
    self.ml_error_count = 0
    self.fallback_count = 0
    self.agreement_count = 0
    self.disagreement_count = 0
    self.health_check_failures = 0

    # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    self.direction_to_signal_type = {
      "BUY": SignalType.BUY,
      "SELL": SignalType.SELL,
      "HOLD": None
    }

    logger.info(
      f"ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω MLSignalValidator: "
      f"server={config.model_server_url}, "
      f"ml_weight={config.ml_weight}, "
      f"health_check_enabled={config.health_check_enabled}"
    )

  async def initialize(self):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP —Å–µ—Å—Å–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ ML —Å–µ—Ä–≤–µ—Ä–∞."""
    if self.session is None:
      timeout = aiohttp.ClientTimeout(total=self.config.request_timeout)
      self.session = aiohttp.ClientSession(timeout=timeout)
      logger.info("‚úì HTTP session —Å–æ–∑–¥–∞–Ω–∞")

    # –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ML —Å–µ—Ä–≤–µ—Ä–∞
    await self._check_ml_server_health()

    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
    if self.config.health_check_enabled:
      self.health_check_task = asyncio.create_task(
        self._health_check_loop()
      )
      logger.info(
        f"‚úì –ó–∞–ø—É—â–µ–Ω health check loop —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º "
        f"{self.config.health_check_interval}s"
      )

  async def close(self):
    """–ó–∞–∫—Ä—ã—Ç—å HTTP —Å–µ—Å—Å–∏—é –∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å health check."""
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ health check loop
    if self.health_check_task:
      self.health_check_task.cancel()
      try:
        await self.health_check_task
      except asyncio.CancelledError:
        pass
      logger.info("‚úì Health check loop –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏
    if self.session:
      await self.session.close()
      self.session = None
      logger.info("‚úì HTTP session –∑–∞–∫—Ä—ã—Ç–∞")

  async def _check_ml_server_health(self) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ML —Å–µ—Ä–≤–µ—Ä–∞.

    Returns:
        bool: True –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
    """
    try:
      health_url = f"{self.config.model_server_url}/health"
      timeout = aiohttp.ClientTimeout(total=self.config.health_check_timeout)

      async with aiohttp.ClientSession(timeout=timeout) as session:
        async with session.get(health_url) as response:
          if response.status == 200:
            self.ml_server_available = True
            self.last_health_check = datetime.now().timestamp()
            self.health_check_failures = 0

            if not self.ml_server_available:
              logger.info(
                f"‚úÖ ML Server –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω: "
                f"{self.config.model_server_url}"
              )

            return True

    except Exception as e:
      self.ml_server_available = False
      self.health_check_failures += 1

      logger.warning(
        f"‚ö†Ô∏è ML Server –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ {self.health_check_failures}): "
        f"{self.config.model_server_url} - {str(e)[:100]}"
      )

      return False

  async def _health_check_loop(self):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è ML —Å–µ—Ä–≤–µ—Ä–∞."""
    while True:
      try:
        await asyncio.sleep(self.config.health_check_interval)
        await self._check_ml_server_health()

      except asyncio.CancelledError:
        logger.info("Health check loop cancelled")
        break
      except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ health check loop: {e}")

  def _get_cache_key(self, symbol: str, feature_vector: FeatureVector) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è –∫—ç—à–∞."""
    features_hash = hash(tuple(feature_vector.to_array()))
    return f"{symbol}_{features_hash}_{feature_vector.timestamp}"

  def _get_cached_prediction(self, cache_key: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–∑ –∫—ç—à–∞."""
    if not self.config.cache_predictions:
      return None

    if cache_key in self.prediction_cache:
      prediction, cached_at = self.prediction_cache[cache_key]

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
      age = datetime.now().timestamp() - cached_at
      if age < self.config.cache_ttl_seconds:
        logger.debug(f"‚úì Cache hit: {cache_key}, age={age:.1f}s")
        return prediction
      else:
        # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à
        del self.prediction_cache[cache_key]

    return None

  def _cache_prediction(self, cache_key: str, prediction: Dict):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤ –∫—ç—à."""
    if self.config.cache_predictions:
      self.prediction_cache[cache_key] = (
        prediction,
        datetime.now().timestamp()
      )

  async def _request_ml_prediction(
      self,
      symbol: str,
      feature_vector: FeatureVector
  ) -> Optional[Dict]:
    """
    –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç ML —Å–µ—Ä–≤–µ—Ä–∞.

    Returns:
        Dict —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    if not self.ml_server_available:
      logger.debug(
        f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø—Ä–æ—Å–∞ –∫ ML Server - —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
      )
      return None

    try:
      if not self.session:
        raise RuntimeError("HTTP session not initialized")

      # URL –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
      predict_url = f"{self.config.model_server_url}/predict"

      # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      request_data = {
        "symbol": symbol,
        "features": feature_vector.to_dict(),
        "model_version": self.config.model_version
      }

      # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
      async with self.session.post(predict_url, json=request_data) as response:
        if response.status == 200:
          result = await response.json()
          self.ml_success_count += 1
          return result
        else:
          error_text = await response.text()
          logger.error(
            f"ML Server –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π {response.status}: "
            f"{error_text[:200]}"
          )
          self.ml_error_count += 1
          return None

    except asyncio.TimeoutError:
      logger.warning(
        f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ ML Server –¥–ª—è {symbol}"
      )
      self.ml_error_count += 1
      # –ü–æ–º–µ—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π
      self.ml_server_available = False
      return None

    except Exception as e:
      logger.error(
        f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ML Server: {str(e)[:200]}"
      )
      self.ml_error_count += 1
      # –ü–æ–º–µ—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π
      self.ml_server_available = False
      return None

  async def validate(
      self,
      signal: TradingSignal,
      feature_vector: FeatureVector
  ) -> ValidationResult:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ ML –º–æ–¥–µ–ª—å.

    Args:
        signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        feature_vector: –í–µ–∫—Ç–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è ML

    Returns:
        ValidationResult —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º
    """
    self.total_validations += 1
    start_time = datetime.now()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cache_key = self._get_cache_key(signal.symbol, feature_vector)
    cached_prediction = self._get_cached_prediction(cache_key)

    if cached_prediction:
      ml_prediction = cached_prediction
    else:
      # –ó–∞–ø—Ä–æ—Å –∫ ML —Å–µ—Ä–≤–µ—Ä—É
      ml_prediction = await self._request_ml_prediction(
        signal.symbol,
        feature_vector
      )

      # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if ml_prediction:
        self._cache_prediction(cache_key, ml_prediction)

    inference_time = (datetime.now() - start_time).total_seconds() * 1000

    # Fallback –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ML
    if ml_prediction is None:
      self.fallback_count += 1

      if self.config.fallback_to_strategy:
        logger.info(
          f"‚úì –°–∏–≥–Ω–∞–ª –í–ê–õ–ò–î–ò–†–û–í–ê–ù {signal.symbol}: {safe_enum_value(signal.signal_type)}, "
          f"confidence={signal.confidence:.4f}, "
          f"agreement=False, "
          f"reason=ML unavailable, using strategy signal (fallback)"
        )

        return ValidationResult(
          original_signal=signal,
          ml_direction=None,
          ml_confidence=None,
          ml_expected_return=None,
          validated=True,
          final_signal_type=signal.signal_type,
          final_confidence=signal.confidence * self.config.strategy_weight,
          agreement=False,
          reason="ML unavailable, using strategy signal (fallback)",
          inference_time_ms=inference_time,
          used_fallback=True
        )
      else:
        logger.warning(
          f"‚úó –°–∏–≥–Ω–∞–ª –û–¢–ö–õ–û–ù–ï–ù {signal.symbol}: ML –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, "
          f"fallback –æ—Ç–∫–ª—é—á–µ–Ω"
        )

        return ValidationResult(
          original_signal=signal,
          ml_direction=None,
          ml_confidence=None,
          ml_expected_return=None,
          validated=False,
          final_signal_type=signal.signal_type,
          final_confidence=0.0,
          agreement=False,
          reason="ML unavailable, fallback disabled",
          inference_time_ms=inference_time,
          used_fallback=False
        )

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    ml_direction = ml_prediction.get("direction")
    ml_confidence = ml_prediction.get("confidence", 0.0)
    ml_expected_return = ml_prediction.get("expected_return", 0.0)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ confidence
    if ml_confidence < self.config.min_ml_confidence:
      logger.info(
        f"‚úó ML confidence —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π –¥–ª—è {signal.symbol}: "
        f"{ml_confidence:.4f} < {self.config.min_ml_confidence}"
      )

      return ValidationResult(
        original_signal=signal,
        ml_direction=ml_direction,
        ml_confidence=ml_confidence,
        ml_expected_return=ml_expected_return,
        validated=False,
        final_signal_type=signal.signal_type,
        final_confidence=0.0,
        agreement=False,
        reason=f"ML confidence too low: {ml_confidence:.4f}",
        inference_time_ms=inference_time,
        used_fallback=False
      )

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ML direction –≤ SignalType
    ml_signal_type = self.direction_to_signal_type.get(ml_direction)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –º–µ–∂–¥—É ML –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
    agreement = (ml_signal_type == signal.signal_type)

    if agreement:
      self.agreement_count += 1

      # ML –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–≥–ª–∞—Å–Ω—ã - —É—Å–∏–ª–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
      final_confidence = min(
        signal.confidence * self.config.confidence_boost_factor,
        1.0
      )

      logger.info(
        f"‚úì –°–∏–≥–Ω–∞–ª –í–ê–õ–ò–î–ò–†–û–í–ê–ù {signal.symbol}: {signal.signal_type.value}, "
        f"confidence={final_confidence:.4f}, "
        f"agreement=True, "
        f"reason=ML and strategy agree"
      )

      return ValidationResult(
        original_signal=signal,
        ml_direction=ml_direction,
        ml_confidence=ml_confidence,
        ml_expected_return=ml_expected_return,
        validated=True,
        final_signal_type=signal.signal_type,
        final_confidence=final_confidence,
        agreement=True,
        reason="ML and strategy agree, signal boosted",
        inference_time_ms=inference_time,
        used_fallback=False
      )
    else:
      self.disagreement_count += 1

      # ML –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã - –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ

      # –ï—Å–ª–∏ ML –≥–æ–≤–æ—Ä–∏—Ç HOLD - –æ—Ç–∫–ª–æ–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª
      if ml_direction == "HOLD":
        logger.info(
          f"‚úó –°–∏–≥–Ω–∞–ª –û–¢–ö–õ–û–ù–ï–ù {signal.symbol}: ML –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç HOLD"
        )

        return ValidationResult(
          original_signal=signal,
          ml_direction=ml_direction,
          ml_confidence=ml_confidence,
          ml_expected_return=ml_expected_return,
          validated=False,
          final_signal_type=signal.signal_type,
          final_confidence=0.0,
          agreement=False,
          reason="ML suggests HOLD, rejecting signal",
          inference_time_ms=inference_time,
          used_fallback=False
        )

      # ML –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - —à—Ç—Ä–∞—Ñ—É–µ–º confidence
      final_confidence = signal.confidence * self.config.confidence_penalty_factor

      logger.warning(
        f"‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –û–°–õ–ê–ë–õ–ï–ù {signal.symbol}: "
        f"ML={ml_direction}, Strategy={signal.signal_type.value}, "
        f"confidence={final_confidence:.4f}"
      )

      return ValidationResult(
        original_signal=signal,
        ml_direction=ml_direction,
        ml_confidence=ml_confidence,
        ml_expected_return=ml_expected_return,
        validated=True,
        final_signal_type=signal.signal_type,
        final_confidence=final_confidence,
        agreement=False,
        reason="ML disagrees, confidence penalized",
        inference_time_ms=inference_time,
        used_fallback=False
      )

  def get_statistics(self) -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞."""
    return {
      "total_validations": self.total_validations,
      "ml_success_count": self.ml_success_count,
      "ml_error_count": self.ml_error_count,
      "fallback_count": self.fallback_count,
      "agreement_count": self.agreement_count,
      "disagreement_count": self.disagreement_count,
      "ml_server_available": self.ml_server_available,
      "health_check_failures": self.health_check_failures,
      "last_health_check": self.last_health_check,
      "success_rate": (
        self.ml_success_count / self.total_validations * 100
        if self.total_validations > 0 else 0.0
      ),
      "agreement_rate": (
        self.agreement_count / self.total_validations * 100
        if self.total_validations > 0 else 0.0
      ),
      "fallback_rate": (
        self.fallback_count / self.total_validations * 100
        if self.total_validations > 0 else 0.0
      )
    }