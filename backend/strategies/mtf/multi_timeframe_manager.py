"""
Multi-Timeframe Manager - –≥–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä MTF –∞–Ω–∞–ª–∏–∑–∞.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
- –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö MTF –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- End-to-end MTF analysis pipeline
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö MTF —Å–∏–≥–Ω–∞–ª–æ–≤
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

Pipeline:
    1. TimeframeCoordinator: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –≤—Å–µ—Ö TF
    2. TimeframeAnalyzer: –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ TF –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
    3. TimeframeAligner: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
    4. TimeframeSignalSynthesizer: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞

–ü—É—Ç—å: backend/strategies/mtf/multi_timeframe_manager.py
"""

from typing import Dict, List, Optional
from dataclasses import dataclass, field
from datetime import datetime

from core.logger import get_logger
from models.orderbook import OrderBookSnapshot, OrderBookMetrics
from strategies.strategy_manager import ExtendedStrategyManager

from .timeframe_coordinator import (
  TimeframeCoordinator,
  Timeframe,
  MultiTimeframeConfig
)
from .timeframe_analyzer import (
  TimeframeAnalyzer,
  TimeframeAnalysisResult
)
from .timeframe_aligner import (
  TimeframeAligner,
  TimeframeAlignment,
  AlignmentConfig
)
from .timeframe_signal_synthesizer import (
  TimeframeSignalSynthesizer,
  MultiTimeframeSignal,
  SynthesizerConfig,
  SynthesisMode
)

logger = get_logger(__name__)


@dataclass
class MTFManagerConfig:
  """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Multi-Timeframe Manager."""
  # –í–∫–ª—é—á–∏—Ç—å MTF –∞–Ω–∞–ª–∏–∑
  enabled: bool = True

  # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  coordinator_config: MultiTimeframeConfig = field(default_factory=MultiTimeframeConfig)
  aligner_config: AlignmentConfig = field(default_factory=AlignmentConfig)
  synthesizer_config: SynthesizerConfig = field(default_factory=SynthesizerConfig)

  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  auto_update_enabled: bool = True
  update_on_each_analysis: bool = False  # –û–±–Ω–æ–≤–ª—è—Ç—å –ª–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ

  # Fallback behavior
  fallback_to_single_tf: bool = True  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å single TF –µ—Å–ª–∏ MTF –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  fallback_timeframe: Timeframe = Timeframe.M1

  # Logging
  verbose_logging: bool = False


class MultiTimeframeManager:
  """
  –ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä Multi-Timeframe –∞–Ω–∞–ª–∏–∑–∞.

  –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö MTF –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç
  –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è MTF —Å–∏–≥–Ω–∞–ª–æ–≤.
  """

  def __init__(
      self,
      strategy_manager: ExtendedStrategyManager,
      config: MTFManagerConfig
  ):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MTF Manager.

    Args:
        strategy_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ –∫–∞–∂–¥–æ–º TF
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MTF Manager
    """
    self.config = config
    self.strategy_manager = strategy_manager

    # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã MTF
    self.coordinator = TimeframeCoordinator(config.coordinator_config)

    self.analyzer = TimeframeAnalyzer(
      strategy_manager=strategy_manager
    )

    self.aligner = TimeframeAligner(config.aligner_config)

    self.synthesizer = TimeframeSignalSynthesizer(config.synthesizer_config)

    # –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    self._last_tf_results: Dict[str, Dict[Timeframe, TimeframeAnalysisResult]] = {}
    self._last_alignment: Dict[str, TimeframeAlignment] = {}
    self._last_mtf_signal: Dict[str, MultiTimeframeSignal] = {}

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    self.total_analyses = 0
    self.mtf_signals_generated = 0
    self.fallback_used = 0

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    self._initialized_symbols = set()

    logger.info(
      f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω MultiTimeframeManager: "
      f"enabled={config.enabled}, "
      f"timeframes={[tf.value for tf in config.coordinator_config.active_timeframes]}, "
      f"synthesis_mode={config.synthesizer_config.mode.value}"
    )

  async def initialize_symbol(self, symbol: str) -> bool:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª –¥–ª—è MTF –∞–Ω–∞–ª–∏–∑–∞.

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞

    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
    """
    if not self.config.enabled:
      logger.warning("MTF –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
      return False

    try:
      # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ (–∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
      success = await self.coordinator.initialize_symbol(symbol)

      if success:
        self._initialized_symbols.add(symbol)
        logger.info(f"‚úÖ –°–∏–º–≤–æ–ª {symbol} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è MTF –∞–Ω–∞–ª–∏–∑–∞")
      else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {symbol} –¥–ª—è MTF")

      return success

    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MTF –¥–ª—è {symbol}: {e}", exc_info=True)
      return False

  async def analyze_symbol(
      self,
      symbol: str,
      orderbook: Optional[OrderBookSnapshot] = None,
      metrics: Optional[OrderBookMetrics] = None
  ) -> Optional[MultiTimeframeSignal]:
    """
    –ü–æ–ª–Ω—ã–π MTF –∞–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞.

    Pipeline:
    1. –û–±–Ω–æ–≤–∏—Ç—å —Å–≤–µ—á–∏ –≤—Å–µ—Ö TF (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    2. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π TF –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
    3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å alignment –º–µ–∂–¥—É TF
    4. –°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        orderbook: –°–Ω–∏–º–æ–∫ —Å—Ç–∞–∫–∞–Ω–∞ (–¥–ª—è –≥–∏–±—Ä–∏–¥–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π)
        metrics: –ú–µ—Ç—Ä–∏–∫–∏ —Å—Ç–∞–∫–∞–Ω–∞

    Returns:
        MultiTimeframeSignal –∏–ª–∏ None
    """
    if not self.config.enabled:
      logger.debug("MTF –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω")
      return None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if symbol not in self._initialized_symbols:
      logger.warning(f"{symbol} –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è MTF, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
      success = await self.initialize_symbol(symbol)
      if not success:
        return self._fallback_analysis(symbol, orderbook, metrics)

    self.total_analyses += 1

    try:
      # –®–∞–≥ 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      if self.config.update_on_each_analysis:
        await self.coordinator.update_all_timeframes(symbol)

      # –®–∞–≥ 2: –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–≤–µ—á–∏ –≤—Å–µ—Ö TF
      all_candles = self.coordinator.get_all_timeframes_candles(symbol)

      if not all_candles:
        logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
        return self._fallback_analysis(symbol, orderbook, metrics)

      # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É (–∏–∑ —Å–∞–º–æ–≥–æ —Å–≤–µ–∂–µ–≥–æ TF)
      current_price = None
      for tf in [Timeframe.M1, Timeframe.M5, Timeframe.M15, Timeframe.H1]:
        if tf in all_candles and all_candles[tf]:
          current_price = all_candles[tf][-1].close
          break

      if not current_price:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è {symbol}")
        return self._fallback_analysis(symbol, orderbook, metrics)

      # –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π TF
      tf_results: Dict[Timeframe, TimeframeAnalysisResult] = {}

      for timeframe, candles in all_candles.items():
        if not candles:
          logger.warning(f"–ù–µ—Ç —Å–≤–µ—á–µ–π –¥–ª—è {symbol} {timeframe.value}")
          continue

        result = await self.analyzer.analyze_timeframe(
          symbol=symbol,
          timeframe=timeframe,
          candles=candles,
          current_price=current_price,
          orderbook=orderbook,
          metrics=metrics
        )

        tf_results[timeframe] = result

        if self.config.verbose_logging:
          logger.debug(
            f"[{timeframe.value}] {symbol}: "
            f"regime={result.regime.market_regime.value}, "
            f"signal={result.timeframe_signal.signal_type.value if result.timeframe_signal else 'NONE'}"
          )

      if not tf_results:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω TF –¥–ª—è {symbol}")
        return self._fallback_analysis(symbol, orderbook, metrics)

      # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      self._last_tf_results[symbol] = tf_results

      # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ alignment
      alignment = self.aligner.check_alignment(tf_results, current_price)
      self._last_alignment[symbol] = alignment

      if self.config.verbose_logging:
        logger.debug(
          f"Alignment check: type={alignment.alignment_type.value}, "
          f"score={alignment.alignment_score:.2f}, "
          f"recommended={alignment.recommended_action.value}"
        )

      # –®–∞–≥ 5: –°–∏–Ω—Ç–µ–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
      mtf_signal = self.synthesizer.synthesize_signal(
        tf_results=tf_results,
        alignment=alignment,
        symbol=symbol,
        current_price=current_price
      )

      if mtf_signal:
        self.mtf_signals_generated += 1
        self._last_mtf_signal[symbol] = mtf_signal

        logger.info(
          f"üéØ MTF SIGNAL [{symbol}]: {mtf_signal.signal.signal_type.value}, "
          f"confidence={mtf_signal.signal.confidence:.2f}, "
          f"quality={mtf_signal.signal_quality:.2f}, "
          f"mode={mtf_signal.synthesis_mode.value}, "
          f"alignment={mtf_signal.alignment_score:.2f}"
        )
      else:
        logger.debug(f"–ù–µ—Ç MTF —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}")

      return mtf_signal

    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ MTF –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}", exc_info=True)
      return self._fallback_analysis(symbol, orderbook, metrics)

  async def update_timeframes(self, symbol: str) -> bool:
    """
    –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª–∞.

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞

    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
    """
    try:
      results = await self.coordinator.update_all_timeframes(symbol)

      success_count = sum(1 for success in results.values() if success)
      total_count = len(results)

      logger.debug(
        f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {success_count}/{total_count} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è {symbol}"
      )

      return success_count > 0

    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ {symbol}: {e}")
      return False

  def get_last_tf_results(self, symbol: str) -> Optional[Dict[Timeframe, TimeframeAnalysisResult]]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤."""
    return self._last_tf_results.get(symbol)

  def get_last_alignment(self, symbol: str) -> Optional[TimeframeAlignment]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π alignment check."""
    return self._last_alignment.get(symbol)

  def get_last_mtf_signal(self, symbol: str) -> Optional[MultiTimeframeSignal]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π MTF —Å–∏–≥–Ω–∞–ª."""
    return self._last_mtf_signal.get(symbol)

  def validate_data_consistency(self, symbol: str) -> Dict:
    """
    –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏.

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞

    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    """
    return self.coordinator.validate_data_consistency(symbol)

  def _fallback_analysis(
      self,
      symbol: str,
      orderbook: Optional[OrderBookSnapshot],
      metrics: Optional[OrderBookMetrics]
  ) -> Optional[MultiTimeframeSignal]:
    """
    Fallback –∫ single-timeframe –∞–Ω–∞–ª–∏–∑—É –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å MTF.

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        orderbook: –°–Ω–∏–º–æ–∫ —Å—Ç–∞–∫–∞–Ω–∞
        metrics: –ú–µ—Ç—Ä–∏–∫–∏

    Returns:
        MultiTimeframeSignal (—ç–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π) –∏–ª–∏ None
    """
    if not self.config.fallback_to_single_tf:
      logger.debug("Fallback –∫ single TF –æ—Ç–∫–ª—é—á–µ–Ω")
      return None

    self.fallback_used += 1

    logger.warning(
      f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback –∫ single TF –¥–ª—è {symbol}, "
      f"timeframe={self.config.fallback_timeframe.value}"
    )

    try:
      # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ fallback TF
      candles = self.coordinator.get_candles(
        symbol,
        self.config.fallback_timeframe
      )

      if not candles:
        logger.error(f"–ù–µ—Ç —Å–≤–µ—á–µ–π –¥–ª—è fallback TF {self.config.fallback_timeframe.value}")
        return None

      current_price = candles[-1].close

      # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ single TF
      consensus = self.strategy_manager.analyze_with_consensus(
        symbol=symbol,
        candles=candles,
        current_price=current_price,
        orderbook=orderbook,
        metrics=metrics
      )

      if not consensus or not consensus.final_signal:
        return None

      # –≠–º—É–ª–∏—Ä—É–µ–º MTF —Å–∏–≥–Ω–∞–ª
      from .timeframe_aligner import AlignmentType, DivergenceType

      mtf_signal = MultiTimeframeSignal(
        signal=consensus.final_signal,
        synthesis_mode=SynthesisMode.TOP_DOWN,  # Fallback mode
        timeframes_analyzed=1,
        timeframes_agreeing=1,
        alignment_score=consensus.consensus_confidence,
        alignment_type=AlignmentType.NEUTRAL,
        signal_quality=consensus.consensus_confidence,
        reliability_score=0.5,
        recommended_position_size_multiplier=0.8,  # –ü–æ–Ω–∏–∂–µ–Ω–Ω—ã–π –¥–ª—è fallback
        warnings=[f"Fallback to single TF: {self.config.fallback_timeframe.value}"],
        risk_level="HIGH",
        timestamp=int(datetime.now().timestamp() * 1000)
      )

      return mtf_signal

    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ fallback –∞–Ω–∞–ª–∏–∑–∞: {e}", exc_info=True)
      return None

  def get_statistics(self) -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É MTF Manager."""
    coordinator_stats = self.coordinator.get_statistics()
    analyzer_stats = self.analyzer.get_statistics()
    aligner_stats = self.aligner.get_statistics()
    synthesizer_stats = self.synthesizer.get_statistics()

    return {
      'manager': {
        'enabled': self.config.enabled,
        'initialized_symbols': len(self._initialized_symbols),
        'total_analyses': self.total_analyses,
        'mtf_signals_generated': self.mtf_signals_generated,
        'signal_generation_rate': (
          self.mtf_signals_generated / self.total_analyses
          if self.total_analyses > 0 else 0.0
        ),
        'fallback_used': self.fallback_used,
        'fallback_rate': (
          self.fallback_used / self.total_analyses
          if self.total_analyses > 0 else 0.0
        )
      },
      'coordinator': coordinator_stats,
      'analyzer': analyzer_stats,
      'aligner': aligner_stats,
      'synthesizer': synthesizer_stats
    }

  def get_health_status(self) -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å health status MTF —Å–∏—Å—Ç–µ–º—ã."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    components_healthy = {
      'coordinator': self.coordinator is not None,
      'analyzer': self.analyzer is not None,
      'aligner': self.aligner is not None,
      'synthesizer': self.synthesizer is not None
    }

    all_healthy = all(components_healthy.values())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    initialized_count = len(self._initialized_symbols)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    data_issues = []
    for symbol in list(self._initialized_symbols)[:3]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3
      validation = self.coordinator.validate_data_consistency(symbol)
      if not validation.get('valid', True):
        data_issues.extend(validation.get('issues', []))

    status = {
      'healthy': all_healthy and len(data_issues) == 0,
      'components': components_healthy,
      'initialized_symbols': initialized_count,
      'data_issues': data_issues[:5],  # –ü–µ—Ä–≤—ã–µ 5 –ø—Ä–æ–±–ª–µ–º
      'enabled': self.config.enabled
    }

    return status

  def reset_symbol_cache(self, symbol: str):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –¥–ª—è —Å–∏–º–≤–æ–ª–∞."""
    if symbol in self._last_tf_results:
      del self._last_tf_results[symbol]

    if symbol in self._last_alignment:
      del self._last_alignment[symbol]

    if symbol in self._last_mtf_signal:
      del self._last_mtf_signal[symbol]

    logger.debug(f"–ö—ç—à –¥–ª—è {symbol} –æ—á–∏—â–µ–Ω")

  def reset_all_cache(self):
    """–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à."""
    self._last_tf_results.clear()
    self._last_alignment.clear()
    self._last_mtf_signal.clear()

    logger.info("–í–µ—Å—å –∫—ç—à MTF –æ—á–∏—â–µ–Ω")