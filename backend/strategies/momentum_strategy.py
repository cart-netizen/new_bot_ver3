"""
Momentum Strategy - —Ç–æ—Ä–≥–æ–≤–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞.

–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è:
- Rate of Change (ROC) –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è momentum
- RSI –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏
- Volume confirmation
- Adaptive position sizing –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã momentum
- Dynamic trailing stop

–ü—É—Ç—å: backend/strategies/momentum_strategy.py
"""

from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
import numpy as np
from datetime import datetime

from core.logger import get_logger
from models.signal import TradingSignal, SignalType, SignalStrength, SignalSource
from strategy.candle_manager import Candle

logger = get_logger(__name__)


@dataclass
class MomentumConfig:
  """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Momentum —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
  # ROC –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  roc_period: int = 14  # –ü–µ—Ä–∏–æ–¥ –¥–ª—è Rate of Change
  roc_threshold_long: float = 2.0  # % –¥–ª—è long —Å–∏–≥–Ω–∞–ª–∞
  roc_threshold_short: float = -2.0  # % –¥–ª—è short —Å–∏–≥–Ω–∞–ª–∞

  # RSI —Ñ–∏–ª—å—Ç—Ä
  rsi_period: int = 14
  rsi_overbought: float = 70.0
  rsi_oversold: float = 30.0

  # Volume confirmation
  volume_ma_period: int = 20
  volume_threshold: float = 1.2  # 1.2x —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º

  # Momentum strength
  momentum_ma_short: int = 5
  momentum_ma_long: int = 20

  # Position sizing
  base_position_size: float = 1.0
  max_position_multiplier: float = 2.0  # –ú–∞–∫—Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏

  # Risk management
  stop_loss_pct: float = 2.0  # 2% stop loss
  take_profit_pct: float = 6.0  # 3:1 risk/reward
  trailing_stop_activation_pct: float = 3.0  # –ê–∫—Ç–∏–≤–∞—Ü–∏—è trailing –ø–æ—Å–ª–µ 3%
  trailing_stop_distance_pct: float = 1.5  # –î–∏—Å—Ç–∞–Ω—Ü–∏—è trailing 1.5%


class MomentumIndicators:
  """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è Momentum —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""

  @staticmethod
  def calculate_roc(prices: np.ndarray, period: int) -> np.ndarray:
    """
    Rate of Change - —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã.

    ROC = ((Price - Price[period]) / Price[period]) * 100
    """
    if len(prices) < period + 1:
      return np.array([])

    roc = np.zeros(len(prices))
    for i in range(period, len(prices)):
      roc[i] = ((prices[i] - prices[i - period]) / prices[i - period]) * 100

    return roc

  @staticmethod
  def calculate_rsi(prices: np.ndarray, period: int = 14) -> np.ndarray:
    """
    Relative Strength Index.

    RSI = 100 - (100 / (1 + RS))
    –≥–¥–µ RS = Average Gain / Average Loss
    """
    if len(prices) < period + 1:
      return np.array([])

    deltas = np.diff(prices)

    gains = np.where(deltas > 0, deltas, 0)
    losses = np.where(deltas < 0, -deltas, 0)

    # –ü–µ—Ä–≤–æ–µ —Å—Ä–µ–¥–Ω–µ–µ - –ø—Ä–æ—Å—Ç–æ–µ
    avg_gain = np.mean(gains[:period])
    avg_loss = np.mean(losses[:period])

    rsi = np.zeros(len(prices))

    for i in range(period, len(deltas)):
      avg_gain = (avg_gain * (period - 1) + gains[i]) / period
      avg_loss = (avg_loss * (period - 1) + losses[i]) / period

      if avg_loss == 0:
        rsi[i + 1] = 100
      else:
        rs = avg_gain / avg_loss
        rsi[i + 1] = 100 - (100 / (1 + rs))

    return rsi

  @staticmethod
  def calculate_momentum_strength(
      roc: float,
      rsi: float,
      volume_ratio: float,
      config: MomentumConfig
  ) -> float:
    """
    –í—ã—á–∏—Å–ª–∏—Ç—å —Å–∏–ª—É momentum (0-1).

    –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
    - ROC magnitude
    - RSI –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    - Volume confirmation
    """
    strength = 0.0

    # ROC component (40% –≤–µ—Å–∞)
    roc_abs = abs(roc)
    if roc_abs >= abs(config.roc_threshold_long):
      roc_component = min(roc_abs / 5.0, 1.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ 5%
      strength += roc_component * 0.4

    # RSI component (30% –≤–µ—Å–∞)
    # –î–ª—è long: RSI –≤ –∑–æ–Ω–µ 50-70 = —Å–∏–ª—å–Ω–æ
    # –î–ª—è short: RSI –≤ –∑–æ–Ω–µ 30-50 = —Å–∏–ª—å–Ω–æ
    if roc > 0:  # Long momentum
      if 50 <= rsi <= 70:
        rsi_component = (rsi - 50) / 20
        strength += rsi_component * 0.3
    else:  # Short momentum
      if 30 <= rsi <= 50:
        rsi_component = (50 - rsi) / 20
        strength += rsi_component * 0.3

    # Volume component (30% –≤–µ—Å–∞)
    if volume_ratio >= config.volume_threshold:
      volume_component = min((volume_ratio - 1.0) / 1.0, 1.0)
      strength += volume_component * 0.3

    return min(strength, 1.0)


class MomentumStrategy:
  """
  Momentum Trading Strategy.

  –õ–æ–≥–∏–∫–∞:
  1. –í—ã—á–∏—Å–ª—è–µ–º ROC –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞
  2. –§–∏–ª—å—Ç—Ä—É–µ–º —á–µ—Ä–µ–∑ RSI (–∏–∑–±–µ–≥–∞–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–æ–Ω)
  3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —á–µ—Ä–µ–∑ volume
  4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å adaptive position sizing
  5. –£–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–µ–π —á–µ—Ä–µ–∑ trailing stop
  """

  def __init__(self, config: MomentumConfig):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.

    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    """
    self.config = config
    self.indicators = MomentumIndicators()

    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    self.active_signals: Dict[str, TradingSignal] = {}
    self.momentum_history: Dict[str, List[float]] = {}

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    self.signals_generated = 0
    self.strong_signals = 0

    logger.info(
      f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ MomentumStrategy: "
      f"roc_period={config.roc_period}, "
      f"rsi_period={config.rsi_period}"
    )

  def analyze(
      self,
      symbol: str,
      candles: List[Candle],
      current_price: float
  ) -> Optional[TradingSignal]:
    """
    –ê–Ω–∞–ª–∏–∑ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞.

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        candles: –ò—Å—Ç–æ—Ä–∏—è —Å–≤–µ—á–µ–π
        current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞

    Returns:
        TradingSignal –∏–ª–∏ None
    """
    if len(candles) < max(
        self.config.roc_period,
        self.config.rsi_period,
        self.config.volume_ma_period
    ) + 1:
      logger.debug(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
      return None

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    closes = np.array([c.close for c in candles])
    volumes = np.array([c.volume for c in candles])

    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    roc = self.indicators.calculate_roc(closes, self.config.roc_period)
    rsi = self.indicators.calculate_rsi(closes, self.config.rsi_period)

    if len(roc) == 0 or len(rsi) == 0:
      return None

    # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    current_roc = float(roc[-1])
    current_rsi = float(rsi[-1])

    # Volume analysis
    volume_ma = np.mean(volumes[-self.config.volume_ma_period:])
    current_volume = volumes[-1]
    volume_ratio = current_volume / volume_ma if volume_ma > 0 else 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
    signal_type = None
    reason_parts = []

    # LONG —É—Å–ª–æ–≤–∏—è
    if (
        current_roc >= self.config.roc_threshold_long
        and current_rsi < self.config.rsi_overbought
        and volume_ratio >= self.config.volume_threshold
    ):
      signal_type = SignalType.BUY
      reason_parts.append(f"Strong upward momentum: ROC={current_roc:.2f}%")
      reason_parts.append(f"RSI={current_rsi:.1f} (not overbought)")
      reason_parts.append(f"Volume {volume_ratio:.2f}x average")

    # SHORT —É—Å–ª–æ–≤–∏—è
    elif (
        current_roc <= self.config.roc_threshold_short
        and current_rsi > self.config.rsi_oversold
        and volume_ratio >= self.config.volume_threshold
    ):
      signal_type = SignalType.SELL
      reason_parts.append(f"Strong downward momentum: ROC={current_roc:.2f}%")
      reason_parts.append(f"RSI={current_rsi:.1f} (not oversold)")
      reason_parts.append(f"Volume {volume_ratio:.2f}x average")

    if signal_type is None:
      return None

    # –í—ã—á–∏—Å–ª—è–µ–º —Å–∏–ª—É momentum
    momentum_strength = self.indicators.calculate_momentum_strength(
      current_roc,
      current_rsi,
      volume_ratio,
      self.config
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é momentum
    if symbol not in self.momentum_history:
      self.momentum_history[symbol] = []
    self.momentum_history[symbol].append(momentum_strength)

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if len(self.momentum_history[symbol]) > 100:
      self.momentum_history[symbol] = self.momentum_history[symbol][-100:]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
    if momentum_strength > 0.7:
      signal_strength = SignalStrength.STRONG
      self.strong_signals += 1
    elif momentum_strength > 0.5:
      signal_strength = SignalStrength.MEDIUM
    else:
      signal_strength = SignalStrength.WEAK

    # Adaptive position sizing
    position_multiplier = 1.0 + (
        momentum_strength * (self.config.max_position_multiplier - 1.0)
    )

    # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª
    signal = TradingSignal(
      symbol=symbol,
      signal_type=signal_type,
      source=SignalSource.STRATEGY,
      strength=signal_strength,
      price=current_price,
      confidence=momentum_strength,
      timestamp=int(datetime.now().timestamp() * 1000),
      reason=" | ".join(reason_parts),
      metadata={
        'strategy': 'momentum',
        'roc': current_roc,
        'rsi': current_rsi,
        'volume_ratio': volume_ratio,
        'momentum_strength': momentum_strength,
        'position_multiplier': position_multiplier,
        'stop_loss_pct': self.config.stop_loss_pct,
        'take_profit_pct': self.config.take_profit_pct,
        'trailing_stop_activation': self.config.trailing_stop_activation_pct,
        'trailing_stop_distance': self.config.trailing_stop_distance_pct
      }
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª
    self.active_signals[symbol] = signal
    self.signals_generated += 1

    logger.info(
      f"üéØ MOMENTUM SIGNAL [{symbol}]: {signal_type.value}, "
      f"strength={momentum_strength:.2f}, "
      f"ROC={current_roc:.2f}%, RSI={current_rsi:.1f}"
    )

    return signal

  def should_exit(
      self,
      symbol: str,
      candles: List[Candle],
      entry_price: float,
      position_side: str  # "long" –∏–ª–∏ "short"
  ) -> Tuple[bool, Optional[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏.

    Returns:
        (should_exit, reason)
    """
    if len(candles) < 2:
      return False, None

    current_price = candles[-1].close

    # –í—ã—á–∏—Å–ª—è–µ–º P&L
    if position_side == "long":
      pnl_pct = ((current_price - entry_price) / entry_price) * 100
    else:  # short
      pnl_pct = ((entry_price - current_price) / entry_price) * 100

    # Stop Loss
    if pnl_pct <= -self.config.stop_loss_pct:
      return True, f"Stop Loss hit: {pnl_pct:.2f}%"

    # Take Profit
    if pnl_pct >= self.config.take_profit_pct:
      return True, f"Take Profit hit: {pnl_pct:.2f}%"

    # Trailing Stop (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω)
    if pnl_pct >= self.config.trailing_stop_activation_pct:
      # –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π P&L –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
      recent_closes = np.array([c.close for c in candles[-10:]])

      if position_side == "long":
        max_price = np.max(recent_closes)
        max_pnl = ((max_price - entry_price) / entry_price) * 100
        drawdown = max_pnl - pnl_pct

        if drawdown >= self.config.trailing_stop_distance_pct:
          return True, f"Trailing Stop: drawdown={drawdown:.2f}%"
      else:  # short
        min_price = np.min(recent_closes)
        max_pnl = ((entry_price - min_price) / entry_price) * 100
        drawdown = max_pnl - pnl_pct

        if drawdown >= self.config.trailing_stop_distance_pct:
          return True, f"Trailing Stop: drawdown={drawdown:.2f}%"

    # Momentum reversal
    if len(candles) >= self.config.roc_period + 1:
      closes = np.array([c.close for c in candles])
      roc = self.indicators.calculate_roc(closes, self.config.roc_period)

      if len(roc) > 0:
        current_roc = roc[-1]

        # –î–ª—è long –ø–æ–∑–∏—Ü–∏–∏ - –≤—ã—Ö–æ–¥–∏–º –µ—Å–ª–∏ momentum –æ—Å–ª–∞–±
        if position_side == "long" and current_roc < 0:
          return True, f"Momentum reversal: ROC={current_roc:.2f}%"

        # –î–ª—è short –ø–æ–∑–∏—Ü–∏–∏ - –≤—ã—Ö–æ–¥–∏–º –µ—Å–ª–∏ momentum —Ä–∞–∑–≤–µ—Ä–Ω—É–ª—Å—è –≤–≤–µ—Ä—Ö
        if position_side == "short" and current_roc > 0:
          return True, f"Momentum reversal: ROC={current_roc:.2f}%"

    return False, None

  def get_statistics(self) -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
    strong_signal_rate = (
      self.strong_signals / self.signals_generated
      if self.signals_generated > 0
      else 0.0
    )

    # –°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ momentum
    all_momentum = []
    for history in self.momentum_history.values():
      all_momentum.extend(history)

    avg_momentum = np.mean(all_momentum) if all_momentum else 0.0

    return {
      'strategy': 'momentum',
      'signals_generated': self.signals_generated,
      'strong_signals': self.strong_signals,
      'strong_signal_rate': strong_signal_rate,
      'avg_momentum_strength': avg_momentum,
      'active_signals': len(self.active_signals),
      'symbols_tracked': len(self.momentum_history)
    }


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
  from strategy.candle_manager import Candle
  import random

  config = MomentumConfig(
    roc_period=14,
    roc_threshold_long=2.0,
    rsi_period=14,
    volume_ma_period=20
  )

  strategy = MomentumStrategy(config)

  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–≤–µ—á–∏ —Å —Ç—Ä–µ–Ω–¥–æ–º
  base_price = 50000.0
  candles = []

  for i in range(100):
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
    trend = i * 10
    noise = random.uniform(-100, 100)
    price = base_price + trend + noise

    candle = Candle(
      timestamp=int(datetime.now().timestamp() * 1000) + i * 60000,
      open=price - 5,
      high=price + 10,
      low=price - 10,
      close=price,
      volume=1000 + random.uniform(-200, 200)
    )
    candles.append(candle)

  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
  signal = strategy.analyze("BTCUSDT", candles, candles[-1].close)

  if signal:
    print(f"Signal generated: {signal.signal_type.value}")
    print(f"Confidence: {signal.confidence:.2f}")
    print(f"Reason: {signal.reason}")
    print(f"Metadata: {signal.metadata}")
  else:
    print("No signal generated")

  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  stats = strategy.get_statistics()
  print(f"\nStatistics:")
  for key, value in stats.items():
    print(f"  {key}: {value}")