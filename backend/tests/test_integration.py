"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–≥–æ —Ñ–ª–æ—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞.
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç: –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å, –ø–æ–¥–ø–∏—Å—å, —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ, –æ—Ç–º–µ–Ω—É.
"""
import asyncio
import sys
from pathlib import Path

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
backend_path = Path(__file__).parent / "backend"
sys.path.insert(0, str(backend_path))
if sys.platform == 'win32':
  asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

from backend.exchange.rest_client import rest_client
from backend.domain.services.idempotency_service import IdempotencyService
from backend.infrastructure.repositories.order_repository import order_repository
from backend.database.connection import db_manager
from backend.database.models import OrderSide, OrderType, OrderStatus


async def test_full_order_flow():
  """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ñ–ª–æ—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""

  idempotency_service = IdempotencyService()

  try:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    print("=" * 60)
    print("–ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –§–õ–û–£ –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –û–†–î–ï–†–ê")
    print("=" * 60)

    await rest_client.initialize()
    await db_manager.initialize()

    # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è client_order_id
    print("\n[1/7] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è client_order_id...")
    client_order_id = idempotency_service.generate_client_order_id(
      symbol="BTCUSDT",
      side="Buy",
      quantity=0.001,
      price=30000.0
    )
    print(f"‚úì Client Order ID: {client_order_id}")

    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –≤ –ë–î
    print("\n[2/7] –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –≤ –ë–î...")
    order = await order_repository.create(
      client_order_id=client_order_id,
      symbol="BTCUSDT",
      side=OrderSide.BUY,
      order_type=OrderType.LIMIT,
      quantity=0.001,
      price=30000.0,
      reason="Integration test"
    )
    print(f"‚úì –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω –≤ –ë–î: status={order.status.value}")

    # 3. –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –±–∏—Ä–∂–µ
    print("\n[3/7] –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –±–∏—Ä–∂–µ...")
    response = await rest_client.place_order(
      symbol="BTCUSDT",
      side="Buy",
      order_type="Limit",
      quantity=0.001,
      price=30000.0,
      client_order_id=client_order_id
    )

    result = response.get('result', {})
    exchange_order_id = result.get('orderId')
    order_link_id = result.get('orderLinkId')

    print(f"‚úì –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ:")
    print(f"  Exchange Order ID: {exchange_order_id}")
    print(f"  Order Link ID: {order_link_id}")

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ orderLinkId
    print("\n[4/7] –ü—Ä–æ–≤–µ—Ä–∫–∞ orderLinkId...")
    if order_link_id == client_order_id:
      print(f"‚úì‚úì‚úì orderLinkId —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å client_order_id")
    else:
      print(f"‚úó‚úó‚úó –û–®–ò–ë–ö–ê: orderLinkId –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
      print(f"  –û–∂–∏–¥–∞–ª–æ—Å—å: {client_order_id}")
      print(f"  –ü–æ–ª—É—á–µ–Ω–æ: {order_link_id}")
      return

    # 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î
    print("\n[5/7] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î...")
    success = await order_repository.update_status(
      client_order_id=client_order_id,
      new_status=OrderStatus.PLACED,
      exchange_order_id=exchange_order_id
    )

    if success:
      print(f"‚úì –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: PENDING -> PLACED")
    else:
      print(f"‚úó –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
      return

    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ get_order_info –ø–æ client_order_id
    print("\n[6/7] –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ get_order_info (order_link_id)...")
    await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

    order_info = await rest_client.get_order_info(
      symbol="BTCUSDT",
      order_link_id=client_order_id
    )

    if order_info:
      print(f"‚úì –û—Ä–¥–µ—Ä –Ω–∞–π–¥–µ–Ω –ø–æ order_link_id:")
      print(f"  Status: {order_info.get('orderStatus')}")
      print(f"  Order ID: {order_info.get('orderId')}")
    else:
      print(f"‚úó –û—Ä–¥–µ—Ä –ù–ï –Ω–∞–π–¥–µ–Ω –ø–æ order_link_id")
      return

    # 7. –û—Ç–º–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
    print("\n[7/7] –û—Ç–º–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞...")
    cancel_response = await rest_client.cancel_order(
      symbol="BTCUSDT",
      order_id=exchange_order_id
    )
    print("‚úì –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    await order_repository.update_status(
      client_order_id=client_order_id,
      new_status=OrderStatus.CANCELLED
    )
    print("‚úì –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: PLACED -> CANCELLED")

    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ê")
    print("=" * 60)
    print("‚úì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è client_order_id")
    print("‚úì –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –≤ –ë–î")
    print("‚úì –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –±–∏—Ä–∂–µ —Å orderLinkId")
    print("‚úì –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î")
    print("‚úì –ü–æ–∏—Å–∫ –æ—Ä–¥–µ—Ä–∞ –ø–æ order_link_id")
    print("‚úì –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞")
    print("=" * 60)
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print("=" * 60)

  except Exception as e:
    print(f"\n‚úó‚úó‚úó –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {e}")
    import traceback
    traceback.print_exc()

  finally:
    # –û—á–∏—Å—Ç–∫–∞
    print("\n=== –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ ===")
    await rest_client.close()
    await db_manager.close()
    print("‚úì –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")


def main():
  """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
  loop = asyncio.new_event_loop()
  asyncio.set_event_loop(loop)

  try:
    loop.run_until_complete(test_full_order_flow())
  finally:
    try:
      pending = asyncio.all_tasks(loop)
      for task in pending:
        task.cancel()
      loop.run_until_complete(asyncio.gather(*pending, return_exceptions=True))
    except Exception:
      pass
    finally:
      loop.close()


if __name__ == "__main__":
  main()