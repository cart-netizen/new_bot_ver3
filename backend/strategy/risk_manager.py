"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞.
–ö–æ–Ω—Ç—Ä–æ–ª—å –ª–∏–º–∏—Ç–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º.

–ò–∑–º–µ–Ω–µ–Ω–∏—è:
1. –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä leverage –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
2. calculate_position_size —Ç–µ–ø–µ—Ä—å —É—á–∏—Ç—ã–≤–∞–µ—Ç leverage
3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞
4. –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á—ë—Ç–æ–≤
"""

from typing import Dict, Optional
from dataclasses import dataclass

from core.logger import get_logger
from core.exceptions import RiskManagementError
from models.signal import TradingSignal, SignalType
from config import settings

logger = get_logger(__name__)


@dataclass
class RiskLimits:
  """–õ–∏–º–∏—Ç—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞."""

  max_open_positions: int
  max_exposure_usdt: float
  min_order_size_usdt: float
  default_leverage: int = 10  # –î–æ–±–∞–≤–ª–µ–Ω–æ: –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

  def to_dict(self) -> Dict:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å."""
    return {
      "max_open_positions": self.max_open_positions,
      "max_exposure_usdt": self.max_exposure_usdt,
      "min_order_size_usdt": self.min_order_size_usdt,
      "default_leverage": self.default_leverage,
    }


@dataclass
class RiskMetrics:
  """–¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–∞."""

  open_positions_count: int = 0
  total_exposure_usdt: float = 0.0
  available_exposure_usdt: float = 0.0
  largest_position_size: float = 0.0

  def to_dict(self) -> Dict:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å."""
    return {
      "open_positions_count": self.open_positions_count,
      "total_exposure_usdt": self.total_exposure_usdt,
      "available_exposure_usdt": self.available_exposure_usdt,
      "largest_position_size": self.largest_position_size,
    }


class RiskManager:
  """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏."""

  def __init__(self, default_leverage: int = 10):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–∞.

    Args:
        default_leverage: –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–º–∏—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    self.limits = RiskLimits(
      max_open_positions=settings.MAX_OPEN_POSITIONS,
      max_exposure_usdt=settings.MAX_EXPOSURE_USDT,
      min_order_size_usdt=settings.MIN_ORDER_SIZE_USDT,
      default_leverage=default_leverage
    )

    # –¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    self.metrics = RiskMetrics(
      available_exposure_usdt=self.limits.max_exposure_usdt
    )

    # –¢—Ä–µ–∫–∏–Ω–≥ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    self.open_positions: Dict[str, Dict] = {}

    logger.info(
      f"üõ°Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω Risk Manager: "
      f"max_positions={self.limits.max_open_positions}, "
      f"max_exposure={self.limits.max_exposure_usdt} USDT, "
      f"min_order_size={self.limits.min_order_size_usdt} USDT, "
      f"default_leverage={self.limits.default_leverage}x"
    )

  def validate_signal(
      self,
      signal: TradingSignal,
      position_size_usdt: float
  ) -> tuple[bool, Optional[str]]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º.

    Args:
        signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        position_size_usdt: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ USDT (—Å —É—á–µ—Ç–æ–º leverage)

    Returns:
        tuple[bool, Optional[str]]: (–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è)
    """
    try:
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞
      if position_size_usdt < self.limits.min_order_size_usdt:
        reason = (
          f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {position_size_usdt:.2f} USDT –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ "
          f"{self.limits.min_order_size_usdt} USDT"
        )
        logger.warning(f"{signal.symbol} | {reason}")
        return False, reason

      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∑–∏—Ü–∏–π
      if signal.signal_type in [SignalType.BUY, SignalType.SELL]:
        if signal.symbol not in self.open_positions:
          # –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
          if self.metrics.open_positions_count >= self.limits.max_open_positions:
            reason = (
              f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: "
              f"{self.metrics.open_positions_count}/{self.limits.max_open_positions}"
            )
            logger.warning(f"{signal.symbol} | {reason}")
            return False, reason

      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏
      if position_size_usdt > self.metrics.available_exposure_usdt:
        reason = (
          f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏: "
          f"—Ç—Ä–µ–±—É–µ—Ç—Å—è {position_size_usdt:.2f} USDT, "
          f"–¥–æ—Å—Ç—É–ø–Ω–æ {self.metrics.available_exposure_usdt:.2f} USDT"
        )
        logger.warning(f"{signal.symbol} | {reason}")
        return False, reason

      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–∞
      if not signal.is_valid:
        reason = f"–°–∏–≥–Ω–∞–ª —É—Å—Ç–∞—Ä–µ–ª (–≤–æ–∑—Ä–∞—Å—Ç {signal.age_seconds:.1f}—Å)"
        logger.warning(f"{signal.symbol} | {reason}")
        return False, reason

      logger.debug(
        f"{signal.symbol} | ‚úì –°–∏–≥–Ω–∞–ª –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: "
        f"size={position_size_usdt:.2f} USDT"
      )
      return True, None

    except Exception as e:
      logger.error(f"{signal.symbol} | –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
      raise RiskManagementError(f"Failed to validate signal: {str(e)}")

  def calculate_position_size(
      self,
      signal: TradingSignal,
      available_balance: float,
      leverage: Optional[int] = None
  ) -> float:
    """
    –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞ —Å —É—á–µ—Ç–æ–º –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞.

    –õ–æ–≥–∏–∫–∞:
    1. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (% –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏)
    2. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
    3. –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
    4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    5. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º–∞–º–∏

    Args:
        signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        available_balance: –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ USDT
        leverage: –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è default)

    Returns:
        float: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ USDT (—Å —É—á–µ—Ç–æ–º leverage)
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –ø–ª–µ—á–æ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
    if leverage is None:
      leverage = self.limits.default_leverage

    logger.debug(
      f"{signal.symbol} | –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: "
      f"balance={available_balance:.2f} USDT, "
      f"leverage={leverage}x"
    )

    # –®–ê–ì 1: –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (5% –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏)
    base_size = self.metrics.available_exposure_usdt * 0.05

    logger.debug(
      f"{signal.symbol} | –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä (5% –æ—Ç exposure): "
      f"{base_size:.2f} USDT"
    )

    # –®–ê–ì 2: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
    strength_multiplier = {
      "STRONG": 1.0,
      "MEDIUM": 0.7,
      "WEAK": 0.5
    }.get(signal.strength.value, 0.5)

    position_size_before_leverage = base_size * strength_multiplier

    logger.debug(
      f"{signal.symbol} | –†–∞–∑–º–µ—Ä —Å —É—á–µ—Ç–æ–º —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ "
      f"({signal.strength.value}): {position_size_before_leverage:.2f} USDT "
      f"(multiplier={strength_multiplier})"
    )

    # –®–ê–ì 3: –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ
    # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ –∑–∞ —Å—á–µ—Ç –ø–ª–µ—á–∞
    position_size_with_leverage = position_size_before_leverage * leverage

    logger.debug(
      f"{signal.symbol} | –†–∞–∑–º–µ—Ä —Å –∫—Ä–µ–¥–∏—Ç–Ω—ã–º –ø–ª–µ—á–æ–º {leverage}x: "
      f"{position_size_with_leverage:.2f} USDT"
    )

    # –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if position_size_with_leverage < self.limits.min_order_size_usdt:
      logger.warning(
        f"{signal.symbol} | –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ "
        f"{position_size_with_leverage:.2f} USDT –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ "
        f"{self.limits.min_order_size_usdt} USDT"
      )

      # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
      position_size_with_leverage = self.limits.min_order_size_usdt

      logger.info(
        f"{signal.symbol} | ‚úì –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ: "
        f"{position_size_with_leverage:.2f} USDT"
      )

    # –®–ê–ì 5: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º–∞–º–∏
    # –ù–µ –º–æ–∂–µ–º –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (—Å —É—á–µ—Ç–æ–º leverage)
    max_position_by_balance = available_balance * leverage
    position_size_with_leverage = min(
      position_size_with_leverage,
      max_position_by_balance
    )

    # –ù–µ –º–æ–∂–µ–º –ø—Ä–µ–≤—ã—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—É—é —ç–∫—Å–ø–æ–∑–∏—Ü–∏—é
    position_size_with_leverage = min(
      position_size_with_leverage,
      self.metrics.available_exposure_usdt
    )

    # –†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –º–∞—Ä–∂–∏–Ω–∞ (–±–µ–∑ leverage)
    actual_margin_used = position_size_with_leverage / leverage

    logger.info(
      f"{signal.symbol} | üìä –§–ò–ù–ê–õ–¨–ù–´–ô –†–ê–ó–ú–ï–† –ü–û–ó–ò–¶–ò–ò: "
      f"{position_size_with_leverage:.2f} USDT "
      f"(–º–∞—Ä–∂–∏–Ω: {actual_margin_used:.2f} USDT, "
      f"leverage: {leverage}x, "
      f"strength: {signal.strength.value})"
    )

    return position_size_with_leverage

  def register_position_opened(
      self,
      symbol: str,
      side: SignalType,
      size_usdt: float,
      entry_price: float,
      leverage: int = None
  ):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏.

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        side: –°—Ç–æ—Ä–æ–Ω–∞ (BUY/SELL)
        size_usdt: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ USDT (—Å —É—á–µ—Ç–æ–º leverage)
        entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
        leverage: –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ –ø–æ–∑–∏—Ü–∏–∏
    """
    if leverage is None:
      leverage = self.limits.default_leverage

    # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –º–∞—Ä–∂–∏–Ω
    actual_margin = size_usdt / leverage

    self.open_positions[symbol] = {
      "side": side.value,
      "size_usdt": size_usdt,
      "entry_price": entry_price,
      "leverage": leverage,
      "actual_margin": actual_margin,
    }

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    # –í –º–µ—Ç—Ä–∏–∫–∞—Ö —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏ —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –º–∞—Ä–∂–∏–Ω
    self.metrics.open_positions_count = len(self.open_positions)
    self.metrics.total_exposure_usdt += actual_margin
    self.metrics.available_exposure_usdt = (
        self.limits.max_exposure_usdt - self.metrics.total_exposure_usdt
    )

    if size_usdt > self.metrics.largest_position_size:
      self.metrics.largest_position_size = size_usdt

    logger.info(
      f"{symbol} | ‚úì –ü–æ–∑–∏—Ü–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: "
      f"{side.value} {size_usdt:.2f} USDT @ {entry_price:.8f} "
      f"(leverage={leverage}x, margin={actual_margin:.2f} USDT)"
    )
    logger.info(
      f"üìà –¢–µ–∫—É—â–∞—è —ç–∫—Å–ø–æ–∑–∏—Ü–∏—è (margin): {self.metrics.total_exposure_usdt:.2f}/"
      f"{self.limits.max_exposure_usdt:.2f} USDT "
      f"({self.metrics.open_positions_count} –ø–æ–∑–∏—Ü–∏–π)"
    )

  def register_position_closed(self, symbol: str):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏.

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
    """
    if symbol in self.open_positions:
      position = self.open_positions.pop(symbol)
      actual_margin = position["actual_margin"]

      # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Ä–∂–∏–Ω)
      self.metrics.open_positions_count = len(self.open_positions)
      self.metrics.total_exposure_usdt -= actual_margin
      self.metrics.available_exposure_usdt = (
          self.limits.max_exposure_usdt - self.metrics.total_exposure_usdt
      )

      # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º largest_position_size
      if self.open_positions:
        self.metrics.largest_position_size = max(
          pos["size_usdt"] for pos in self.open_positions.values()
        )
      else:
        self.metrics.largest_position_size = 0.0

      logger.info(
        f"{symbol} | ‚úì –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞: –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {actual_margin:.2f} USDT margin"
      )
      logger.info(
        f"üìâ –¢–µ–∫—É—â–∞—è —ç–∫—Å–ø–æ–∑–∏—Ü–∏—è (margin): {self.metrics.total_exposure_usdt:.2f}/"
        f"{self.limits.max_exposure_usdt:.2f} USDT "
        f"({self.metrics.open_positions_count} –ø–æ–∑–∏—Ü–∏–π)"
      )

  def get_position(self, symbol: str) -> Optional[Dict]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏.

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞

    Returns:
        Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ None
    """
    return self.open_positions.get(symbol)

  def get_all_positions(self) -> Dict[str, Dict]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.

    Returns:
        Dict[str, Dict]: –°–ª–æ–≤–∞—Ä—å –ø–æ–∑–∏—Ü–∏–π
    """
    return self.open_positions.copy()

  def get_risk_status(self) -> Dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∏—Å–∫–∞.

    Returns:
        Dict: –°—Ç–∞—Ç—É—Å —Ä–∏—Å–∫–∞
    """
    return {
      "limits": self.limits.to_dict(),
      "metrics": self.metrics.to_dict(),
      "positions": self.open_positions,
      "utilization": {
        "positions": f"{self.metrics.open_positions_count}/{self.limits.max_open_positions}",
        "exposure": f"{self.metrics.total_exposure_usdt:.2f}/{self.limits.max_exposure_usdt:.2f} USDT",
        "exposure_percent": (
          (self.metrics.total_exposure_usdt / self.limits.max_exposure_usdt) * 100
          if self.limits.max_exposure_usdt > 0 else 0
        )
      }
    }

  def update_leverage(self, new_leverage: int):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.

    Args:
        new_leverage: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞
    """
    old_leverage = self.limits.default_leverage
    self.limits.default_leverage = new_leverage

    logger.info(
      f"‚úì –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {old_leverage}x -> {new_leverage}x"
    )