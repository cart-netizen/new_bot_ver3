"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞.
–ö–æ–Ω—Ç—Ä–æ–ª—å –ª–∏–º–∏—Ç–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º.

–ò–∑–º–µ–Ω–µ–Ω–∏—è:
1. –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä leverage –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
2. calculate_position_size —Ç–µ–ø–µ—Ä—å —É—á–∏—Ç—ã–≤–∞–µ—Ç leverage
3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞
4. –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á—ë—Ç–æ–≤
"""

from typing import Dict, Optional
from dataclasses import dataclass

from core.logger import get_logger
from core.exceptions import RiskManagementError
from models.signal import TradingSignal, SignalType
from config import settings
from strategy.adaptive_risk_calculator import adaptive_risk_calculator
from strategy.correlation_manager import correlation_manager
from strategy.daily_loss_killer import daily_loss_killer

logger = get_logger(__name__)


@dataclass
class RiskLimits:
  """–õ–∏–º–∏—Ç—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞."""

  max_open_positions: int
  max_exposure_usdt: float
  min_order_size_usdt: float
  default_leverage: int = 10  # –î–æ–±–∞–≤–ª–µ–Ω–æ: –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

  def to_dict(self) -> Dict:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å."""
    return {
      "max_open_positions": self.max_open_positions,
      "max_exposure_usdt": self.max_exposure_usdt,
      "min_order_size_usdt": self.min_order_size_usdt,
      "default_leverage": self.default_leverage,
    }


@dataclass
class RiskMetrics:
  """–¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–∞."""

  open_positions_count: int = 0
  total_exposure_usdt: float = 0.0
  available_exposure_usdt: float = 0.0
  largest_position_size: float = 0.0

  def to_dict(self) -> Dict:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å."""
    return {
      "open_positions_count": self.open_positions_count,
      "total_exposure_usdt": self.total_exposure_usdt,
      "available_exposure_usdt": self.available_exposure_usdt,
      "largest_position_size": self.largest_position_size,
    }


class RiskManager:
  """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏."""

  def __init__(self, default_leverage: int = 10, initial_balance: Optional[float] = None):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–∞.

    Args:
        default_leverage: –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        initial_balance: –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (–µ—Å–ª–∏ None, –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω –ø–æ–∑–∂–µ)
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–º–∏—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    self.limits = RiskLimits(
      max_open_positions=settings.MAX_OPEN_POSITIONS,
      max_exposure_usdt=settings.MAX_EXPOSURE_USDT,  # –≠—Ç–æ –ú–ê–ö–°–ò–ú–£–ú, –Ω–µ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å!
      min_order_size_usdt=settings.MIN_ORDER_SIZE_USDT,
      default_leverage=default_leverage
    )

    # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –†–ï–ê–õ–¨–ù–´–ú –±–∞–ª–∞–Ω—Å–æ–º
    if initial_balance is not None:
      actual_available = initial_balance
    else:

      # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –í–†–ï–ú–ï–ù–ù–û
      # –û–Ω –î–û–õ–ñ–ï–ù –±—ã—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω —á–µ—Ä–µ–∑ update_available_balance()
      actual_available = 0.0
      logger.warning(
        "‚ö†Ô∏è Risk Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ë–ï–ó –±–∞–ª–∞–Ω—Å–∞! "
        "–í—ã–∑–æ–≤–∏—Ç–µ update_available_balance() –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!"
      )

    # –¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Å –†–ï–ê–õ–¨–ù–´–ú –±–∞–ª–∞–Ω—Å–æ–º
    self.metrics = RiskMetrics(
      available_exposure_usdt=actual_available
    )

    # –¢—Ä–µ–∫–∏–Ω–≥ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    self.open_positions: Dict[str, Dict] = {}

    # ========== –ù–û–í–û–ï: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è CorrelationManager ==========
    self.correlation_manager = correlation_manager

    self.maintenance_margin_rate = 0.2  # 20% –¥–ª—è Bybit
    self.min_notional_value = 5.0  # –ú–∏–Ω–∏–º—É–º notional –≤ USDT
    self.default_leverage = 10

    logger.info(
      f"Risk Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å CorrelationManager: "
      f"enabled={self.correlation_manager.enabled}"
    )

    logger.info(
      f"üõ°Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω Risk Manager: "
      f"max_positions={self.limits.max_open_positions}, "
      f"max_exposure_limit={self.limits.max_exposure_usdt} USDT, "
      f"current_available={self.metrics.available_exposure_usdt:.2f} USDT, "
      f"min_order_size={self.limits.min_order_size_usdt} USDT, "
      f"default_leverage={self.limits.default_leverage}x"
    )

  def update_available_balance(self, new_balance: float):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.

    –î–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è:
    - –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ (–ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –±–∞–ª–∞–Ω—Å–∞ —Å –±–∏—Ä–∂–∏)
    - –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∏–∑ balance_tracker
    - –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π

    Args:
        new_balance: –ù–æ–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ USDT
    """
    old_balance = self.metrics.available_exposure_usdt

    # –í—ã—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é —ç–∫—Å–ø–æ–∑–∏—Ü–∏—é –∏–∑ –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    self.metrics.available_exposure_usdt = max(
      0.0,
      new_balance - self.metrics.total_exposure_usdt
    )

    logger.info(
      f"üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {old_balance:.2f} ‚Üí {self.metrics.available_exposure_usdt:.2f} USDT "
      f"(total_balance={new_balance:.2f}, locked={self.metrics.total_exposure_usdt:.2f})"
    )

  def validate_signal(
        self,
        signal: TradingSignal,
        position_size_usdt: float,
        leverage: Optional[int] = None  # ‚Üê –î–û–ë–ê–í–õ–ï–ù –ø–∞—Ä–∞–º–µ—Ç—Ä
    ) -> tuple[bool, Optional[str]]:
      """
      –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º.

      Args:
          signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
          position_size_usdt: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ USDT (–° –£–ß–ï–¢–û–ú leverage!)
          leverage: –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

      Returns:
          tuple[bool, Optional[str]]: (–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è)
      """
      try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –ø–ª–µ—á–æ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
        if leverage is None:
          leverage = self.limits.default_leverage

        # ============================================
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—ã—á–∏—Å–ª—è–µ–º required margin
        # ============================================
        required_margin = position_size_usdt / leverage

        # ============================================
        # –ü–†–û–í–ï–†–ö–ê 0.0: DAILY LOSS KILLER (–ö–†–ò–¢–ò–ß–ù–û!)
        # ============================================
        is_allowed, shutdown_reason = daily_loss_killer.is_trading_allowed()

        if not is_allowed:
          logger.critical(
            f"{signal.symbol} | üö® TRADING BLOCKED: {shutdown_reason}"
          )
          return False, shutdown_reason

        logger.debug(f"{signal.symbol} | ‚úì Daily Loss Killer: —Ç–æ—Ä–≥–æ–≤–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞")



        # ============================================
        # –ü–†–û–í–ï–†–ö–ê 0.1: –ñ–Å–°–¢–ö–ò–ô –õ–ò–ú–ò–¢ –ü–û–ó–ò–¶–ò–ô (–î–í–û–ô–ù–ê–Ø –ó–ê–©–ò–¢–ê)
        # ============================================
        if self.metrics.open_positions_count >= self.limits.max_open_positions:
          reason = (
            f"üõë –î–û–°–¢–ò–ì–ù–£–¢ –õ–ò–ú–ò–¢: {self.metrics.open_positions_count}/"
            f"{self.limits.max_open_positions} –ø–æ–∑–∏—Ü–∏–π. "
            f"–û—Ç–∫—Ä—ã—Ç—ã–µ: {list(self.open_positions.keys())}"
          )
          logger.error(f"{signal.symbol} | {reason}")
          return False, reason

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –ø–æ —ç—Ç–æ–π –ø–∞—Ä–µ?
        if signal.symbol in self.open_positions:
          reason = f"–ü–æ–∑–∏—Ü–∏—è –ø–æ {signal.symbol} —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞"
          logger.warning(f"{signal.symbol} | {reason}")
          return False, reason

        logger.debug(
          f"{signal.symbol} | –í–∞–ª–∏–¥–∞—Ü–∏—è: "
          f"position_size={position_size_usdt:.2f} USDT, "
          f"leverage={leverage}x, "
          f"required_margin={required_margin:.2f} USDT, "
          f"available={self.metrics.available_exposure_usdt:.2f} USDT"
        )

        # ============================================
        # –ü–†–û–í–ï–†–ö–ê 1: –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –†–ê–ó–ú–ï–† –û–†–î–ï–†–ê
        # ============================================
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º position_size (—Å leverage), —Ç.–∫. —ç—Ç–æ —Ç–æ —á—Ç–æ –∏–¥—ë—Ç –Ω–∞ –±–∏—Ä–∂—É
        if position_size_usdt < self.limits.min_order_size_usdt:
          reason = (
            f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {position_size_usdt:.2f} USDT –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ "
            f"{self.limits.min_order_size_usdt} USDT"
          )
          logger.warning(f"{signal.symbol} | {reason}")
          return False, reason

        # ============================================
        # –ü–†–û–í–ï–†–ö–ê 2: –î–û–°–¢–£–ü–ù–ê–Ø –≠–ö–°–ü–û–ó–ò–¶–ò–Ø (MARGIN)
        # ============================================
        # –ü–†–ê–í–ò–õ–¨–ù–û: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º required_margin —Å available_exposure
        if required_margin > self.metrics.available_exposure_usdt:
          reason = (
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ margin: "
            f"—Ç—Ä–µ–±—É–µ—Ç—Å—è {required_margin:.2f} USDT, "
            f"–¥–æ—Å—Ç—É–ø–Ω–æ {self.metrics.available_exposure_usdt:.2f} USDT "
            f"(position_size={position_size_usdt:.2f} USDT —Å leverage {leverage}x)"
          )
          logger.warning(f"{signal.symbol} | {reason}")
          return False, reason

        # ============================================
        # –ü–†–û–í–ï–†–ö–ê 3: –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–û–ó–ò–¶–ò–ô
        # ============================================
        if signal.signal_type in [SignalType.BUY, SignalType.SELL]:
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ù–û–í–ê–Ø –ø–æ–∑–∏—Ü–∏—è (–Ω–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π)
          if signal.symbol not in self.open_positions:
            current_count = self.metrics.open_positions_count
            max_count = self.limits.max_open_positions

            if current_count >= max_count:
              reason = (
                f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: "
                f"{current_count}/{max_count}. "
                f"–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–∞—Ä—ã: {list(self.open_positions.keys())}"
              )
              logger.warning(f"{signal.symbol} | ‚õî {reason}")
              return False, reason

            logger.debug(
              f"{signal.symbol} | –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ–∑–∏—Ü–∏–π: "
              f"{current_count + 1}/{max_count} (–ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è)"
            )

        # ============================================
        # –ü–†–û–í–ï–†–ö–ê 4: –ê–ö–¢–£–ê–õ–¨–ù–û–°–¢–¨ –°–ò–ì–ù–ê–õ–ê
        # ============================================
        if not signal.is_valid:
          reason = f"–°–∏–≥–Ω–∞–ª —É—Å—Ç–∞—Ä–µ–ª (–≤–æ–∑—Ä–∞—Å—Ç {signal.age_seconds:.1f}—Å)"
          logger.warning(f"{signal.symbol} | {reason}")
          return False, reason

        # ========== –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ ==========
        can_open_corr, corr_reason = self.correlation_manager.can_open_position(
          symbol=signal.symbol,
          position_size_usdt=position_size_usdt
        )

        if not can_open_corr:
          logger.warning(
            f"{signal.symbol} | –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {corr_reason}"
          )
          return False, corr_reason

        logger.debug(
          f"{signal.symbol} | ‚úì –°–∏–≥–Ω–∞–ª –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: "
          f"position={position_size_usdt:.2f} USDT, "
          f"margin={required_margin:.2f} USDT"
        )
        return True, None

      except Exception as e:
        logger.error(f"{signal.symbol} | –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        raise RiskManagementError(f"Failed to validate signal: {str(e)}")

  def calculate_position_size(
      self,
      signal: TradingSignal,
      available_balance: float,
      stop_loss_price: float,  # –ù–û–í–´–ô –ü–ê–†–ê–ú–ï–¢–†: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π
      leverage: Optional[int] = None,
      current_volatility: Optional[float] = None,
      ml_confidence: Optional[float] = None
  ) -> float:
    """
    –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Ä–∏—Å–∫–æ–º.

    –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AdaptiveRiskCalculator
    –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤.

    Args:
        signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        available_balance: –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ USDT (–†–ï–ê–õ–¨–ù–´–ô!)
        stop_loss_price: –¶–µ–Ω–∞ stop loss (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!)
        leverage: –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        current_volatility: –¢–µ–∫—É—â–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        ml_confidence: ML —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        float: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ USDT
    """
    logger.debug(
      f"{signal.symbol} | Calculating position size: "
      f"balance={available_balance:.2f}, "
      f"entry={signal.price:.8f}, "
      f"sl={stop_loss_price:.8f}"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º correlation factor
    correlation_factor = 1.0

    try:
      # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è —Å–∏–º–≤–æ–ª–∞
      group = self.correlation_manager.group_manager.get_group_for_symbol(
        signal.symbol
      )

      if group and group.active_positions > 0:
        # –ï—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–µ —É–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ - –ø—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ
        # –ß–µ–º –±–æ–ª—å—à–µ –ø–æ–∑–∏—Ü–∏–π –≤ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—â–µ–π –≥—Ä—É–ø–ø–µ, —Ç–µ–º –º–µ–Ω—å—à–µ risk
        correlation_factor = 1.0 / (1.0 + group.active_positions * 0.3)

        logger.debug(
          f"{signal.symbol} | Correlation penalty applied: "
          f"group={group.group_id}, "
          f"active_positions={group.active_positions}, "
          f"factor={correlation_factor:.2f}"
        )
    except Exception as e:
      logger.warning(f"{signal.symbol} | Error checking correlation: {e}")
      correlation_factor = 1.0

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º adaptive risk
    risk_params = adaptive_risk_calculator.calculate(
      signal=signal,
      balance=available_balance,
      stop_loss_price=stop_loss_price,
      current_volatility=current_volatility,
      correlation_factor=correlation_factor,
      ml_confidence=ml_confidence
    )

    # –ü—Ä–∏–º–µ–Ω—è–µ–º leverage
    if leverage is None:
      leverage = self.limits.default_leverage

    # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º leverage
    position_size_usdt = risk_params.max_position_usdt * leverage

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    min_size = self.limits.min_order_size_usdt * leverage

    if position_size_usdt < min_size:
      logger.warning(
        f"{signal.symbol} | Position size {position_size_usdt:.2f} USDT "
        f"< minimum {min_size:.2f} USDT (with leverage {leverage}x)"
      )
      position_size_usdt = min_size

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º balance)
    max_size = available_balance * leverage
    if position_size_usdt > max_size:
      logger.warning(
        f"{signal.symbol} | Position size {position_size_usdt:.2f} USDT "
        f"> maximum {max_size:.2f} USDT, capping"
      )
      position_size_usdt = max_size

    logger.info(
      f"{signal.symbol} | ‚úì Adaptive Risk calculated: "
      f"final_risk={risk_params.final_risk_percent:.2%}, "
      f"position=${position_size_usdt:.2f} USDT "
      f"(leverage={leverage}x, "
      f"vol_adj={risk_params.volatility_adjustment:.2f}, "
      f"corr_adj={risk_params.correlation_adjustment:.2f})"
    )

    return position_size_usdt



  # ==============================================================
  # –ù–û–í–´–ô –ú–ï–¢–û–î: –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—Ä–µ–π–¥–∞
  # ==============================================================

  def record_trade_result(self, is_win: bool, pnl: float):
    """
    –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —Ç—Ä–µ–π–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
    - Kelly Criterion —Ä–∞—Å—á–µ—Ç–æ–≤
    - Adaptive win rate adjustment

    Args:
        is_win: –ü—Ä–∏–±—ã–ª—å–Ω—ã–π –ª–∏ —Ç—Ä–µ–π–¥
        pnl: P&L –≤ USDT
    """
    adaptive_risk_calculator.record_trade(is_win, pnl)

    logger.debug(
      f"Trade result recorded: win={is_win}, pnl={pnl:.2f} USDT"
    )

  # ==============================================================
  # –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Adaptive Risk
  # ==============================================================

  def get_adaptive_risk_statistics(self) -> dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Adaptive Risk Calculator.

    Returns:
        dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å win_rate, payoff_ratio –∏ —Ç.–¥.
    """
    return adaptive_risk_calculator.get_statistics()

  def register_position_opened(
      self,
      symbol: str,
      side: SignalType,
      size_usdt: float,
      entry_price: float,
      leverage: int = None
  ):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏.

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        side: –°—Ç–æ—Ä–æ–Ω–∞ (BUY/SELL)
        size_usdt: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ USDT (—Å —É—á–µ—Ç–æ–º leverage)
        entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
        leverage: –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ –ø–æ–∑–∏—Ü–∏–∏
    """
    if leverage is None:
      leverage = self.limits.default_leverage

    actual_margin = size_usdt / leverage

    self.open_positions[symbol] = {
      "side": side.value,
      "size_usdt": size_usdt,
      "entry_price": entry_price,
      "leverage": leverage,
      "actual_margin": actual_margin,
    }

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    self.metrics.open_positions_count = len(self.open_positions)
    self.metrics.total_exposure_usdt += actual_margin
    self.metrics.available_exposure_usdt = (
        self.limits.max_exposure_usdt - self.metrics.total_exposure_usdt
    )

    if size_usdt > self.metrics.largest_position_size:
      self.metrics.largest_position_size = size_usdt

    self.correlation_manager.notify_position_opened(
      symbol=symbol,
      exposure_usdt=size_usdt
    )

    logger.debug(
      f"{symbol} | –ü–æ–∑–∏—Ü–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ CorrelationManager"
    )

    logger.info(
      f"{symbol} | ‚úì –ü–æ–∑–∏—Ü–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: "
      f"{side.value} {size_usdt:.2f} USDT @ {entry_price:.8f} "
      f"(leverage={leverage}x, margin={actual_margin:.2f} USDT)"
    )
    logger.info(
      f"üìä –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {self.metrics.open_positions_count}/"
      f"{self.limits.max_open_positions} | "
      f"Margin: {self.metrics.total_exposure_usdt:.2f}/"
      f"{self.limits.max_exposure_usdt:.2f} USDT | "
      f"–ü–∞—Ä—ã: {list(self.open_positions.keys())}"
    )

  def register_position_closed(self, symbol: str):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏.

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
    """
    if symbol in self.open_positions:
      position = self.open_positions.pop(symbol)
      actual_margin = position["actual_margin"]

      # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
      self.metrics.open_positions_count = len(self.open_positions)
      self.metrics.total_exposure_usdt -= actual_margin
      self.metrics.available_exposure_usdt = (
          self.limits.max_exposure_usdt - self.metrics.total_exposure_usdt
      )

      # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º largest_position_size
      if self.open_positions:
        self.metrics.largest_position_size = max(
          pos["size_usdt"] for pos in self.open_positions.values()
        )
      else:
        self.metrics.largest_position_size = 0.0

      self.correlation_manager.notify_position_closed(
        symbol=symbol,
        exposure_usdt=position["size_usdt"]
      )

      logger.debug(
        f"{symbol} | –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ CorrelationManager"
      )

      logger.info(
        f"{symbol} | ‚úì –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞: –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {actual_margin:.2f} USDT margin"
      )
      logger.info(
        f"üìä –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {self.metrics.open_positions_count}/"
        f"{self.limits.max_open_positions} | "
        f"Margin: {self.metrics.total_exposure_usdt:.2f}/"
        f"{self.limits.max_exposure_usdt:.2f} USDT | "
        f"–ü–∞—Ä—ã: {list(self.open_positions.keys())}"
      )
    else:
      logger.warning(
        f"{symbol} | ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é"
      )

  def can_open_new_position(self, symbol: str) -> tuple[bool, Optional[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é.

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞

    Returns:
        tuple[bool, Optional[str]]: (–º–æ–∂–Ω–æ_–æ—Ç–∫—Ä—ã—Ç—å, –ø—Ä–∏—á–∏–Ω–∞_–æ—Ç–∫–∞–∑–∞)
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –£–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ —ç—Ç–æ–π –ø–∞—Ä–µ?
    if symbol in self.open_positions:
      return False, f"–ü–æ–∑–∏—Ü–∏—è –ø–æ {symbol} —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π?
    if self.metrics.open_positions_count >= self.limits.max_open_positions:
      return False, (
        f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π: "
        f"{self.metrics.open_positions_count}/{self.limits.max_open_positions}"
      )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ï—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π margin?
    if self.metrics.available_exposure_usdt < self.limits.min_order_size_usdt / self.limits.default_leverage:
      return False, (
        f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ margin: –¥–æ—Å—Ç—É–ø–Ω–æ {self.metrics.available_exposure_usdt:.2f} USDT"
      )

    return True, None

  def get_position(self, symbol: str) -> Optional[Dict]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏.

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞

    Returns:
        Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ None
    """
    return self.open_positions.get(symbol)

  def get_all_positions(self) -> Dict[str, Dict]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.

    Returns:
        Dict[str, Dict]: –°–ª–æ–≤–∞—Ä—å –ø–æ–∑–∏—Ü–∏–π
    """
    return self.open_positions.copy()

  def get_risk_status(self) -> Dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∏—Å–∫–∞.

    Returns:
        Dict: –°—Ç–∞—Ç—É—Å —Ä–∏—Å–∫–∞
    """
    return {
      "limits": self.limits.to_dict(),
      "metrics": self.metrics.to_dict(),
      "positions": self.open_positions,
      "utilization": {
        "positions": f"{self.metrics.open_positions_count}/{self.limits.max_open_positions}",
        "exposure": f"{self.metrics.total_exposure_usdt:.2f}/{self.limits.max_exposure_usdt:.2f} USDT",
        "exposure_percent": (
          (self.metrics.total_exposure_usdt / self.limits.max_exposure_usdt) * 100
          if self.limits.max_exposure_usdt > 0 else 0
        )
      }
    }

  def update_leverage(self, new_leverage: int):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.

    Args:
        new_leverage: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞
    """
    old_leverage = self.limits.default_leverage
    self.limits.default_leverage = new_leverage

    logger.info(
      f"‚úì –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {old_leverage}x -> {new_leverage}x"
    )