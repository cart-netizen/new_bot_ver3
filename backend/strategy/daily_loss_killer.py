"""
Daily Loss Killer - –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–±—ã—Ç–∫–æ–≤.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø—Ä–∏ —É–±—ã—Ç–∫–µ ‚â•15%
- –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ Email + Telegram
- –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é –¥–æ —Ä—É—á–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞

–ü—É—Ç—å: backend/strategy/daily_loss_killer.py
"""
import asyncio
from datetime import datetime, time as datetime_time, timedelta
from typing import Optional, Tuple

from core.logger import get_logger
from config import settings
from utils.balance_tracker import balance_tracker
from services.notification_service import NotificationService
from infrastructure.repositories.audit_repository import audit_repository
from database.models import AuditAction
from strategy.risk_models import DailyLossMetrics

logger = get_logger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä notification service
notification_service = NotificationService()


class DailyLossKiller:
  """
  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–Ω–µ–≤–Ω–æ–≥–æ —É–±—ã—Ç–∫–∞.

  –ó–ê–©–ò–¢–ê:
  - Warning: 10% —É–±—ã—Ç–æ–∫
  - Critical: 15% —É–±—ã—Ç–æ–∫ ‚Üí EMERGENCY SHUTDOWN
  """

  def __init__(self):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è."""
    self.enabled = settings.DAILY_LOSS_KILLER_ENABLED
    self.max_loss_percent = settings.DAILY_LOSS_MAX_PERCENT / 100  # 15% -> 0.15
    self.warning_percent = settings.DAILY_LOSS_WARNING_PERCENT / 100  # 10% -> 0.10
    self.check_interval = settings.DAILY_LOSS_CHECK_INTERVAL_SEC

    # –°–æ—Å—Ç–æ—è–Ω–∏–µ
    self.starting_balance: Optional[float] = None
    self.daily_reset_time = datetime_time(0, 0)  # 00:00 UTC
    self.last_check: Optional[datetime] = None
    self.is_emergency_shutdown = False
    self.warning_sent = False

    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ task
    self.monitoring_task: Optional[asyncio.Task] = None

    logger.info(
      f"DailyLossKiller initialized: "
      f"enabled={self.enabled}, "
      f"max_loss={self.max_loss_percent:.0%}, "
      f"warning={self.warning_percent:.0%}"
    )

  async def start(self):
    """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    if not self.enabled:
      logger.info("DailyLossKiller disabled by config")
      return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º starting balance
    await self._initialize_starting_balance()

    # –ó–∞–ø—É—Å–∫–∞–µ–º monitoring task
    self.monitoring_task = asyncio.create_task(self._monitoring_loop())

    logger.info(
      f"‚úì DailyLossKiller started: "
      f"starting_balance=${self.starting_balance:.2f}"
    )

  async def stop(self):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    if self.monitoring_task:
      self.monitoring_task.cancel()
      try:
        await self.monitoring_task
      except asyncio.CancelledError:
        pass

    logger.info("DailyLossKiller stopped")

  async def _initialize_starting_balance(self):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è starting balance –¥–ª—è –¥–Ω—è."""
    current_balance = balance_tracker.get_current_balance()

    if current_balance is None or current_balance == 0:
      # Fallback –Ω–∞ initial balance –∏–∑ tracker
      stats = balance_tracker.get_stats()
      current_balance = stats.get('initial_balance', 10000.0)
      logger.warning(
        f"Current balance unavailable, using initial: ${current_balance:.2f}"
      )

    self.starting_balance = current_balance
    self.warning_sent = False
    self.is_emergency_shutdown = False

    logger.info(f"Starting balance set: ${self.starting_balance:.2f}")

  async def _monitoring_loop(self):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    logger.info("Daily Loss monitoring loop started")

    while True:
      try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ reset –≤—Ä–µ–º–µ–Ω–∏
        await self._check_daily_reset()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–±—ã—Ç–∫–∞
        await self._check_daily_loss()

        # –ü–∞—É–∑–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await asyncio.sleep(self.check_interval)

      except asyncio.CancelledError:
        logger.info("Monitoring loop cancelled")
        break
      except Exception as e:
        logger.error(f"Error in monitoring loop: {e}", exc_info=True)
        await asyncio.sleep(self.check_interval)

  async def _check_daily_reset(self):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ daily reset."""
    now = datetime.now()
    current_time = now.time()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∏ –ª–∏ –º—ã —á–µ—Ä–µ–∑ reset –≤—Ä–µ–º—è
    if self.last_check is not None:
      last_time = self.last_check.time()

      # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∏ —á–µ—Ä–µ–∑ 00:00
      if last_time > self.daily_reset_time >= current_time or \
          (last_time < self.daily_reset_time and current_time >= self.daily_reset_time):
        logger.info("=" * 60)
        logger.info("DAILY RESET TRIGGERED")
        logger.info("=" * 60)

        await self._perform_daily_reset()

    self.last_check = now

  async def _perform_daily_reset(self):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ daily reset."""
    # –û–±–Ω–æ–≤–ª—è–µ–º starting balance
    await self._initialize_starting_balance()

    # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é (–µ—Å–ª–∏ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞)
    # –í–ê–ñ–ù–û: –¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –≤–∫–ª—é—á–µ–Ω–∏–µ–º!
    if self.is_emergency_shutdown:
      logger.warning(
        "Trading remains DISABLED after emergency shutdown. "
        "Manual intervention required!"
      )

    # –õ–æ–≥–∏—Ä—É–µ–º reset
    await audit_repository.log(
      action=AuditAction.SYSTEM,
      entity_type="DailyLossKiller",
      entity_id="daily_reset",
      success=True,
      context={
        'event': 'daily_reset',
        'new_starting_balance': self.starting_balance,
        'timestamp': datetime.now().isoformat()
      }
    )

    logger.info(f"Daily reset completed: new starting balance=${self.starting_balance:.2f}")

  async def _check_daily_loss(self):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω–µ–≤–Ω–æ–≥–æ —É–±—ã—Ç–∫–∞."""
    if self.starting_balance is None:
      logger.warning("Starting balance not set, skipping loss check")
      return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    current_balance = balance_tracker.get_current_balance()

    if current_balance is None:
      logger.warning("Current balance unavailable, skipping loss check")
      return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metrics = self._calculate_metrics(current_balance)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CRITICAL —É—Ä–æ–≤–Ω—è (15%)
    if metrics.daily_loss_percent >= self.max_loss_percent:
      logger.critical(
        f"üö® CRITICAL DAILY LOSS REACHED: {metrics.daily_loss_percent:.2%} üö®"
      )
      await self._trigger_emergency_shutdown(metrics)
      return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ WARNING —É—Ä–æ–≤–Ω—è (10%)
    if metrics.daily_loss_percent >= self.warning_percent and not self.warning_sent:
      logger.warning(
        f"‚ö†Ô∏è WARNING: Daily loss at {metrics.daily_loss_percent:.2%} "
        f"(threshold: {self.warning_percent:.2%})"
      )
      await self._send_warning_notification(metrics)
      self.warning_sent = True

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ (–∫–∞–∂–¥—É—é 5-—é –ø—Ä–æ–≤–µ—Ä–∫—É)
    if hasattr(self, '_check_counter'):
      self._check_counter += 1
    else:
      self._check_counter = 1

    if self._check_counter % 5 == 0:
      logger.debug(
        f"Daily loss check: "
        f"PnL=${metrics.daily_pnl:.2f} ({metrics.daily_loss_percent:.2%}), "
        f"balance=${current_balance:.2f}"
      )

  def _calculate_metrics(self, current_balance: float) -> DailyLossMetrics:
    """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ —É–±—ã—Ç–∫–∞."""
    daily_pnl = current_balance - self.starting_balance
    daily_loss_percent = abs(daily_pnl) / self.starting_balance if daily_pnl < 0 else 0.0

    is_critical = daily_loss_percent >= self.max_loss_percent

    # –í—Ä–µ–º—è –¥–æ reset (00:00 UTC —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è)
    now = datetime.now()
    next_reset = datetime.combine(
      now.date() + (timedelta(days=1) if now.time() >= self.daily_reset_time else timedelta(0)),
      self.daily_reset_time
    )

    return DailyLossMetrics(
      starting_balance=self.starting_balance,
      current_balance=current_balance,
      daily_pnl=daily_pnl,
      daily_loss_percent=daily_loss_percent,
      max_daily_loss_percent=self.max_loss_percent,
      is_critical=is_critical,
      time_to_reset=next_reset
    )

  async def _trigger_emergency_shutdown(self, metrics: DailyLossMetrics):
    """
    EMERGENCY SHUTDOWN –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–±—ã—Ç–∫–∞.

    –î–ï–ô–°–¢–í–ò–Ø:
    1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
    2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    3. Audit log

    TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ExecutionManager –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
    """
    if self.is_emergency_shutdown:
      # –£–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
      return

    logger.critical("=" * 80)
    logger.critical("üö® EMERGENCY SHUTDOWN INITIATED üö®")
    logger.critical("=" * 80)
    logger.critical(f"Daily Loss: {metrics.daily_loss_percent:.2%} (max: {self.max_loss_percent:.2%})")
    logger.critical(f"Starting Balance: ${metrics.starting_balance:.2f}")
    logger.critical(f"Current Balance: ${metrics.current_balance:.2f}")
    logger.critical(f"Daily PnL: ${metrics.daily_pnl:.2f}")
    logger.critical("=" * 80)

    try:
      # 1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–µ–º –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
      self.is_emergency_shutdown = True

      # 2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await self._send_emergency_notifications(metrics)

      # 3. Audit log
      await audit_repository.log(
        action=AuditAction.EMERGENCY_SHUTDOWN,
        entity_type="DailyLossKiller",
        entity_id="emergency_shutdown",
        success=True,
        context={
          'daily_loss_percent': metrics.daily_loss_percent,
          'starting_balance': metrics.starting_balance,
          'current_balance': metrics.current_balance,
          'daily_pnl': metrics.daily_pnl,
          'timestamp': datetime.now().isoformat()
        },
        reason=f"Daily loss {metrics.daily_loss_percent:.2%} exceeded max {self.max_loss_percent:.2%}"
      )

      logger.critical("=" * 80)
      logger.critical("üö® EMERGENCY SHUTDOWN COMPLETED üö®")
      logger.critical("TRADING DISABLED - MANUAL INTERVENTION REQUIRED")
      logger.critical("=" * 80)

    except Exception as e:
      logger.critical(f"ERROR DURING EMERGENCY SHUTDOWN: {e}", exc_info=True)
      # –í—Å–µ —Ä–∞–≤–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
      self.is_emergency_shutdown = True

      await notification_service.send_critical_alert(
        title="EMERGENCY SHUTDOWN FAILED",
        message=f"Error during shutdown: {e}",
        context={'error': str(e)}
      )

  async def _send_warning_notification(self, metrics: DailyLossMetrics):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É."""
    await notification_service.send_warning(
      title=f"‚ö†Ô∏è Daily Loss Warning: {metrics.daily_loss_percent:.2%}",
      message=(
        f"Daily loss approaching critical threshold!\n\n"
        f"Current Loss: {metrics.daily_loss_percent:.2%}\n"
        f"Warning Threshold: {self.warning_percent:.2%}\n"
        f"Critical Threshold: {self.max_loss_percent:.2%}\n\n"
        f"Starting Balance: ${metrics.starting_balance:.2f}\n"
        f"Current Balance: ${metrics.current_balance:.2f}\n"
        f"Daily PnL: ${metrics.daily_pnl:.2f}"
      ),
      context=metrics.__dict__
    )

  async def _send_emergency_notifications(self, metrics: DailyLossMetrics):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ shutdown."""
    await notification_service.send_critical_alert(
      title="üö® EMERGENCY SHUTDOWN - Critical Daily Loss",
      message=(
        f"EMERGENCY SHUTDOWN EXECUTED\n\n"
        f"Daily Loss: {metrics.daily_loss_percent:.2%} "
        f"(max allowed: {self.max_loss_percent:.2%})\n\n"
        f"Starting Balance: ${metrics.starting_balance:.2f}\n"
        f"Current Balance: ${metrics.current_balance:.2f}\n"
        f"Daily PnL: ${metrics.daily_pnl:.2f}\n\n"
        f"‚ö†Ô∏è MANUAL INTERVENTION REQUIRED ‚ö†Ô∏è\n"
        f"Trading will resume after manual review and approval."
      ),
      context=metrics.__dict__
    )

  def is_trading_allowed(self) -> Tuple[bool, Optional[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—è.

    Returns:
        (allowed, reason)
    """
    if not self.enabled:
      return True, None

    if self.is_emergency_shutdown:
      return False, "Emergency shutdown active - manual intervention required"

    return True, None

  def get_metrics(self) -> Optional[DailyLossMetrics]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫ —É–±—ã—Ç–∫–∞."""
    if self.starting_balance is None:
      return None

    current_balance = balance_tracker.get_current_balance()
    if current_balance is None:
      return None

    return self._calculate_metrics(current_balance)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
daily_loss_killer = DailyLossKiller()