"""
Trailing Stop Manager - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ trailing stops.

–§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:
- Activation trigger (–Ω–∞—á–∞–ª–æ trailing –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏—Ç–∞)
- Adaptive distance (–Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –ø—Ä–∏–±—ã–ª–∏)
- Multiple distance levels (—Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ)
- Auto-update —á–µ—Ä–µ–∑ position FSM
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∏—Ä–∂–µ–π —á–µ—Ä–µ–∑ REST API

DISTANCE LEVELS:
- Profit 1.5-3%: Trail 0.8%
- Profit 3-5%: Trail 1.2%
- Profit 5%+: Trail 1.5%

–ü—É—Ç—å: backend/strategy/trailing_stop_manager.py
"""
import asyncio
from typing import Dict, Optional, List
from datetime import datetime

from core.logger import get_logger
from config import settings
from models.signal import SignalType
from database.models import PositionStatus, OrderSide
from strategy.risk_models import TrailingStopState
from infrastructure.repositories.position_repository import position_repository
from exchange.rest_client import rest_client

logger = get_logger(__name__)


class TrailingStopManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä trailing stops –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.

    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç
    stop loss –∑–∞ —Ü–µ–Ω–æ–π –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏.
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Trailing Stop Manager."""
        self.enabled = settings.TRAILING_STOP_ENABLED
        self.activation_profit_percent = settings.TRAILING_STOP_ACTIVATION_PROFIT_PERCENT / 100
        self.distance_percent = settings.TRAILING_STOP_DISTANCE_PERCENT / 100
        self.update_interval = settings.TRAILING_STOP_UPDATE_INTERVAL_SEC

        # –ê–∫—Ç–∏–≤–Ω—ã–µ trailing stops: {symbol: TrailingStopState}
        self.active_trails: Dict[str, TrailingStopState] = {}

        # –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.update_task: Optional[asyncio.Task] = None

        # –°—Ç—É–ø–µ–Ω—á–∞—Ç—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
        self.distance_levels = [
            {'profit': 0.015, 'distance': 0.008},  # 1.5% profit ‚Üí 0.8% trail
            {'profit': 0.030, 'distance': 0.012},  # 3% profit ‚Üí 1.2% trail
            {'profit': 0.050, 'distance': 0.015},  # 5% profit ‚Üí 1.5% trail
        ]

        # –ú–µ—Ç—Ä–∏–∫–∏
        self.total_activations = 0
        self.total_updates = 0
        self.total_profits_locked = 0.0

        logger.info(
            f"TrailingStopManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: "
            f"enabled={self.enabled}, "
            f"activation={self.activation_profit_percent:.1%}, "
            f"base_distance={self.distance_percent:.1%}, "
            f"update_interval={self.update_interval}s"
        )

    async def start(self):
        """–ó–∞–ø—É—Å–∫ Trailing Stop Manager."""
        if not self.enabled:
            logger.info("TrailingStopManager –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return

        logger.info("–ó–∞–ø—É—Å–∫ TrailingStopManager...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –ë–î
        await self._load_active_positions()

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.update_task = asyncio.create_task(self._update_loop())

        logger.info(
            f"‚úì TrailingStopManager –∑–∞–ø—É—â–µ–Ω | "
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(self.active_trails)}"
        )

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Trailing Stop Manager."""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ TrailingStopManager...")

        if self.update_task:
            self.update_task.cancel()
            try:
                await self.update_task
            except asyncio.CancelledError:
                pass

        logger.info(
            f"‚úì TrailingStopManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω | "
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: "
            f"activations={self.total_activations}, "
            f"updates={self.total_updates}, "
            f"locked_profit=${self.total_profits_locked:.2f}"
        )

    async def _load_active_positions(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ –ë–î –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."""
        try:
            positions = await position_repository.get_by_status(PositionStatus.OPEN)

            for position in positions:
                # –°–æ–∑–¥–∞–µ–º TrailingStopState –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
                state = TrailingStopState(
                    position_id=str(position.id),
                    symbol=position.symbol,
                    entry_price=position.entry_price,
                    current_price=position.current_price or position.entry_price,
                    highest_price=position.current_price or position.entry_price,
                    lowest_price=position.current_price or position.entry_price,
                    current_stop_loss=position.stop_loss,
                    trailing_distance_percent=self.distance_percent,
                    activation_profit_percent=self.activation_profit_percent,
                    is_active=False,
                    updated_at=datetime.now()
                )

                self.active_trails[position.symbol] = state

                logger.debug(
                    f"{position.symbol} | –ó–∞–≥—Ä—É–∂–µ–Ω trailing stop: "
                    f"entry=${position.entry_price:.2f}, "
                    f"SL=${position.stop_loss:.2f}"
                )

            logger.info(
                f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.active_trails)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π "
                f"–¥–ª—è trailing stop"
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {e}", exc_info=True)

    async def _update_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è trailing stops."""
        logger.info("–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è trailing stops –∑–∞–ø—É—â–µ–Ω")

        while True:
            try:
                await self._update_all_trailing_stops()
                await asyncio.sleep(self.update_interval)

            except asyncio.CancelledError:
                logger.info("–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è trailing stops: {e}",
                    exc_info=True
                )
                await asyncio.sleep(self.update_interval)

    async def _update_all_trailing_stops(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö trailing stops."""
        if not self.active_trails:
            return

        for symbol in list(self.active_trails.keys()):
            try:
                trail_state = self.active_trails[symbol]
                await self._update_trailing_stop(symbol, trail_state)

            except Exception as e:
                logger.error(
                    f"{symbol} | –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è trailing stop: {e}",
                    exc_info=True
                )

    async def _update_trailing_stop(
        self,
        symbol: str,
        trail_state: TrailingStopState
    ):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ trailing stop –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            trail_state: –°–æ—Å—Ç–æ—è–Ω–∏–µ trailing stop
        """
        # ===== –®–ê–ì 1: –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –ü–û–ó–ò–¶–ò–ò =====
        position = await position_repository.find_open_by_symbol(symbol)

        if not position or position.status != PositionStatus.OPEN:
            # –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ - —É–¥–∞–ª—è–µ–º trailing
            del self.active_trails[symbol]
            logger.debug(f"{symbol} | –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞, trailing stop —É–¥–∞–ª–µ–Ω")
            return

        # ===== –®–ê–ì 2: –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–ö–£–©–ï–ô –¶–ï–ù–´ =====
        current_price = position.current_price or position.entry_price

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≤ state
        trail_state.current_price = current_price

        # ===== –®–ê–ì 3: –û–ë–ù–û–í–õ–ï–ù–ò–ï HIGHEST/LOWEST PRICE =====
        side = position.side

        if side == OrderSide.BUY:
            # –î–ª—è LONG –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
            if current_price > trail_state.highest_price:
                trail_state.highest_price = current_price
        else:  # OrderSide.SELL
            # –î–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
            if current_price < trail_state.lowest_price:
                trail_state.lowest_price = current_price

        # ===== –®–ê–ì 4: –†–ê–°–ß–ï–¢ –¢–ï–ö–£–©–ï–ô –ü–†–ò–ë–´–õ–ò =====
        if side == OrderSide.BUY:
            profit_percent = (current_price - trail_state.entry_price) / trail_state.entry_price
        else:
            profit_percent = (trail_state.entry_price - current_price) / trail_state.entry_price

        # ===== –®–ê–ì 5: –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ê–¶–ò–ò TRAILING =====
        if not trail_state.is_active:
            if profit_percent >= trail_state.activation_profit_percent:
                trail_state.is_active = True
                self.total_activations += 1

                logger.info(
                    f"{symbol} | üéØ TRAILING STOP –ê–ö–¢–ò–í–ò–†–û–í–ê–ù | "
                    f"–ü—Ä–∏–±—ã–ª—å: {profit_percent:.2%}, "
                    f"–ü–æ—Ä–æ–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {trail_state.activation_profit_percent:.2%}"
                )
            else:
                # –ï—â–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                return

        # ===== –®–ê–ì 6: –†–ê–°–ß–ï–¢ –ù–û–í–û–ì–û STOP LOSS =====

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –ø—Ä–∏–±—ã–ª–∏
        trail_distance = self._get_trail_distance(profit_percent)
        trail_state.trailing_distance_percent = trail_distance

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π stop loss
        if side == OrderSide.BUY:
            new_stop_loss = trail_state.highest_price * (1 - trail_distance)
        else:  # SHORT
            new_stop_loss = trail_state.lowest_price * (1 + trail_distance)

        # ===== –®–ê–ì 7: –ü–†–û–í–ï–†–ö–ê –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø =====
        if side == OrderSide.BUY:
            should_update = new_stop_loss > trail_state.current_stop_loss
        else:
            should_update = new_stop_loss < trail_state.current_stop_loss

        if not should_update:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            return

        # ===== –®–ê–ì 8: –û–ë–ù–û–í–õ–ï–ù–ò–ï STOP LOSS =====
        old_sl = trail_state.current_stop_loss
        trail_state.current_stop_loss = new_stop_loss
        trail_state.updated_at = datetime.now()

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        await position_repository.update_stop_loss(
            position_id=trail_state.position_id,
            new_stop_loss=new_stop_loss
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ –±–∏—Ä–∂–µ —á–µ—Ä–µ–∑ REST API
        try:
            await rest_client.set_trading_stop(
                symbol=symbol,
                stop_loss=new_stop_loss
            )

            self.total_updates += 1

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å
            if side == OrderSide.BUY:
                locked_profit = (new_stop_loss - trail_state.entry_price) * position.quantity
            else:
                locked_profit = (trail_state.entry_price - new_stop_loss) * position.quantity

            self.total_profits_locked += locked_profit

            logger.info(
                f"{symbol} | üìà TRAILING STOP –û–ë–ù–û–í–õ–ï–ù | "
                f"–ü—Ä–∏–±—ã–ª—å: {profit_percent:.2%}, "
                f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {trail_distance:.2%}, "
                f"SL: ${old_sl:.2f} ‚Üí ${new_stop_loss:.2f} "
                f"(Œî{((new_stop_loss - old_sl) / old_sl):.2%}), "
                f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏–±—ã–ª—å: ${locked_profit:.2f}"
            )

        except Exception as e:
            logger.error(
                f"{symbol} | –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SL –Ω–∞ –±–∏—Ä–∂–µ: {e}",
                exc_info=True
            )
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ state
            trail_state.current_stop_loss = old_sl

    def _get_trail_distance(self, profit_percent: float) -> float:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ trail distance –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –ø—Ä–∏–±—ã–ª–∏.

        –°—Ç—É–ø–µ–Ω—á–∞—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞:
        - 1.5-3% profit: 0.8% trail
        - 3-5% profit: 1.2% trail
        - 5%+ profit: 1.5% trail

        Args:
            profit_percent: –¢–µ–∫—É—â–∞—è –ø—Ä–∏–±—ã–ª—å –≤ –¥–æ–ª—è—Ö (0.015 = 1.5%)

        Returns:
            float: –î–∏—Å—Ç–∞–Ω—Ü–∏—è trailing –≤ –¥–æ–ª—è—Ö
        """
        for level in reversed(self.distance_levels):
            if profit_percent >= level['profit']:
                return level['distance']

        # Default - –±–∞–∑–æ–≤–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è
        return self.distance_percent

    def register_position_opened(
        self,
        symbol: str,
        position_id: str,
        entry_price: float,
        stop_loss: float,
        side: OrderSide
    ):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è trailing.

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            position_id: ID –ø–æ–∑–∏—Ü–∏–∏
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            stop_loss: –ù–∞—á–∞–ª—å–Ω—ã–π stop loss
            side: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        """
        if not self.enabled:
            return

        state = TrailingStopState(
            position_id=position_id,
            symbol=symbol,
            entry_price=entry_price,
            current_price=entry_price,
            highest_price=entry_price,
            lowest_price=entry_price,
            current_stop_loss=stop_loss,
            trailing_distance_percent=self.distance_percent,
            activation_profit_percent=self.activation_profit_percent,
            is_active=False,
            updated_at=datetime.now()
        )

        self.active_trails[symbol] = state

        logger.info(
            f"{symbol} | Trailing stop –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: "
            f"entry=${entry_price:.2f}, "
            f"initial_SL=${stop_loss:.2f}, "
            f"activation={self.activation_profit_percent:.2%}"
        )

    def register_position_closed(self, symbol: str):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏.

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        """
        if symbol in self.active_trails:
            del self.active_trails[symbol]
            logger.info(f"{symbol} | Trailing stop —É–¥–∞–ª–µ–Ω (–ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞)")

    def update_position_price(
        self,
        symbol: str,
        current_price: float
    ):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏.

        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è Position Monitor –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ real-time.

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        """
        if symbol not in self.active_trails:
            return

        trail_state = self.active_trails[symbol]
        trail_state.current_price = current_price

    def get_trailing_status(self, symbol: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ trailing stop –¥–ª—è —Å–∏–º–≤–æ–ª–∞.

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞

        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        if symbol not in self.active_trails:
            return None

        state = self.active_trails[symbol]

        return {
            'symbol': symbol,
            'is_active': state.is_active,
            'entry_price': state.entry_price,
            'current_price': state.current_price,
            'highest_price': state.highest_price,
            'lowest_price': state.lowest_price,
            'current_stop_loss': state.current_stop_loss,
            'trailing_distance': state.trailing_distance_percent,
            'activation_profit': state.activation_profit_percent,
            'last_update': state.updated_at.isoformat()
        }

    def get_all_trailing_stops(self) -> Dict[str, Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö trailing stops.

        Returns:
            Dict[symbol, status]: –°–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–º–∏ trailing stops
        """
        return {
            symbol: self.get_trailing_status(symbol)
            for symbol in self.active_trails
        }

    def get_statistics(self) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã Trailing Stop Manager.

        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        return {
            'enabled': self.enabled,
            'active_positions': len(self.active_trails),
            'total_activations': self.total_activations,
            'total_updates': self.total_updates,
            'total_profits_locked': self.total_profits_locked,
            'activation_profit_threshold': self.activation_profit_percent,
            'base_distance': self.distance_percent,
            'update_interval': self.update_interval,
            'distance_levels': self.distance_levels
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
trailing_stop_manager = TrailingStopManager()