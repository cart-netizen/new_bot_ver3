"""
Circuit Breaker Pattern.
–ó–∞—â–∏—Ç–∞ –æ—Ç –∫–∞—Å–∫–∞–¥–Ω—ã—Ö —Å–±–æ–µ–≤ –ø—Ä–∏ –≤—ã–∑–æ–≤–∞—Ö API –±–∏—Ä–∂–∏.
"""

import time
from typing import Callable, Any, Optional
from enum import Enum
from functools import wraps
from datetime import datetime, timedelta

from backend.core.logger import get_logger
from backend.core.exceptions import CircuitBreakerError

logger = get_logger(__name__)


class CircuitState(str, Enum):
  """–°–æ—Å—Ç–æ—è–Ω–∏—è Circuit Breaker."""
  CLOSED = "closed"  # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
  OPEN = "open"  # –ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å —Å—Ä–∞–±–æ—Ç–∞–ª, –±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–∑–æ–≤—ã
  HALF_OPEN = "half_open"  # –ü—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è


class CircuitBreaker:
  """
  Circuit Breaker –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∫–∞—Å–∫–∞–¥–Ω—ã—Ö —Å–±–æ–µ–≤.

  –ü–∞—Ç—Ç–µ—Ä–Ω:
  - CLOSED: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –≤—ã–∑–æ–≤—ã –ø—Ä–æ—Ö–æ–¥—è—Ç
  - OPEN: –ü–æ—Å–ª–µ N –æ—à–∏–±–æ–∫ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–∑–æ–≤—ã –Ω–∞ cooldown –ø–µ—Ä–∏–æ–¥
  - HALF_OPEN: –ü—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º 1 –≤—ã–∑–æ–≤
  """

  def __init__(
      self,
      name: str,
      failure_threshold: int = 5,
      success_threshold: int = 2,
      timeout_seconds: int = 60,
      cooldown_seconds: int = 60,
  ):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Circuit Breaker.

    Args:
        name: –ò–º—è –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—è
        failure_threshold: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        success_threshold: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—Ö–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        timeout_seconds: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        cooldown_seconds: –ü–µ—Ä–∏–æ–¥ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
    """
    self.name = name
    self.failure_threshold = failure_threshold
    self.success_threshold = success_threshold
    self.timeout_seconds = timeout_seconds
    self.cooldown_seconds = cooldown_seconds

    # –°–æ—Å—Ç–æ—è–Ω–∏–µ
    self.state = CircuitState.CLOSED
    self.failure_count = 0
    self.success_count = 0
    self.last_failure_time: Optional[float] = None
    self.opened_at: Optional[datetime] = None

    logger.info(
      f"Circuit Breaker '{name}' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: "
      f"failure_threshold={failure_threshold}, "
      f"cooldown={cooldown_seconds}s"
    )

  def call(self, func: Callable, *args, **kwargs) -> Any:
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å.

    Args:
        func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞
        *args: –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        **kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã

    Returns:
        Any: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏

    Raises:
        CircuitBreakerError: –ï—Å–ª–∏ –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å —Å—Ä–∞–±–æ—Ç–∞–ª
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if self.state == CircuitState.OPEN:
      if self._should_attempt_reset():
        self._transition_to_half_open()
      else:
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–∑–æ–≤
        logger.warning(
          f"Circuit Breaker '{self.name}' OPEN, "
          f"–≤—ã–∑–æ–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        )
        raise CircuitBreakerError(
          f"Circuit breaker '{self.name}' is OPEN. "
          f"Too many failures, please wait."
        )

    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã–∑–æ–≤
    try:
      logger.debug(f"Circuit Breaker '{self.name}': –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞")
      result = func(*args, **kwargs)

      # –£—Å–ø–µ—Ö
      self._on_success()
      return result

    except Exception as e:
      # –û—à–∏–±–∫–∞
      self._on_failure()
      logger.error(
        f"Circuit Breaker '{self.name}' –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª –æ—à–∏–±–∫—É: {e}"
      )
      raise

  async def call_async(self, func: Callable, *args, **kwargs) -> Any:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤—ã–∑–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å.

    Args:
        func: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        *args: –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        **kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã

    Returns:
        Any: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if self.state == CircuitState.OPEN:
      if self._should_attempt_reset():
        self._transition_to_half_open()
      else:
        logger.warning(
          f"Circuit Breaker '{self.name}' OPEN, "
          f"–≤—ã–∑–æ–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        )
        raise CircuitBreakerError(
          f"Circuit breaker '{self.name}' is OPEN"
        )

    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã–∑–æ–≤
    try:
      logger.debug(f"Circuit Breaker '{self.name}': –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ async –≤—ã–∑–æ–≤–∞")
      result = await func(*args, **kwargs)

      # –£—Å–ø–µ—Ö
      self._on_success()
      return result

    except Exception as e:
      # –û—à–∏–±–∫–∞
      self._on_failure()
      logger.error(
        f"Circuit Breaker '{self.name}' –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª –æ—à–∏–±–∫—É: {e}"
      )
      raise

  def _on_success(self):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞."""
    self.failure_count = 0
    self.last_failure_time = None

    if self.state == CircuitState.HALF_OPEN:
      self.success_count += 1
      logger.debug(
        f"Circuit Breaker '{self.name}' HALF_OPEN: "
        f"—É—Å–ø–µ—Ö {self.success_count}/{self.success_threshold}"
      )

      if self.success_count >= self.success_threshold:
        self._transition_to_closed()

  def _on_failure(self):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≤—ã–∑–æ–≤–∞."""
    self.failure_count += 1
    self.last_failure_time = time.time()

    logger.warning(
      f"Circuit Breaker '{self.name}': "
      f"–æ—à–∏–±–∫–∞ {self.failure_count}/{self.failure_threshold}"
    )

    if self.failure_count >= self.failure_threshold:
      self._transition_to_open()

  def _transition_to_open(self):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ OPEN (—Å—Ä–∞–±–æ—Ç–∞–ª)."""
    if self.state != CircuitState.OPEN:
      self.state = CircuitState.OPEN
      self.opened_at = datetime.utcnow()

      logger.error(
        f"üî¥ Circuit Breaker '{self.name}' –û–¢–ö–†–´–¢! "
        f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫ ({self.failure_threshold}). "
        f"–í—ã–∑–æ–≤—ã –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è –Ω–∞ {self.cooldown_seconds}s"
      )

  def _transition_to_half_open(self):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ HALF_OPEN (–ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è)."""
    if self.state != CircuitState.HALF_OPEN:
      self.state = CircuitState.HALF_OPEN
      self.success_count = 0

      logger.info(
        f"üü° Circuit Breaker '{self.name}' -> HALF_OPEN. "
        f"–ü—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è..."
      )

  def _transition_to_closed(self):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CLOSED (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)."""
    if self.state != CircuitState.CLOSED:
      self.state = CircuitState.CLOSED
      self.failure_count = 0
      self.success_count = 0
      self.opened_at = None

      logger.info(
        f"üü¢ Circuit Breaker '{self.name}' -> CLOSED. "
        f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!"
      )

  def _should_attempt_reset(self) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è.

    Returns:
        bool: True –µ—Å–ª–∏ –ø—Ä–æ—à–µ–ª cooldown –ø–µ—Ä–∏–æ–¥
    """
    if not self.opened_at:
      return False

    elapsed = (datetime.utcnow() - self.opened_at).total_seconds()
    return elapsed >= self.cooldown_seconds

  def reset(self):
    """–†—É—á–Ω–æ–π —Å–±—Ä–æ—Å –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—è."""
    logger.info(f"Circuit Breaker '{self.name}' —Å–±—Ä–æ—à–µ–Ω –≤—Ä—É—á–Ω—É—é")
    self._transition_to_closed()

  def get_status(self) -> dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—è.

    Returns:
        dict: –°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—è
    """
    return {
      "name": self.name,
      "state": self.state.value,
      "failure_count": self.failure_count,
      "success_count": self.success_count,
      "failure_threshold": self.failure_threshold,
      "cooldown_seconds": self.cooldown_seconds,
      "opened_at": self.opened_at.isoformat() if self.opened_at else None,
    }


class CircuitBreakerManager:
  """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ Circuit Breakers."""

  def __init__(self):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
    self.breakers: dict[str, CircuitBreaker] = {}
    logger.info("Circuit Breaker Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

  def get_breaker(
      self,
      name: str,
      failure_threshold: int = 5,
      cooldown_seconds: int = 60,
  ) -> CircuitBreaker:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ Circuit Breaker.

    Args:
        name: –ò–º—è –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—è
        failure_threshold: –ü–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫
        cooldown_seconds: –ü–µ—Ä–∏–æ–¥ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è

    Returns:
        CircuitBreaker: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—è
    """
    if name not in self.breakers:
      self.breakers[name] = CircuitBreaker(
        name=name,
        failure_threshold=failure_threshold,
        cooldown_seconds=cooldown_seconds,
      )
      logger.debug(f"–°–æ–∑–¥–∞–Ω Circuit Breaker: {name}")

    return self.breakers[name]

  def get_all_status(self) -> dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª–µ–π.

    Returns:
        dict: –°—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª–µ–π
    """
    return {
      name: breaker.get_status()
      for name, breaker in self.breakers.items()
    }

  def reset_all(self):
    """–°–±—Ä–æ—Å –≤—Å–µ—Ö –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª–µ–π."""
    for breaker in self.breakers.values():
      breaker.reset()
    logger.info("–í—Å–µ Circuit Breakers —Å–±—Ä–æ—à–µ–Ω—ã")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
circuit_breaker_manager = CircuitBreakerManager()