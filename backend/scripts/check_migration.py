"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –¢–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ –ë–î
2. –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã layering_patterns
3. –°—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
4. –ò–Ω–¥–µ–∫—Å—ã
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ path
sys.path.insert(0, str(Path(__file__).parent.parent))

from backend.database.connection import db_manager
from sqlalchemy import text
from backend.core.logger import get_logger

logger = get_logger(__name__)


async def check_migration_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π."""

    print("=" * 80)
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ú–ò–ì–†–ê–¶–ò–ô")
    print("=" * 80)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        print("\n1Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...")
        await db_manager.initialize()
        print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")

        async with db_manager.session() as session:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: Alembic version
            print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ Alembic...")
            try:
                result = await session.execute(
                    text("SELECT version_num FROM alembic_version")
                )
                current_version = result.scalar()
                print(f"   ‚úÖ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {current_version}")

                # –û–∂–∏–¥–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è
                expected = "003_add_layering_patterns"
                if current_version == expected:
                    print(f"   üéâ –ú–∏–≥—Ä–∞—Ü–∏—è {expected} –ü–†–ò–ú–ï–ù–ï–ù–ê!")
                elif current_version and int(current_version.split('_')[0]) >= 3:
                    print(f"   ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ (–≤–µ—Ä—Å–∏—è >= 003)")
                else:
                    print(f"   ‚ö†Ô∏è  –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {current_version}, –æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected}")
                    print(f"   üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: alembic upgrade head")
            except Exception as e:
                print(f"   ‚ùå –¢–∞–±–ª–∏—Ü–∞ alembic_version –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {e}")
                print(f"   üí° –í–æ–∑–º–æ–∂–Ω–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—â–µ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–ª–∏—Å—å")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –¢–∞–±–ª–∏—Ü–∞ layering_patterns
            print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã layering_patterns...")
            result = await session.execute(text(
                """SELECT EXISTS (
                    SELECT FROM information_schema.tables
                    WHERE table_schema = 'public'
                    AND table_name = 'layering_patterns'
                )"""
            ))
            table_exists = result.scalar()

            if table_exists:
                print("   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ layering_patterns —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã...")
                result = await session.execute(text(
                    """SELECT column_name, data_type, is_nullable
                    FROM information_schema.columns
                    WHERE table_name = 'layering_patterns'
                    ORDER BY ordinal_position"""
                ))
                columns = result.fetchall()
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(columns)} –∫–æ–ª–æ–Ω–æ–∫:")

                key_columns = [
                    'id', 'pattern_id', 'fingerprint_hash',
                    'avg_layer_count', 'avg_cancellation_rate',
                    'blacklist', 'risk_level'
                ]

                for col in columns:
                    col_name = col[0]
                    if col_name in key_columns:
                        nullable = "NULL" if col[2] == "YES" else "NOT NULL"
                        print(f"      - {col_name}: {col[1]} ({nullable})")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ò–Ω–¥–µ–∫—Å—ã
                print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤...")
                result = await session.execute(text(
                    """SELECT indexname
                    FROM pg_indexes
                    WHERE tablename = 'layering_patterns'
                    ORDER BY indexname"""
                ))
                indexes = result.fetchall()
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(indexes)} –∏–Ω–¥–µ–∫—Å–æ–≤:")
                for idx in indexes:
                    print(f"      - {idx[0]}")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                print("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
                result = await session.execute(
                    text("SELECT COUNT(*) FROM layering_patterns")
                )
                count = result.scalar()
                print(f"   ‚ÑπÔ∏è  –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {count}")

                if count > 0:
                    # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã
                    result = await session.execute(text(
                        """SELECT pattern_id, occurrence_count, blacklist, risk_level
                        FROM layering_patterns
                        ORDER BY occurrence_count DESC
                        LIMIT 3"""
                    ))
                    patterns = result.fetchall()
                    print(f"\n   üìä –¢–æ–ø-3 –ø–∞—Ç—Ç–µ—Ä–Ω–∞:")
                    for p in patterns:
                        print(f"      - ID: {p[0][:12]}..., occurrences: {p[1]}, "
                              f"blacklist: {p[2]}, risk: {p[3]}")

            else:
                print("   ‚ùå –¢–∞–±–ª–∏—Ü–∞ layering_patterns –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢")
                print("\n   üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print("      1. –ú–∏–≥—Ä–∞—Ü–∏—è –µ—â–µ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
                print("      2. PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞")
                print("      3. –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏")
                print("\n   üîß –†–µ—à–µ–Ω–∏–µ:")
                print("      cd backend")
                print("      alembic upgrade head")

        await db_manager.close()

        print("\n" + "=" * 80)
        print("‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        print("=" * 80)

    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        print("\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
        print("   1. PostgreSQL –∑–∞–ø—É—â–µ–Ω")
        print("   2. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ DATABASE_URL –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –≤ .env")
        print("   3. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(check_migration_status())
