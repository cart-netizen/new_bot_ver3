#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±—ç–∫–µ–Ω–¥–∞.
–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python diagnose_backend.py
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

print("=" * 80)
print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–≠–ö–ï–ù–î–ê")
print("=" * 80)


async def main():
  issues = []

  # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
  print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞...")
  from dotenv import load_dotenv, find_dotenv
  import os

  env_path = find_dotenv()
  if env_path:
    print(f"   ‚úÖ .env –Ω–∞–π–¥–µ–Ω: {env_path}")
    load_dotenv()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    critical_vars = {
      "SECRET_KEY": os.getenv("SECRET_KEY", ""),
      "APP_PASSWORD": os.getenv("APP_PASSWORD", ""),
      "BYBIT_MODE": os.getenv("BYBIT_MODE", ""),
      "BYBIT_API_KEY": os.getenv("BYBIT_API_KEY", ""),
      "BYBIT_API_SECRET": os.getenv("BYBIT_API_SECRET", ""),
    }

    for var, value in critical_vars.items():
      if not value:
        print(f"   ‚ùå {var}: –ù–ï –ó–ê–î–ê–ù–û")
        issues.append(f"{var} –Ω–µ –∑–∞–¥–∞–Ω–æ –≤ .env")
      else:
        display = f"{value[:10]}...{value[-4:]}" if len(value) > 14 else "***"
        if "KEY" in var or "SECRET" in var or "PASSWORD" in var:
          print(f"   ‚úÖ {var}: {display}")
        else:
          print(f"   ‚úÖ {var}: {value}")
  else:
    print("   ‚ùå .env —Ñ–∞–π–ª –ù–ï –Ω–∞–π–¥–µ–Ω!")
    issues.append(".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return issues

  # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ config
  print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ config.py...")
  try:
    from config import settings
    print(f"   ‚úÖ Config –∑–∞–≥—Ä—É–∂–µ–Ω")
    print(f"   –†–µ–∂–∏–º Bybit: {settings.BYBIT_MODE}")
    print(f"   –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã: {settings.TRADING_PAIRS}")
    print(f"   API Host: {settings.API_HOST}:{settings.API_PORT}")
  except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config: {e}")
    issues.append(f"–û—à–∏–±–∫–∞ config: {e}")
    return issues

  # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ REST –∫–ª–∏–µ–Ω—Ç–∞
  print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ REST –∫–ª–∏–µ–Ω—Ç–∞...")
  try:
    from exchange.rest_client import rest_client

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    if not rest_client.api_key or not rest_client.api_secret:
      print(f"   ‚ö†Ô∏è  REST –∫–ª–∏–µ–Ω—Ç –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (API –∫–ª—é—á–∏ –ø—É—Å—Ç—ã–µ)")
      print(f"   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ API –∫–ª—é—á–∏")
      print(f"   –°—Ç—Ä–∞–Ω–∏—Ü–∞ Account —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç")
    else:
      print(f"   ‚úÖ REST –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

      # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
      try:
        await rest_client.initialize()
        server_time = await rest_client.get_server_time()
        print(f"   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {server_time}")
      except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit: {e}")
        issues.append(f"Bybit –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {e}")
  except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ REST –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    issues.append(f"REST –∫–ª–∏–µ–Ω—Ç: {e}")

  # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ BotController
  print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ BotController...")
  try:
    from main import bot_controller

    if bot_controller is None:
      print(f"   ‚ö†Ô∏è  bot_controller = None (–±—ç–∫–µ–Ω–¥ –Ω–µ –∑–∞–ø—É—â–µ–Ω)")
      print(f"   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
      issues.append("bot_controller –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    else:
      print(f"   ‚úÖ BotController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
      print(f"   –°—Ç–∞—Ç—É—Å: {bot_controller.status}")

      if bot_controller.status.value != "running":
        print(f"   ‚ö†Ô∏è  –ë–æ—Ç –ù–ï –∑–∞–ø—É—â–µ–Ω")
        print(f"   –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ UI –∏–ª–∏ API")
  except ImportError:
    print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å main.py")
    print(f"   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ –±—ç–∫–µ–Ω–¥ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
  except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ BotController: {e}")

  # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket manager
  print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket...")
  try:
    from api.websocket import manager as ws_manager

    stats = ws_manager.get_stats()
    print(f"   ‚úÖ WebSocket manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    print(f"   –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {stats['total_connections']}")
    print(f"   –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats['authenticated_connections']}")

    if stats['total_connections'] == 0:
      print(f"   ‚ö†Ô∏è  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
      print(f"   –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:5173")
  except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞ WebSocket manager: {e}")
    issues.append(f"WebSocket: {e}")

  # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ Balance Tracker
  print("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Balance Tracker...")
  try:
    from utils.balance_tracker import balance_tracker

    print(f"   ‚úÖ Balance Tracker –∑–∞–≥—Ä—É–∂–µ–Ω")
    print(f"   –ó–∞–ø—É—â–µ–Ω: {balance_tracker.is_running}")

    history = balance_tracker.get_history("24h")
    print(f"   –ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(history)}")

    if len(history) == 0:
      print(f"   ‚ö†Ô∏è  –ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø—É—Å—Ç–∞—è")
      print(f"   –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1-2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞")
  except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞ Balance Tracker: {e}")
    issues.append(f"Balance Tracker: {e}")

  return issues


# –ó–∞–ø—É—Å–∫
try:
  issues = asyncio.run(main())

  # –ò—Ç–æ–≥–∏
  print("\n" + "=" * 80)
  print("üìä –ò–¢–û–ì–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
  print("=" * 80)

  if not issues:
    print("\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
    print("\n–ï—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤—Å–µ –µ—â–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç '–û—Ç–∫–ª—é—á–µ–Ω–æ':")
    print("  1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥: npm run dev")
    print("  2. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ (Ctrl+F5)")
    print("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12)")
  else:
    print(f"\n‚ùå –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(issues)}")
    for i, issue in enumerate(issues, 1):
      print(f"  {i}. {issue}")

    print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")

    if any("API –∫–ª—é—á–∏" in issue or "BYBIT_API_KEY" in issue for issue in issues):
      print("\n  üìù –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –≤ .env:")
      print("     BYBIT_API_KEY=–≤–∞—à_–∫–ª—é—á")
      print("     BYBIT_API_SECRET=–≤–∞—à_—Å–µ–∫—Ä–µ—Ç")

    if any(".env" in issue for issue in issues):
      print("\n  üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env:")
      print("     cp .env.example .env")

    if any("bot_controller" in issue for issue in issues):
      print("\n  üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±—ç–∫–µ–Ω–¥:")
      print("     python main.py")

    if any("WebSocket" in issue for issue in issues):
      print("\n  üåê –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥:")
      print("     http://localhost:5173")

  print("\n" + "=" * 80)

except KeyboardInterrupt:
  print("\n\n‚ö†Ô∏è  –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
except Exception as e:
  print(f"\n\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
  import traceback

  traceback.print_exc()