"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π ExecutionManager —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π open_position/close_position.

–ö–õ–Æ–ß–ï–í–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ balance_tracker
2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ PositionStateMachine
3. _execute_signal –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å open_position
"""

import asyncio
from decimal import Decimal
from typing import Optional, Dict, List
from collections import deque

from config import settings
from core.logger import get_logger
from core.exceptions import ExecutionError, OrderExecutionError
from core.trace_context import trace_operation
from database.models import AuditAction, OrderStatus, PositionStatus
from domain.services.fsm_registry import fsm_registry
from domain.services.idempotency_service import idempotency_service
from domain.state_machines.order_fsm import OrderStateMachine
from domain.state_machines.position_fsm import PositionStateMachine
from infrastructure.repositories.audit_repository import audit_repository
from infrastructure.repositories.order_repository import order_repository
from infrastructure.repositories.position_repository import position_repository
from infrastructure.resilience.circuit_breaker import circuit_breaker_manager
from infrastructure.resilience.rate_limiter import rate_limited
from models.signal import TradingSignal, SignalType
from models.market_data import OrderSide, OrderType, TimeInForce
from exchange.rest_client import rest_client
from strategy.risk_manager import RiskManager
from strategy.risk_models import MarketRegime
from strategy.signal_deduplicator import signal_deduplicator
from strategy.sltp_calculator import sltp_calculator
from utils.balance_tracker import balance_tracker
from utils.helpers import get_timestamp_ms, round_price, round_quantity

logger = get_logger(__name__)


class ExecutionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ —Å –ø–æ–ª–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏—è–º–∏."""

    def __init__(self, risk_manager: RiskManager):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è.

        Args:
            risk_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∏—Å–∫–æ–≤
        """
        self.risk_manager = risk_manager
        self.rest_client = rest_client

        # –û—á–µ—Ä–µ–¥—å —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        self.signal_queue: asyncio.Queue = asyncio.Queue()

        # –ò—Å—Ç–æ—Ä–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        self.execution_history: deque = deque(maxlen=1000)

        # –ö–µ—à –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
        self.instruments_cache: Dict[str, dict] = {}
        self.cache_ttl = 3600  # 1 —á–∞—Å

        # –§–ª–∞–≥ —Ä–∞–±–æ—Ç—ã
        self.is_running = False
        self.execution_task: Optional[asyncio.Task] = None

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_signals": 0,
            "executed_orders": 0,
            "rejected_orders": 0,
            "failed_orders": 0,
        }

        # Circuit breakers –¥–ª—è API
        self.order_breaker = circuit_breaker_manager.get_breaker(
            name="order_placement",
            failure_threshold=5,
            cooldown_seconds=60
        )

        logger.info("ExecutionManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ø–æ–∑–∏—Ü–∏–π")

    # ==================== –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ ====================

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è."""
        if self.is_running:
            logger.warning("–ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self.is_running = True
        logger.info("–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
        self.execution_task = asyncio.create_task(self._process_queue())

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è."""
        if not self.is_running:
            logger.warning("–ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return

        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è")
        self.is_running = False

        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if self.execution_task and not self.execution_task.done():
            self.execution_task.cancel()
            try:
                await self.execution_task
            except asyncio.CancelledError:
                pass

    async def submit_signal(self, signal: TradingSignal):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ.

        Args:
            signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        """
        await self.signal_queue.put(signal)
        self.stats["total_signals"] += 1
        logger.debug(f"{signal.symbol} | –°–∏–≥–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è")

    async def _sync_positions_with_exchange(self):
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –Ω–∞ –±–∏—Ä–∂–µ.

        –ö—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞:
        - –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –±–∏—Ä–∂—É
        - –ü—Ä–æ–∏–∑–æ—à–µ–ª —Ä–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞
        - WebSocket –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Å–æ–±—ã—Ç–∏–µ
        """
        try:
            logger.debug("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–µ–π...")

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏
            response = await rest_client.get_positions()

            # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.debug(f"üîç –¢–∏–ø –æ—Ç–≤–µ—Ç–∞ –æ—Ç get_positions: {type(response)}")
            logger.debug(f"üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {response}")

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Bybit API
            # Bybit API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {"result": {"list": [...]}}
            if not response:
                logger.debug("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –±–∏—Ä–∂–µ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)")
                exchange_positions = []
            elif isinstance(response, dict):
                # –ï—Å–ª–∏ response —ç—Ç–æ dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                result = response.get("result", {})
                if isinstance(result, dict):
                    exchange_positions = result.get("list", [])
                elif isinstance(result, list):
                    exchange_positions = result
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç result: {type(result)}")
                    exchange_positions = []
            elif isinstance(response, list):
                # –ï—Å–ª–∏ response —É–∂–µ —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π
                exchange_positions = response
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(response)}")
                exchange_positions = []

            # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
            logger.debug(f"üìä –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(exchange_positions)}")

            if not exchange_positions:
                logger.debug("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –±–∏—Ä–∂–µ")
                # –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–µ–π—Ç –µ—Å–ª–∏ –Ω–∞ –±–∏—Ä–∂–µ –ø—É—Å—Ç–æ
                if self.risk_manager.open_positions:
                    logger.warning(
                        f"‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–æ {len(self.risk_manager.open_positions)} –ø–æ–∑–∏—Ü–∏–π, "
                        f"–Ω–∞ –±–∏—Ä–∂–µ 0 ‚Üí –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–µ–π—Ç"
                    )
                    self.risk_manager.open_positions.clear()
                    self.risk_manager.metrics.open_positions_count = 0
                    self.risk_manager.metrics.total_exposure_usdt = 0.0
                return

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤
            exchange_symbols = set()

            for pos in exchange_positions:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ pos —ç—Ç–æ dict
                if not isinstance(pos, dict):
                    logger.warning(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –Ω–µ dict: {type(pos)} = {pos}")
                    continue

                symbol = pos.get("symbol")
                size = pos.get("size", "0")

                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ size –≤ float
                try:
                    size_float = float(size)
                except (ValueError, TypeError):
                    logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π size –¥–ª—è {symbol}: {size}")
                    continue

                if size_float > 0:
                    exchange_symbols.add(symbol)
                    logger.debug(f"  –ü–æ–∑–∏—Ü–∏—è –Ω–∞ –±–∏—Ä–∂–µ: {symbol}, size={size_float}")

            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–µ–π—Ç–∞
            local_symbols = set(self.risk_manager.open_positions.keys())

            logger.info(
                f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: –ª–æ–∫–∞–ª—å–Ω–æ={len(local_symbols)}, "
                f"–Ω–∞ –±–∏—Ä–∂–µ={len(exchange_symbols)}"
            )

            # –ù–∞—Ö–æ–¥–∏–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
            missing_locally = exchange_symbols - local_symbols  # –ù–∞ –±–∏—Ä–∂–µ –µ—Å—Ç—å, –ª–æ–∫–∞–ª—å–Ω–æ –Ω–µ—Ç
            missing_on_exchange = local_symbols - exchange_symbols  # –õ–æ–∫–∞–ª—å–Ω–æ –µ—Å—Ç—å, –Ω–∞ –±–∏—Ä–∂–µ –Ω–µ—Ç

            # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –Ω–∞ –±–∏—Ä–∂–µ
            for symbol in missing_on_exchange:
                logger.warning(
                    f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞ –Ω–∞ –±–∏—Ä–∂–µ, —É–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–µ–π—Ç–∞"
                )
                self.risk_manager.register_position_closed(symbol)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –Ω–∞ –±–∏—Ä–∂–µ –Ω–æ –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ
            for symbol in missing_locally:
                # –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                pos_data = next(
                    (p for p in exchange_positions
                     if isinstance(p, dict) and p.get("symbol") == symbol),
                    None
                )

                if pos_data:
                    try:
                        size = float(pos_data.get("size", 0))
                        entry_price = float(pos_data.get("avgPrice", 0))
                        side_str = pos_data.get("side", "Buy")

                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º side –≤ SignalType
                        side = SignalType.BUY if side_str == "Buy" else SignalType.SELL

                        logger.warning(
                            f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {symbol} –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –±–∏—Ä–∂–µ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–µ–π—Ç"
                        )

                        self.risk_manager.register_position_opened(
                            symbol=symbol,
                            side=side,
                            size_usdt=size * entry_price,
                            entry_price=entry_price,
                            leverage=10
                        )
                    except (ValueError, TypeError, KeyError) as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")

            logger.debug(
                f"‚úì –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: "
                f"–ª–æ–∫–∞–ª—å–Ω–æ={len(self.risk_manager.open_positions)}, "
                f"–Ω–∞ –±–∏—Ä–∂–µ={len(exchange_symbols)}"
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}", exc_info=True)
            # –ù–µ –ø–∞–¥–∞–µ–º, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å —Ç–µ–∫—É—â–∏–º —Å—Ç–µ–π—Ç–æ–º

    # ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–Ø–ú–ò ====================



    async def open_position(
        self,
        symbol: str,
        side: str,
        quantity: float,
        entry_price: float,
        stop_loss: Optional[float] = None,
        take_profit: Optional[float] = None,
        entry_signal: Optional[dict] = None,
        entry_market_data: Optional[dict] = None,
        entry_indicators: Optional[dict] = None,
        entry_reason: Optional[str] = None
    ) -> Optional[dict]:
        """
        –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –ø–æ–ª–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º.

        –ò–ó–ú–ï–ù–ï–ù–ò–Ø:
        1. –°–æ–∑–¥–∞–µ–º Position –ë–ï–ó metadata_json
        2. –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Order –∫ Position —á–µ—Ä–µ–∑ update_position_link()
        3. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º metadata_json —á–µ—Ä–µ–∑ update_metadata()

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            side: –°—Ç–æ—Ä–æ–Ω–∞ ("Buy" –∏–ª–∏ "Sell")
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            stop_loss: Stop Loss (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            take_profit: Take Profit (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            entry_signal: –°–∏–≥–Ω–∞–ª –Ω–∞ –≤—Ö–æ–¥
            entry_market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ
            entry_indicators: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ
            entry_reason: –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è

        Returns:
            Optional[dict]: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å position_id –∏ exchange_order_id –∏–ª–∏ None
        """
        with trace_operation("open_position", symbol=symbol, side=side):
            logger.info(
                f"‚Üí –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {symbol} {side} {quantity} @ {entry_price}"
            )

            position_id = None

            try:
                # ==========================================
                # –®–ê–ì 1: –†–ê–ó–ú–ï–©–ï–ù–ò–ï –û–†–î–ï–†–ê –ù–ê –ë–ò–†–ñ–ï
                # ==========================================
                logger.info(f"üì° –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ: {symbol} {side}")

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º client_order_id
                client_order_id = idempotency_service.generate_client_order_id(
                    symbol=symbol,
                    side=side,
                    quantity=quantity,
                    price=entry_price
                )

                logger.debug(f"Client Order ID: {client_order_id}")

                # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ
                logger.info(
                    f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã TP/SL –¥–ª—è {symbol}:\n"
                    f"  Entry Price:  {entry_price}\n"
                    f"  Stop Loss:    {stop_loss}\n"
                    f"  Take Profit:  {take_profit}"
                )


                try:
                    order_response = await rest_client.place_order(
                        symbol=symbol,
                        side=side,
                        order_type="Market",  # –∏–ª–∏ "Limit" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                        quantity=quantity,
                        price=entry_price if side == "Limit" else None,
                        stop_loss=stop_loss,  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
                        take_profit=take_profit,  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
                        client_order_id=client_order_id
                    )

                    result = order_response.get("result", {})
                    exchange_order_id = result.get("orderId")
                    order_link_id = result.get("orderLinkId")

                    logger.info(
                        f"‚úì –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ –° TP/SL:\n"
                        f"  Exchange Order ID: {result.get('orderId')}\n"
                        f"  Stop Loss:   {stop_loss}\n"
                        f"  Take Profit: {take_profit}"
                    )

                    if not exchange_order_id:
                        raise OrderExecutionError("Exchange –Ω–µ –≤–µ—Ä–Ω—É–ª orderId")

                    logger.info(
                        f"‚úì –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ:\n"
                        f"  Exchange Order ID: {exchange_order_id}\n"
                        f"  Order Link ID: {order_link_id}"
                    )

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ orderLinkId
                    if order_link_id != client_order_id:
                        logger.warning(
                            f"‚ö† orderLinkId –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å client_order_id!\n"
                            f"  –û–∂–∏–¥–∞–ª–æ—Å—å: {client_order_id}\n"
                            f"  –ü–æ–ª—É—á–µ–Ω–æ: {order_link_id}"
                        )

                except Exception as order_error:
                    logger.error(
                        f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ: {order_error}",
                        exc_info=True
                    )

                    # –ê—É–¥–∏—Ç –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                    await audit_repository.log(
                        action=AuditAction.POSITION_OPEN,
                        entity_type="Position",
                        entity_id="FAILED",
                        new_value={
                            "symbol": symbol,
                            "side": side,
                            "quantity": quantity,
                            "error": str(order_error)
                        },
                        reason=f"Failed to place order: {str(order_error)}",
                        success=False,
                        error_message=str(order_error)
                    )

                    return None

                # ==========================================
                # –®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –ü–û–ó–ò–¶–ò–ò –í –ë–î
                # ==========================================
                logger.info(f"üíæ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –ë–î –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")

                order_side = OrderSide.BUY if side == "Buy" else OrderSide.SELL

                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω metadata_json –∏–∑ create()
                position = await position_repository.create(
                    symbol=symbol,
                    side=order_side,
                    quantity=quantity,
                    entry_price=entry_price,
                    stop_loss=stop_loss,
                    take_profit=take_profit,
                    entry_signal=entry_signal,
                    entry_market_data=entry_market_data,
                    entry_indicators=entry_indicators,
                    entry_reason=entry_reason or f"{side} position opened"
                    # ‚ùå –£–ë–†–ê–ù–û: metadata_json –±–æ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∑–¥–µ—Å—å
                )

                position_id = str(position.id)

                logger.info(
                    f"‚úì –ü–æ–∑–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î: {position_id} | "
                    f"–°—Ç–∞—Ç—É—Å: {position.status.value}"
                )

                # ==========================================
                # –®–ê–ì 2.5: –°–û–ó–î–ê–ù–ò–ï ORDER –í –ë–î (–ù–û–í–û–ï!)
                # ==========================================
                logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ Order –≤ –ë–î")

                try:
                    order = await order_repository.create(
                        client_order_id=client_order_id,
                        symbol=symbol,
                        side=OrderSide.BUY if side == "Buy" else OrderSide.SELL,
                        order_type=OrderType.MARKET,  # –∏–ª–∏ LIMIT –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                        quantity=quantity,
                        price=entry_price,
                        signal_data=entry_signal,
                        market_data=entry_market_data,
                        indicators=entry_indicators,
                        reason=entry_reason or f"{side} market order",
                        position_id=position_id  # –°—Ä–∞–∑—É –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –ø–æ–∑–∏—Ü–∏–∏
                    )

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å Order –Ω–∞ PLACED (–æ—Ä–¥–µ—Ä —É–∂–µ –Ω–∞ –±–∏—Ä–∂–µ)
                    await order_repository.update_status(
                        client_order_id=client_order_id,
                        new_status=OrderStatus.PLACED,
                        exchange_order_id=exchange_order_id
                    )

                    logger.info(
                        f"‚úì Order —Å–æ–∑–¥–∞–Ω –≤ –ë–î: {client_order_id} | "
                        f"Exchange ID: {exchange_order_id}"
                    )

                except Exception as order_create_error:
                    logger.error(
                        f"‚ö† –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Order –≤ –ë–î: {order_create_error}",
                        exc_info=True
                    )
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Ç.–∫. –ø–æ–∑–∏—Ü–∏—è —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –±–∏—Ä–∂–µ

                # ==========================================
                # –®–ê–ì 3: –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–ò–í–Ø–ó–ö–ò (–ï–°–õ–ò –ù–£–ñ–ù–û)
                # ==========================================
                # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: Order —É–∂–µ —Å–æ–∑–¥–∞–Ω —Å position_id –≤ –®–∞–≥–µ 2.5
                # –≠—Ç–æ—Ç —à–∞–≥ –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω
                logger.debug(f"üîó Order —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Position –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏")

                # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏
                # link_success = await order_repository.update_position_link(
                #     client_order_id=client_order_id,
                #     position_id=position_id
                # )
                #
                # if not link_success:
                #     logger.warning(
                #         f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É Order {client_order_id} "
                #         f"–∫ Position {position_id}"
                #     )

                # ==========================================
                # –®–ê–ì 4: –û–ë–ù–û–í–õ–ï–ù–ò–ï METADATA (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û)
                # ==========================================
                logger.debug(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ metadata –ø–æ–∑–∏—Ü–∏–∏ (—Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)")

                # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                metadata_success = await position_repository.update_metadata(
                    position_id=position_id,
                    metadata={
                        "exchange_order_id": exchange_order_id,  # –°–ø—Ä–∞–≤–æ—á–Ω–æ
                        "client_order_id": client_order_id,  # –°–ø—Ä–∞–≤–æ—á–Ω–æ
                        "order_placed_at": get_timestamp_ms(),
                        "order_link_id": order_link_id
                    }
                )

                if not metadata_success:
                    logger.warning(
                        f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å metadata –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {position_id}"
                    )
                else:
                    logger.debug(f"‚úì Metadata –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {position_id}")

                # ==========================================
                # –®–ê–ì 5: FSM –î–õ–Ø –ü–û–ó–ò–¶–ò–ò
                # ==========================================
                logger.info(f"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FSM –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏")

                # –°–æ–∑–¥–∞–µ–º FSM —Å –Ω–∞—á–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º OPENING
                position_fsm = PositionStateMachine(
                    position_id=position_id,
                    initial_state=PositionStatus.OPENING
                )

                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–µ—Å—Ç—Ä–µ
                fsm_registry.register_position_fsm(position_id, position_fsm)

                logger.debug(
                    f"‚úì FSM –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {position_id} | "
                    f"–°—Ç–∞—Ç—É—Å: {position_fsm.current_status.value}"
                )

                # –ü–µ—Ä–µ—Ö–æ–¥ OPENING -> OPEN —á–µ—Ä–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä
                position_fsm.confirm_open()  # type: ignore[attr-defined]

                await position_repository.update_status(
                    position_id=position_id,
                    new_status=PositionStatus.OPEN
                )

                logger.info(
                    f"‚úì –ü–æ–∑–∏—Ü–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ OPEN: {position_id} | "
                    f"FSM —Å—Ç–∞—Ç—É—Å: {position_fsm.current_status.value}"
                )

                # ==========================================
                # –®–ê–ì 6: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –í RISK MANAGER
                # ==========================================
                logger.info(f"üìä –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ RiskManager")

                position_size_usdt = quantity * entry_price

                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º str -> SignalType
                signal_type = SignalType.BUY if side == "Buy" else SignalType.SELL

                self.risk_manager.register_position_opened(
                    symbol=symbol,
                    side=signal_type,  # ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º SignalType –≤–º–µ—Å—Ç–æ str
                    size_usdt=position_size_usdt,
                    entry_price=entry_price,
                    leverage=10  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ—Ç–æ–¥–∞
                )

                logger.info(f"‚úì –ü–æ–∑–∏—Ü–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ RiskManager")

                # ==========================================
                # –®–ê–ì 7: –ê–£–î–ò–¢ –£–°–ü–ï–®–ù–û–ì–û –û–¢–ö–†–´–¢–ò–Ø
                # ==========================================
                await audit_repository.log(
                    action=AuditAction.POSITION_OPEN,
                    entity_type="Position",
                    entity_id=position_id,
                    new_value={
                        "symbol": symbol,
                        "side": side,
                        "quantity": quantity,
                        "entry_price": entry_price,
                        "exchange_order_id": exchange_order_id,
                        "position_size_usdt": position_size_usdt,
                        "entry_signal": entry_signal,
                        "entry_market_data": entry_market_data,
                        "entry_indicators": entry_indicators
                    },
                    reason=entry_reason or f"{side} position opened",
                    success=True
                )

                logger.info(
                    f"‚úì‚úì‚úì –ü–û–ó–ò–¶–ò–Ø –£–°–ü–ï–®–ù–û –û–¢–ö–†–´–¢–ê ‚úì‚úì‚úì\n"
                    f"  Position ID: {position_id}\n"
                    f"  Exchange Order ID: {exchange_order_id}\n"
                    f"  Symbol: {symbol}\n"
                    f"  Side: {side}\n"
                    f"  Entry Price: {entry_price}\n"
                    f"  Quantity: {quantity}\n"
                    f"  Size: {position_size_usdt:.2f} USDT"
                )

                return {
                    "position_id": position_id,
                    "exchange_order_id": exchange_order_id,
                    "client_order_id": client_order_id,
                    "status": "success"
                }

            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ open_position: {e}", exc_info=True)

                # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î, –Ω–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –¥–∞–ª–µ–µ - –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º
                if position_id:
                    try:
                        await position_repository.update_status(
                            position_id=position_id,
                            new_status=PositionStatus.FAILED
                        )
                        logger.warning(f"–ü–æ–∑–∏—Ü–∏—è {position_id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ FAILED")
                    except:
                        pass

                raise ExecutionError(f"Failed to open position: {str(e)}")

    async def close_position(
        self,
        position_id: str,
        exit_price: float,
        exit_signal: Optional[dict] = None,
        exit_market_data: Optional[dict] = None,
        exit_indicators: Optional[dict] = None,
        exit_reason: str = "Position closed"
    ) -> Optional[dict]:
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ FSM.

        Args:
            position_id: ID –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            exit_price: –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞
            exit_signal: –°–∏–≥–Ω–∞–ª –Ω–∞ –≤—ã—Ö–æ–¥
            exit_market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
            exit_indicators: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
            exit_reason: –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è

        Returns:
            Optional[dict]: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å realized_pnl –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        with trace_operation("close_position", position_id=position_id):
            logger.info(f"‚Üí –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {position_id} @ {exit_price}")

            try:
                # 1. –ü–û–õ–£–ß–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò –ò–ó –ë–î
                position = await position_repository.get_by_id(position_id)

                if not position:
                    logger.error(f"–ü–æ–∑–∏—Ü–∏—è {position_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
                    return None

                symbol = position.symbol

                # 2. –ü–û–õ–£–ß–ï–ù–ò–ï –ò–õ–ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï FSM
                position_fsm = fsm_registry.get_position_fsm(position_id)

                if not position_fsm:
                    logger.warning(
                        f"FSM –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {position_id}, "
                        f"–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –ë–î"
                    )

                    position_fsm = PositionStateMachine(
                        position_id=position_id,
                        initial_state=position.status
                    )

                    fsm_registry.register_position_fsm(position_id, position_fsm)

                    logger.info(
                        f"FSM –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {position_id} | "
                        f"–°—Ç–∞—Ç—É—Å: {position_fsm.current_status.value}"
                    )

                # 3. –í–ê–õ–ò–î–ê–¶–ò–Ø –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ó–ê–ö–†–´–¢–ò–Ø
                if not position_fsm.can_transition_to(PositionStatus.CLOSING):
                    logger.error(
                        f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é {position_id} | "
                        f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {position_fsm.current_status.value} | "
                        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã: {position_fsm.get_available_transitions()}"
                    )
                    return None

                logger.debug(f"‚úì –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—à–ª–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {position_id}")

                # 4. –î–í–£–•–®–ê–ì–û–í–û–ï –ó–ê–ö–†–´–¢–ò–ï –ß–ï–†–ï–ó FSM
                # –¢—Ä–∏–≥–≥–µ—Ä—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π transitions

                # –®–∞–≥ 1: OPEN -> CLOSING
                position_fsm.start_close()  # type: ignore[attr-defined]

                await position_repository.update_status(
                    position_id=position_id,
                    new_status=PositionStatus.CLOSING
                )

                logger.info(
                    f"‚úì –ü–æ–∑–∏—Ü–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ CLOSING: {position_id} | "
                    f"FSM —Å—Ç–∞—Ç—É—Å: {position_fsm.current_status.value}"
                )

                # –®–∞–≥ 2: CLOSING -> CLOSED
                position_fsm.confirm_close()  # type: ignore[attr-defined]

                await position_repository.update_status(
                    position_id=position_id,
                    new_status=PositionStatus.CLOSED,
                    exit_price=exit_price,
                    exit_signal=exit_signal,
                    exit_market_data=exit_market_data,
                    exit_indicators=exit_indicators,
                    exit_reason=exit_reason
                )

                logger.info(
                    f"‚úì –ü–æ–∑–∏—Ü–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ CLOSED: {position_id} | "
                    f"FSM —Å—Ç–∞—Ç—É—Å: {position_fsm.current_status.value}"
                )

                # 5. –†–ê–°–ß–ï–¢ REALIZED PNL
                if position.side == OrderSide.BUY:
                    realized_pnl = (exit_price - position.entry_price) * position.quantity
                else:
                    realized_pnl = (position.entry_price - exit_price) * position.quantity

                logger.info(f"üí∞ Realized PnL: {realized_pnl:.2f} USDT")

                is_win = realized_pnl > 0
                # ===== –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è Adaptive Risk =====
                self.risk_manager.record_trade_result(
                    is_win=is_win,
                    pnl=realized_pnl
                )

                logger.info(
                    f"{position.symbol} | Trade result recorded: "
                    f"win={is_win}, pnl={realized_pnl:.2f} USDT"
                )


                # 6. –£–î–ê–õ–ï–ù–ò–ï –ò–ó RISK MANAGER
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç realized_pnl
                self.risk_manager.register_position_closed(symbol=symbol)

                # 7. –ê–£–î–ò–¢
                await audit_repository.log(
                    action=AuditAction.POSITION_CLOSE,
                    entity_type="Position",
                    entity_id=position_id,
                    new_value={
                        "exit_price": exit_price,
                        "realized_pnl": realized_pnl,
                        "exit_reason": exit_reason
                    },
                    success=True
                )

                logger.info(f"‚úì‚úì‚úì –ü–û–ó–ò–¶–ò–Ø –£–°–ü–ï–®–ù–û –ó–ê–ö–†–´–¢–ê ‚úì‚úì‚úì")

                return {
                    "position_id": position_id,
                    "realized_pnl": realized_pnl,
                    "status": "success"
                }

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}", exc_info=True)
                return None

    # ==================== –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ ====================

    async def _process_queue(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–∏–≥–Ω–∞–ª–æ–≤."""
        logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è")

        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try:
                    signal = await asyncio.wait_for(
                        self.signal_queue.get(),
                        timeout=1.0
                    )
                except asyncio.TimeoutError:
                    continue

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª
                await self._execute_signal(signal)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
                await asyncio.sleep(1)

    async def _execute_signal(self, signal: TradingSignal):
        """
        –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞.

        –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
        1. ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: SL/TP ‚Üí Position Size
        2. –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ quantity
        3. –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞
        4. –£–ª—É—á—à–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞—Å—á–µ—Ç–æ–≤

        Args:
            signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        """
        # ============================================
        # –®–ê–ì 0.0: –ü–†–û–í–ï–†–ö–ê –õ–ò–ú–ò–¢–ê –ü–û–ó–ò–¶–ò–ô
        # ============================================
        await self._sync_positions_with_exchange()

        current_positions = self.risk_manager.metrics.open_positions_count
        max_positions = self.risk_manager.limits.max_open_positions

        if current_positions >= max_positions:
            logger.warning(
                f"üõë CIRCUIT BREAKER: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π {current_positions}/{max_positions}. "
                f"–°–∏–≥–Ω–∞–ª {signal.symbol} –æ—Ç–∫–ª–æ–Ω—ë–Ω."
            )
            self.stats["rejected_orders"] += 1
            return

        if signal.symbol in self.risk_manager.open_positions:
            logger.warning(
                f"‚ö†Ô∏è CIRCUIT BREAKER: –ü–æ –ø–∞—Ä–µ {signal.symbol} —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è. –°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω."
            )
            self.stats["rejected_orders"] += 1
            return

        # ==========================================
        # –®–ê–ì 0.1: –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–Ø –°–ò–ì–ù–ê–õ–ê
        # ==========================================
        should_process, block_reason = signal_deduplicator.should_process_signal(signal)

        if not should_process:
            logger.info(
                f"{signal.symbol} | ‚è≠Ô∏è –°–∏–≥–Ω–∞–ª –ø—Ä–æ–ø—É—â–µ–Ω (–¥—É–±–ª–∏–∫–∞—Ç): {block_reason}"
            )
            self.stats["rejected_orders"] += 1
            return

        logger.info(
            f"{signal.symbol} | –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞: {signal.signal_type.value} @ {signal.price:.8f}"
        )

        try:
            # ==========================================
            # –®–ê–ì 1: –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û–ë –ò–ù–°–¢–†–£–ú–ï–ù–¢–ï
            # ==========================================
            instrument_info = await self._get_instrument_info(signal.symbol)

            if not instrument_info:
                error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ {signal.symbol}"
                logger.error(f"{signal.symbol} | {error_msg}")
                self.stats["failed_orders"] += 1
                return

            # ==========================================
            # –®–ê–ì 2: –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê
            # ==========================================
            available_balance = balance_tracker.get_current_balance()

            if available_balance is None or available_balance <= 0:
                error_msg = (
                    f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ë–∞–ª–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {signal.symbol}. "
                    f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é."
                )
                logger.error(error_msg)
                self.stats["failed_orders"] += 1
                return

            logger.info(
                f"{signal.symbol} | –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {available_balance:.2f} USDT"
            )

            # ==========================================
            # –®–ê–ì 3: –í–ê–õ–ò–î–ê–¶–ò–Ø SIGNAL_TYPE –ò –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï SIDE
            # ==========================================
            # HOLD —Å–∏–≥–Ω–∞–ª—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            if signal.signal_type == SignalType.HOLD:
                logger.info(
                    f"{signal.symbol} | HOLD —Å–∏–≥–Ω–∞–ª - –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"
                )
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ç–∏–ø–æ–≤
            if signal.signal_type not in [SignalType.BUY, SignalType.SELL]:
                logger.warning(
                    f"{signal.symbol} | –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π signal_type: {signal.signal_type}, "
                    f"–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"
                )
                self.stats["rejected_orders"] += 1
                return

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ side –¥–ª—è API –±–∏—Ä–∂–∏
            if signal.signal_type == SignalType.BUY:
                side = "Buy"
            elif signal.signal_type == SignalType.SELL:
                side = "Sell"
            else:
                # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∏–∑-–∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã—à–µ
                logger.error(f"{signal.symbol} | –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π signal_type")
                self.stats["failed_orders"] += 1
                return

            logger.debug(f"{signal.symbol} | Side: {side}")

            # ==========================================
            # –®–ê–ì 4: –†–ê–°–ß–ï–¢ STOP LOSS –ò TAKE PROFIT
            # ==========================================
            # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º SL/TP –ü–ï–†–ï–î —Ä–∞—Å—á–µ—Ç–æ–º —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏!

            try:
                # 4.1 –ü–æ–ª—É—á–∞–µ–º ATR –∏–∑ metadata —Å–∏–≥–Ω–∞–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                atr = signal.metadata.get('atr') if signal.metadata else None

                if atr:
                    logger.debug(f"{signal.symbol} | ATR –¥–æ—Å—Ç—É–ø–µ–Ω: {atr:.2f}")

                # 4.2 –ü–æ–ª—É—á–∞–µ–º ML result (–µ—Å–ª–∏ –µ—Å—Ç—å ML validation)
                ml_sltp_data = None
                if hasattr(signal, 'ml_validation_result') and signal.ml_validation_result:
                    ml_result = signal.ml_validation_result
                    ml_sltp_data = {
                        'predicted_mae': ml_result.metadata.get('predicted_mae', 0.012),
                        'predicted_return': ml_result.predicted_return,
                        'confidence': ml_result.confidence
                    }
                    logger.debug(
                        f"{signal.symbol} | ML –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã: "
                        f"mae={ml_sltp_data['predicted_mae']:.4f}, "
                        f"return={ml_sltp_data['predicted_return']:.4f}"
                    )

                # 4.3 –ü–æ–ª—É—á–∞–µ–º market regime (–µ—Å–ª–∏ –µ—Å—Ç—å)
                market_regime_str = signal.metadata.get('market_regime') if signal.metadata else None
                market_regime = None

                if market_regime_str:
                    try:
                        if isinstance(market_regime_str, str):
                            market_regime = MarketRegime(market_regime_str)
                        else:
                            market_regime = market_regime_str

                        logger.debug(
                            f"{signal.symbol} | Market regime: {market_regime.value}"
                        )
                    except (ValueError, AttributeError) as e:
                        logger.warning(
                            f"{signal.symbol} | –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å market_regime: {e}"
                        )

                # 4.4 –†–∞—Å—á–µ—Ç SL/TP —á–µ—Ä–µ–∑ UnifiedSLTPCalculator
                entry_price = signal.price

                logger.info(
                    f"{signal.symbol} | –†–∞—Å—á–µ—Ç SL/TP: "
                    f"entry=${entry_price:.2f}, "
                    f"has_ml={ml_sltp_data is not None}, "
                    f"has_atr={atr is not None}, "
                    f"has_regime={market_regime is not None}"
                )

                sltp_calc = sltp_calculator.calculate(
                    signal=signal,
                    entry_price=entry_price,
                    ml_result=ml_sltp_data,
                    atr=atr,
                    market_regime=market_regime
                )

                # 4.5 –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                stop_loss = sltp_calc.stop_loss
                take_profit = sltp_calc.take_profit

                logger.info(
                    f"{signal.symbol} | SL/TP —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã: "
                    f"method={sltp_calc.calculation_method}, "
                    f"SL=${stop_loss:.2f}, "
                    f"TP=${take_profit:.2f}, "
                    f"R/R={sltp_calc.risk_reward_ratio:.2f}"
                )

                # 4.6 –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                if side == "Buy":
                    if stop_loss >= entry_price:
                        logger.error(
                            f"{signal.symbol} | –û–®–ò–ë–ö–ê: SL –¥–ª—è long –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å < entry! "
                            f"SL={stop_loss:.2f}, entry={entry_price:.2f}"
                        )
                        self.stats["failed_orders"] += 1
                        return

                    if take_profit <= entry_price:
                        logger.error(
                            f"{signal.symbol} | –û–®–ò–ë–ö–ê: TP –¥–ª—è long –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > entry! "
                            f"TP={take_profit:.2f}, entry={entry_price:.2f}"
                        )
                        self.stats["failed_orders"] += 1
                        return

                else:  # side == "Sell"
                    if stop_loss <= entry_price:
                        logger.error(
                            f"{signal.symbol} | –û–®–ò–ë–ö–ê: SL –¥–ª—è short –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > entry! "
                            f"SL={stop_loss:.2f}, entry={entry_price:.2f}"
                        )
                        self.stats["failed_orders"] += 1
                        return

                    if take_profit >= entry_price:
                        logger.error(
                            f"{signal.symbol} | –û–®–ò–ë–ö–ê: TP –¥–ª—è short –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å < entry! "
                            f"TP={take_profit:.2f}, entry={entry_price:.2f}"
                        )
                        self.stats["failed_orders"] += 1
                        return

                logger.debug(f"{signal.symbol} | SL/TP validation passed ‚úì")

            except Exception as e:
                logger.error(
                    f"{signal.symbol} | –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ SL/TP: {e}",
                    exc_info=True
                )
                self.stats["failed_orders"] += 1
                return

            # ==========================================
            # –®–ê–ì 5: –†–ê–°–ß–ï–¢ –†–ê–ó–ú–ï–†–ê –ü–û–ó–ò–¶–ò–ò
            # ==========================================
            # ‚úÖ –¢–ï–ü–ï–†–¨ stop_loss –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ!

            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å ATR)
                current_volatility = None
                if atr:
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ATR –∫ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º
                    current_volatility = atr / entry_price

                # –ü–æ–ª—É—á–∞–µ–º ML confidence (–µ—Å–ª–∏ –µ—Å—Ç—å)
                ml_confidence = None
                if ml_sltp_data:
                    ml_confidence = ml_sltp_data.get('confidence')

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å Adaptive Risk
                raw_position_size_usdt = self.risk_manager.calculate_position_size(
                    signal=signal,
                    available_balance=available_balance,
                    stop_loss_price=stop_loss,  # ‚úÖ –¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!
                    leverage=self.risk_manager.limits.default_leverage,
                    current_volatility=current_volatility,
                    ml_confidence=ml_confidence
                )

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º quantity –∏–∑ position_size
                raw_quantity = raw_position_size_usdt / entry_price

                logger.info(
                    f"{signal.symbol} | –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏: "
                    f"–±–∞–ª–∞–Ω—Å={available_balance:.2f} USDT, "
                    f"leverage={self.risk_manager.limits.default_leverage}x, "
                    f"—Ä–∞–∑–º–µ—Ä={raw_position_size_usdt:.2f} USDT, "
                    f"raw_quantity={raw_quantity:.8f}"
                )

            except Exception as e:
                logger.error(
                    f"{signal.symbol} | –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}",
                    exc_info=True
                )
                self.stats["failed_orders"] += 1
                return

            # ==========================================
            # –®–ê–ì 6: –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –û–ö–†–£–ì–õ–ï–ù–ò–ï QUANTITY
            # ==========================================
            validated_quantity = self._validate_and_round_quantity(
                symbol=signal.symbol,
                quantity=raw_quantity,
                price=entry_price,
                instrument_info=instrument_info
            )

            if validated_quantity is None:
                error_msg = (
                    f"Quantity {raw_quantity:.8f} –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é. "
                    f"–û—Ä–¥–µ—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω."
                )
                logger.error(f"{signal.symbol} | {error_msg}")
                self.stats["failed_orders"] += 1
                return

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ notional value
            final_notional = validated_quantity * entry_price
            min_notional = instrument_info["minNotionalValue"]

            if final_notional < min_notional:
                error_msg = (
                    f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ {final_notional:.2f} USDT < –º–∏–Ω–∏–º—É–º–∞ {min_notional} USDT. "
                    f"–û—Ä–¥–µ—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞)."
                )
                logger.error(f"{signal.symbol} | {error_msg}")
                self.stats["failed_orders"] += 1
                return

            logger.info(
                f"{signal.symbol} | ‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞: "
                f"quantity={validated_quantity:.8f}, "
                f"notional={final_notional:.2f} USDT"
            )

            # ==========================================
            # –®–ê–ì 7: –û–¢–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ò
            # ==========================================
            result = await self.open_position(
                symbol=signal.symbol,
                side=side,
                entry_price=entry_price,
                quantity=validated_quantity,
                stop_loss=stop_loss,
                take_profit=take_profit,
                entry_signal=signal.to_dict(),
                entry_reason=f"Signal: {signal.signal_type.value}",
            )

            if result:
                self.stats["executed_orders"] += 1
                logger.info(
                    f"{signal.symbol} | ‚úÖ –ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞: "
                    f"{side} {validated_quantity:.8f} @ {entry_price:.8f}"
                )
            else:
                self.stats["failed_orders"] += 1
                logger.error(f"{signal.symbol} | ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é")

        except Exception as e:
            logger.error(
                f"{signal.symbol} | ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}",
                exc_info=True
            )
            self.stats["failed_orders"] += 1

    def _add_to_history(self, signal: TradingSignal, status: str, details: str):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è.

        Args:
            signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            status: –°—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            details: –î–µ—Ç–∞–ª–∏
        """
        self.execution_history.append({
            "timestamp": get_timestamp_ms(),
            "symbol": signal.symbol,
            "signal_type": signal.signal_type.value,
            "price": signal.price,
            "status": status,
            "details": details
        })

    # ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ====================

    def get_execution_history(self, limit: Optional[int] = None) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è."""
        history = list(self.execution_history)

        if limit:
            history = history[-limit:]

        return history

    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è."""
        return {
            **self.stats,
            "queue_size": self.signal_queue.qsize(),
            "success_rate": (
                (self.stats["executed_orders"] / self.stats["total_signals"] * 100)
                if self.stats["total_signals"] > 0 else 0
            ),
            "rejection_rate": (
                (self.stats["rejected_orders"] / self.stats["total_signals"] * 100)
                if self.stats["total_signals"] > 0 else 0
            ),

        }

        # ==================== –ù–û–í–´–ï –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================

    async def _get_instrument_info(self, symbol: str) -> Optional[dict]:
            """
            –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

            Args:
                symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞

            Returns:
                dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
            """
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
            if symbol in self.instruments_cache:
                cached = self.instruments_cache[symbol]
                cache_age = get_timestamp_ms() - cached.get("cached_at", 0)

                if cache_age < self.cache_ttl * 1000:
                    logger.debug(f"{symbol} | –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ")
                    return cached

            # –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å Bybit
            try:
                logger.debug(f"{symbol} | –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ —Å Bybit")

                response = await self.rest_client.get_instruments_info(
                    symbol=symbol
                )

                if not response or not isinstance(response, list) or len(response) == 0:
                    logger.error(f"{symbol} | –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Bybit: {response}")
                    return None

                # response —ç—Ç–æ —É–∂–µ List[Dict], –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                instrument_info_raw = response[0]

                if not instrument_info_raw:
                    logger.error(f"{symbol} | –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Bybit")
                    return None

                lot_size_filter = instrument_info_raw.get("lotSizeFilter", {})

                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                info = {
                    "symbol": symbol,
                    "qtyStep": float(lot_size_filter.get("qtyStep", 0.001)),
                    "minOrderQty": float(lot_size_filter.get("minOrderQty", 0.001)),
                    "maxOrderQty": float(lot_size_filter.get("maxOrderQty", 100000)),
                    "minNotionalValue": float(lot_size_filter.get("minNotionalValue", 5)),  # –ú–∏–Ω–∏–º—É–º 5 USDT
                    "cached_at": get_timestamp_ms()
                }

                # –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
                self.instruments_cache[symbol] = info

                logger.info(
                    f"{symbol} | –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞: "
                    f"qtyStep={info['qtyStep']}, minOrderQty={info['minOrderQty']}, "
                    f"minNotionalValue={info['minNotionalValue']}"
                )

                return info

            except Exception as e:
                logger.error(f"{symbol} | –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ: {e}")
                return None

    def _validate_and_round_quantity(
            self,
            symbol: str,
            quantity: float,
            price: float,
            instrument_info: dict
        ) -> Optional[float]:
            """
            –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ quantity —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.

            Args:
                symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
                quantity: –ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
                instrument_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ

            Returns:
                float: –û–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ quantity –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
            """
            qty_step = instrument_info["qtyStep"]
            min_order_qty = instrument_info["minOrderQty"]
            max_order_qty = instrument_info["maxOrderQty"]
            min_notional = instrument_info["minNotionalValue"]

            logger.debug(
                f"{symbol} | –í–∞–ª–∏–¥–∞—Ü–∏—è quantity: "
                f"raw={quantity:.8f}, price={price:.8f}, "
                f"qtyStep={qty_step}, minQty={min_order_qty}, minNotional={min_notional}"
            )

            # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ quantity –¥–æ qtyStep (–≤–Ω–∏–∑)
            decimal_qty = Decimal(str(quantity))
            decimal_step = Decimal(str(qty_step))

            rounded_qty = float((decimal_qty // decimal_step) * decimal_step)

            logger.debug(f"{symbol} | –ü–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –ø–æ qtyStep: {rounded_qty:.8f}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ quantity
            if rounded_qty < min_order_qty:
                logger.warning(
                    f"{symbol} | Quantity {rounded_qty:.8f} < minOrderQty {min_order_qty}. "
                    f"–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ –º–∏–Ω–∏–º—É–º–∞."
                )
                rounded_qty = min_order_qty

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ quantity
            if rounded_qty > max_order_qty:
                logger.error(
                    f"{symbol} | Quantity {rounded_qty:.8f} > maxOrderQty {max_order_qty}. "
                    f"–û—Ä–¥–µ—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω."
                )
                return None

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞ –≤ USDT (notional value)
            notional_value = rounded_qty * price

            if notional_value < min_notional:
                logger.warning(
                    f"{symbol} | –†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ {notional_value:.2f} USDT < –º–∏–Ω–∏–º—É–º–∞ {min_notional} USDT. "
                    f"–£–≤–µ–ª–∏—á–µ–Ω–∏–µ quantity –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."
                )

                # –ü–µ—Ä–µ—Å—á–µ—Ç quantity –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ notional
                required_qty = min_notional / price

                # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ qtyStep (–≤–≤–µ—Ä—Ö)
                decimal_required = Decimal(str(required_qty))
                rounded_qty = float(((decimal_required // decimal_step) + 1) * decimal_step)

                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ notional –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
                new_notional = rounded_qty * price

                if new_notional < min_notional:
                    # –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–∏–Ω —à–∞–≥ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
                    rounded_qty += qty_step
                    new_notional = rounded_qty * price

                logger.info(
                    f"{symbol} | Quantity —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: {quantity:.8f} ‚Üí {rounded_qty:.8f} "
                    f"(notional: {notional_value:.2f} ‚Üí {new_notional:.2f} USDT)"
                )

            logger.info(
                f"{symbol} | ‚úÖ Quantity –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é: {rounded_qty:.8f} "
                f"(—Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞: {rounded_qty * price:.2f} USDT)"
            )

            return rounded_qty