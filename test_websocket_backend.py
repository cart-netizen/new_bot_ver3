"""
–¢–µ—Å—Ç WebSocket —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –±—ç–∫–µ–Ω–¥–∞.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ /ws —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–∞ –±—ç–∫–µ–Ω–¥–µ.
"""

import asyncio
import websockets
import json

BACKEND_WS_URL = "ws://localhost:8000/ws"


async def test_websocket_connection():
  """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket —ç–Ω–¥–ø–æ–∏–Ω—Ç—É –±—ç–∫–µ–Ω–¥–∞."""
  print("=" * 80)
  print("üß™ –¢–ï–°–¢ WEBSOCKET –≠–ù–î–ü–û–ò–ù–¢–ê –ë–≠–ö–ï–ù–î–ê")
  print("=" * 80)
  print(f"URL: {BACKEND_WS_URL}")
  print()

  try:
    print("‚è≥ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")

    # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    async with websockets.connect(BACKEND_WS_URL) as websocket:
      print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
      print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: {websocket.state}")
      print()

      # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω (–¥–ª—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å)
      # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ /auth/login
      test_token = "test_token_123"  # –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞

      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
      auth_message = {
        "type": "authenticate",
        "token": test_token
      }

      print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
      print(f"   {json.dumps(auth_message, indent=2)}")
      print()

      await websocket.send(json.dumps(auth_message))
      print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
      print()

      # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
      print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...")
      try:
        response = await asyncio.wait_for(websocket.recv(), timeout=5.0)
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
        print()

        response_data = json.loads(response)
        print(json.dumps(response_data, indent=2))
        print()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
        if response_data.get("type") == "error":
          print("‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:")
          print(f"   {response_data.get('message')}")
        elif response_data.get("type") == "authenticated":
          print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        else:
          print(f"‚ÑπÔ∏è  –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {response_data.get('type')}")

      except asyncio.TimeoutError:
        print("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞")

      # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ping
      print()
      print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ ping...")
      ping_message = {"type": "ping"}
      await websocket.send(json.dumps(ping_message))

      try:
        pong = await asyncio.wait_for(websocket.recv(), timeout=2.0)
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω pong:")
        print(f"   {pong}")
      except asyncio.TimeoutError:
        print("‚è∞ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ ping")

  except websockets.exceptions.InvalidURI:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π URI")
    print(f"   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL: {BACKEND_WS_URL}")

  except websockets.exceptions.WebSocketException as e:
    print(f"‚ùå –û–®–ò–ë–ö–ê WebSocket: {e}")
    print()
    print("üí° –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
    print("   1. –ë—ç–∫–µ–Ω–¥ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
    print("   2. WebSocket —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    print("   3. –ü—Ä–æ–±–ª–µ–º–∞ —Å CORS")
    print("   4. –ü–æ—Ä—Ç 8000 –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º")

  except ConnectionRefusedError:
    print("‚ùå –û–®–ò–ë–ö–ê: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    print()
    print("üí° –ü–†–ò–ß–ò–ù–ê:")
    print("   –ë—ç–∫–µ–Ω–¥ –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 8000")
    print()
    print("üìù –†–ï–®–ï–ù–ò–ï:")
    print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±—ç–∫–µ–Ω–¥:")
    print("      cd backend")
    print("      python main.py")
    print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∏–¥–∏—Ç–µ: 'Uvicorn running on http://0.0.0.0:8000'")

  except Exception as e:
    print(f"‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {type(e).__name__}: {e}")
    import traceback
    print()
    print("Traceback:")
    traceback.print_exc()

  print()
  print("=" * 80)


async def test_http_endpoint():
  """–¢–µ—Å—Ç HTTP —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç."""
  print()
  print("üåê –¢–ï–°–¢ HTTP –≠–ù–î–ü–û–ò–ù–¢–ê")
  print("=" * 80)

  import aiohttp

  http_url = "http://localhost:8000/health"
  print(f"URL: {http_url}")
  print()

  try:
    print("‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞...")
    async with aiohttp.ClientSession() as session:
      async with session.get(http_url, timeout=5.0) as response:
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: HTTP {response.status}")

        if response.status == 200:
          data = await response.json()
          print(f"   {json.dumps(data, indent=2)}")
          print()
          print("‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
          print(f"‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status}")

  except aiohttp.ClientConnectorError:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ HTTP —Å–µ—Ä–≤–µ—Ä—É")
    print()
    print("üí° –ü–†–ò–ß–ò–ù–ê:")
    print("   –ë—ç–∫–µ–Ω–¥ –Ω–µ –∑–∞–ø—É—â–µ–Ω")

  except Exception as e:
    print(f"‚ùå –û–®–ò–ë–ö–ê: {type(e).__name__}: {e}")

  print("=" * 80)


async def main():
  """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
  # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º HTTP
  await test_http_endpoint()

  print()
  print()

  # –ü–æ—Ç–æ–º WebSocket
  await test_websocket_connection()

  print()
  print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
  try:
    asyncio.run(main())
  except KeyboardInterrupt:
    print("\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")