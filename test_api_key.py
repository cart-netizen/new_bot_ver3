"""
–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit API —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π.
"""

import asyncio
import hmac
import hashlib
import time
import aiohttp
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
BYBIT_MODE = os.getenv("BYBIT_MODE", "testnet")
API_KEY = os.getenv("BYBIT_API_KEY", "")
API_SECRET = os.getenv("BYBIT_API_SECRET", "")

BASE_URL = (
  "https://api-testnet.bybit.com" if BYBIT_MODE == "testnet"
  else "https://api.bybit.com"
)

print("=" * 80)
print("üîß BYBIT API KEY TEST")
print("=" * 80)
print(f"–†–µ–∂–∏–º: {BYBIT_MODE}")
print(f"URL: {BASE_URL}")
print(f"API Key: {API_KEY[:10]}...{API_KEY[-4:] if len(API_KEY) > 14 else ''}")
print(f"API Secret: {'*' * len(API_SECRET)}")
print("=" * 80)


def create_signature(timestamp: str, api_key: str, recv_window: str, params: str) -> str:
  """
  –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è Bybit API V5.

  –§–æ—Ä–º–∞—Ç: timestamp + api_key + recv_window + queryString
  """
  sign_string = f"{timestamp}{api_key}{recv_window}{params}"

  print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏:")
  print(f"  Timestamp: {timestamp}")
  print(f"  API Key: {api_key[:10]}...")
  print(f"  Recv Window: {recv_window}")
  print(f"  Params: {params}")
  print(f"  Sign String: {sign_string[:50]}...")

  signature = hmac.new(
    API_SECRET.encode('utf-8'),
    sign_string.encode('utf-8'),
    hashlib.sha256
  ).hexdigest()

  print(f"  Signature: {signature[:20]}...")

  return signature


async def test_server_time():
  """–¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)"""
  print("\n" + "=" * 80)
  print("üì° –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É (–ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)")
  print("=" * 80)

  url = f"{BASE_URL}/v5/market/time"

  try:
    async with aiohttp.ClientSession() as session:
      async with session.get(url) as response:
        status = response.status
        data = await response.json()

        print(f"  Status Code: {status}")
        print(f"  Response: {data}")

        if status == 200 and data.get("retCode") == 0:
          server_time = data.get("result", {}).get("timeSecond", "N/A")
          print(f"  ‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω! Server time: {server_time}")
          return True
        else:
          print(f"  ‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É")
          return False

  except Exception as e:
    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    return False


async def test_api_key():
  """–¢–µ—Å—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ (—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π)"""
  print("\n" + "=" * 80)
  print("üîê –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)")
  print("=" * 80)

  if not API_KEY or not API_SECRET:
    print("  ‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!")
    print("  –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ .env —Å–æ–¥–µ—Ä–∂–∏—Ç:")
    print("    BYBIT_API_KEY=–≤–∞—à_–∫–ª—é—á")
    print("    BYBIT_API_SECRET=–≤–∞—à_—Å–µ–∫—Ä–µ—Ç")
    return False

  # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
  timestamp = str(int(time.time() * 1000))
  recv_window = "5000"

  # Query string –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–∞
  query_params = "accountType=UNIFIED"

  # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
  signature = create_signature(timestamp, API_KEY, recv_window, query_params)

  # –ó–∞–≥–æ–ª–æ–≤–∫–∏
  headers = {
    "X-BAPI-API-KEY": API_KEY,
    "X-BAPI-SIGN": signature,
    "X-BAPI-TIMESTAMP": timestamp,
    "X-BAPI-RECV-WINDOW": recv_window,
    "Content-Type": "application/json"
  }

  # URL
  url = f"{BASE_URL}/v5/account/wallet-balance"

  print("\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:")
  print(f"  URL: {url}")
  print(f"  Params: {query_params}")
  print(f"  Headers:")
  for key, value in headers.items():
    if key == "X-BAPI-SIGN":
      print(f"    {key}: {value[:20]}...")
    else:
      print(f"    {key}: {value}")

  try:
    async with aiohttp.ClientSession() as session:
      async with session.get(
          url,
          params={"accountType": "UNIFIED"},
          headers=headers
      ) as response:
        status = response.status

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å JSON –æ—Ç–≤–µ—Ç
        try:
          data = await response.json()
        except:
          text = await response.text()
          data = None
          print(f"\nüì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
          print(f"  Status Code: {status}")
          print(f"  Raw Text: {text[:200]}")

        print(f"\nüì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
        print(f"  Status Code: {status}")

        if data:
          print(f"  Response: {data}")

          ret_code = data.get("retCode")
          ret_msg = data.get("retMsg", "")

          if ret_code == 0:
            print(f"\n  ‚úÖ API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"  –†–µ–∂–∏–º: {BYBIT_MODE}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
            result = data.get("result", {})
            wallet_list = result.get("list", [])
            if wallet_list:
              print(f"\n  üí∞ –ë–∞–ª–∞–Ω—Å:")
              for wallet in wallet_list:
                coins = wallet.get("coin", [])
                for coin in coins:
                  coin_name = coin.get("coin", "N/A")
                  balance = coin.get("walletBalance", "0")
                  print(f"    {coin_name}: {balance}")

            return True
          else:
            print(f"\n  ‚ùå –û—à–∏–±–∫–∞ API:")
            print(f"    –ö–æ–¥: {ret_code}")
            print(f"    –°–æ–æ–±—â–µ–Ω–∏–µ: {ret_msg}")

            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
            if ret_code == 10003:
              print(f"\n  üí° –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏ 10003 (Invalid API key):")
              print(f"    1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫–ª—é—á –æ—Ç {BYBIT_MODE}")
              print(f"    2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –∫–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é")
              print(f"    3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ")

            elif ret_code == 10004:
              print(f"\n  üí° –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏ 10004 (Invalid signature):")
              print(f"    1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ API Secret —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
              print(f"    2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –Ω–µ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –≤ .env")

            elif ret_code == 10005:
              print(f"\n  üí° –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏ 10005 (Permission denied):")
              print(f"    1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ API –∫–ª—é—á–∞:")
              print(f"       ‚úÖ Read-Write")
              print(f"       ‚úÖ Contract Trading")

            return False
        else:
          print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å JSON –æ—Ç–≤–µ—Ç")
          print(f"  Status Code: {status}")

          if status == 401:
            print(f"\n  üí° –û—à–∏–±–∫–∞ 401 (Unauthorized):")
            print(f"    –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print(
              f"    1. API –∫–ª—é—á –æ—Ç {BYBIT_MODE}, –∞ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ {'mainnet' if BYBIT_MODE == 'testnet' else 'testnet'}")
            print(f"    2. API Secret –Ω–µ–≤–µ—Ä–Ω—ã–π")
            print(f"    3. –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∏")
            print(f"    4. IP –∞–¥—Ä–µ—Å –Ω–µ –≤ whitelist (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)")

          return False

  except Exception as e:
    print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    import traceback
    traceback.print_exc()
    return False


async def main():
  """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""

  # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
  server_ok = await test_server_time()

  if not server_ok:
    print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit —Å–µ—Ä–≤–µ—Ä—É")
    print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
    return

  # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
  api_ok = await test_api_key()

  # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  print("\n" + "=" * 80)
  print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
  print("=" * 80)
  print(f"  –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ' if server_ok else '‚ùå'}")
  print(f"  API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç: {'‚úÖ' if api_ok else '‚ùå'}")
  print("=" * 80)

  if not api_ok:
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print(f"  1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://{BYBIT_MODE}.bybit.com")
    print(f"  2. –°–æ–∑–¥–∞–π—Ç–µ –ù–û–í–´–ô API –∫–ª—é—á —Å –ø—Ä–∞–≤–∞–º–∏:")
    print(f"     - Read-Write")
    print(f"     - Contract Trading")
    print(f"  3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª:")
    print(f"     BYBIT_MODE={BYBIT_MODE}")
    print(f"     BYBIT_API_KEY=–≤–∞—à_–Ω–æ–≤—ã–π_–∫–ª—é—á")
    print(f"     BYBIT_API_SECRET=–≤–∞—à_–Ω–æ–≤—ã–π_—Å–µ–∫—Ä–µ—Ç")
    print(f"  4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞: python test_api_key.py")


if __name__ == "__main__":
  asyncio.run(main())