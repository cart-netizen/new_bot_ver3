"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API –∫–ª—é—á–µ–π Bybit —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π .env —Ñ–∞–π–ª–∞.
"""

import asyncio
import hmac
import hashlib
import time
import aiohttp
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
BYBIT_MODE = os.getenv("BYBIT_MODE", "mainnet")
API_KEY = os.getenv("BYBIT_API_KEY", "")
API_SECRET = os.getenv("BYBIT_API_SECRET", "")

BASE_URL = (
    "https://api-testnet.bybit.com" if BYBIT_MODE == "testnet"
    else "https://api.bybit.com"
)

print("=" * 80)
print("üîß BYBIT API KEY DIAGNOSTIC TEST")
print("=" * 80)


def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ .env —Ñ–∞–π–ª–∞"""
    print("\nüìã –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞")
    print("-" * 80)

    issues = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞
    print(f"‚úì BYBIT_MODE: {BYBIT_MODE}")
    if BYBIT_MODE not in ["testnet", "mainnet"]:
        issues.append("‚ö†Ô∏è  BYBIT_MODE –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'testnet' –∏–ª–∏ 'mainnet'")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API_KEY
    if not API_KEY:
        issues.append("‚ùå BYBIT_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
    else:
        key_len = len(API_KEY)
        has_spaces = API_KEY != API_KEY.strip()
        has_newlines = '\n' in API_KEY or '\r' in API_KEY

        print(f"‚úì BYBIT_API_KEY –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        print(f"  –î–ª–∏–Ω–∞: {key_len} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"  –ü–µ—Ä–≤—ã–µ 10: {API_KEY[:10]}")
        print(f"  –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4: {API_KEY[-4:]}")

        if key_len < 15:
            issues.append(f"‚ö†Ô∏è  API_KEY —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({key_len} —Å–∏–º–≤–æ–ª–æ–≤). –û–∂–∏–¥–∞–µ—Ç—Å—è 20+")

        if has_spaces:
            issues.append("‚ö†Ô∏è  API_KEY —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ!")
            print(f"  –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–µ–ª—ã! –†–µ–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {len(API_KEY.strip())}")

        if has_newlines:
            issues.append("‚ö†Ô∏è  API_KEY —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫!")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∞–≤—ã—á–∫–∏
        if API_KEY.startswith('"') or API_KEY.startswith("'"):
            issues.append("‚ö†Ô∏è  API_KEY —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–≤—ã—á–∫–∏! –£–¥–∞–ª–∏—Ç–µ –∏—Ö –∏–∑ .env")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API_SECRET
    if not API_SECRET:
        issues.append("‚ùå BYBIT_API_SECRET –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
    else:
        secret_len = len(API_SECRET)
        has_spaces = API_SECRET != API_SECRET.strip()
        has_newlines = '\n' in API_SECRET or '\r' in API_SECRET

        print(f"‚úì BYBIT_API_SECRET –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        print(f"  –î–ª–∏–Ω–∞: {secret_len} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"  –ü–µ—Ä–≤—ã–µ 10: {API_SECRET[:10]}")
        print(f"  –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4: {API_SECRET[-4:]}")

        if secret_len < 15:
            issues.append(f"‚ö†Ô∏è  API_SECRET —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({secret_len} —Å–∏–º–≤–æ–ª–æ–≤). –û–∂–∏–¥–∞–µ—Ç—Å—è 20+")

        if has_spaces:
            issues.append("‚ö†Ô∏è  API_SECRET —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ!")
            print(f"  –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–µ–ª—ã! –†–µ–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {len(API_SECRET.strip())}")

        if has_newlines:
            issues.append("‚ö†Ô∏è  API_SECRET —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫!")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∞–≤—ã—á–∫–∏
        if API_SECRET.startswith('"') or API_SECRET.startswith("'"):
            issues.append("‚ö†Ô∏è  API_SECRET —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–≤—ã—á–∫–∏! –£–¥–∞–ª–∏—Ç–µ –∏—Ö –∏–∑ .env")

    # –í—ã–≤–æ–¥ –ø—Ä–æ–±–ª–µ–º
    if issues:
        print("\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:")
        for issue in issues:
            print(f"  {issue}")
        return False
    else:
        print("\n‚úÖ .env —Ñ–∞–π–ª –≤ –ø–æ—Ä—è–¥–∫–µ")
        return True


def create_signature_v5(timestamp: str, api_key: str, recv_window: str, query_string: str) -> str:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è Bybit V5 API (–ü–†–ê–í–ò–õ–¨–ù–´–ô –º–µ—Ç–æ–¥).

    –§–æ—Ä–º–∞—Ç: timestamp + api_key + recv_window + queryString
    """
    # –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
    api_key_clean = api_key.strip()

    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    param_str = f"{timestamp}{api_key_clean}{recv_window}{query_string}"

    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ (V5 –º–µ—Ç–æ–¥):")
    print(f"  Timestamp: {timestamp}")
    print(f"  API Key (clean): {api_key_clean}")
    print(f"  API Key length: {len(api_key_clean)}")
    print(f"  Recv Window: {recv_window}")
    print(f"  Query String: {query_string}")
    print(f"  Param String: {param_str}")

    # –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º —Å–µ–∫—Ä–µ—Ç –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
    api_secret_clean = API_SECRET.strip()

    # –°–æ–∑–¥–∞–µ–º HMAC SHA256 –ø–æ–¥–ø–∏—Å—å
    signature = hmac.new(
        api_secret_clean.encode('utf-8'),
        param_str.encode('utf-8'),
        hashlib.sha256
    ).hexdigest()

    print(f"  Signature: {signature}")

    return signature


async def test_public_endpoint():
    """–¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)"""
    print("\n" + "=" * 80)
    print("üì° –®–ê–ì 2: –¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞")
    print("-" * 80)

    url = f"{BASE_URL}/v5/market/time"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as response:
                status = response.status
                data = await response.json()

                print(f"URL: {url}")
                print(f"Status: {status}")

                if status == 200 and data.get("retCode") == 0:
                    server_time = data.get("result", {}).get("timeSecond", "N/A")
                    print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω! Time: {server_time}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {data}")
                    return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False


async def test_authenticated_endpoint():
    """–¢–µ—Å—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ (—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π)"""
    print("\n" + "=" * 80)
    print("üîê –®–ê–ì 3: –¢–µ—Å—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞")
    print("-" * 80)

    if not API_KEY or not API_SECRET:
        print("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
        return False

    # –û—á–∏—â–∞–µ–º –∫–ª—é—á–∏ –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
    api_key_clean = API_KEY.strip()
    api_secret_clean = API_SECRET.strip()

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    timestamp = str(int(time.time() * 1000))
    recv_window = "5000"
    query_string = "accountType=UNIFIED"

    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
    signature = create_signature_v5(timestamp, api_key_clean, recv_window, query_string)

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –û–ß–ò–©–ï–ù–ù–´–ô –∫–ª—é—á)
    headers = {
        "X-BAPI-API-KEY": api_key_clean,
        "X-BAPI-SIGN": signature,
        "X-BAPI-TIMESTAMP": timestamp,
        "X-BAPI-RECV-WINDOW": recv_window,
        "Content-Type": "application/json"
    }

    url = f"{BASE_URL}/v5/account/wallet-balance"

    print(f"\nüì§ –ó–∞–ø—Ä–æ—Å:")
    print(f"  URL: {url}")
    print(f"  Query: {query_string}")
    print(f"  Headers:")
    print(f"    X-BAPI-API-KEY: {api_key_clean[:10]}...{api_key_clean[-4:]} (len={len(api_key_clean)})")
    print(f"    X-BAPI-SIGN: {signature[:20]}...")
    print(f"    X-BAPI-TIMESTAMP: {timestamp}")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                url,
                params={"accountType": "UNIFIED"},
                headers=headers,
                timeout=10
            ) as response:
                status = response.status

                print(f"\nüì• –û—Ç–≤–µ—Ç:")
                print(f"  Status: {status}")

                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
                try:
                    data = await response.json()
                    print(f"  JSON: {data}")
                except:
                    text = await response.text()
                    print(f"  Text: {text[:500]}")
                    data = None

                if data and data.get("retCode") == 0:
                    print(f"\n‚úÖ –£—Å–ø–µ—Ö! API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç!")

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
                    result = data.get("result", {})
                    wallet_list = result.get("list", [])
                    if wallet_list:
                        print(f"\nüí∞ –ë–∞–ª–∞–Ω—Å:")
                        for wallet in wallet_list:
                            account_type = wallet.get("accountType", "N/A")
                            print(f"  Account Type: {account_type}")
                            coins = wallet.get("coin", [])
                            for coin in coins:
                                coin_name = coin.get("coin", "N/A")
                                balance = coin.get("walletBalance", "0")
                                available = coin.get("availableToWithdraw", "0")
                                if float(balance) > 0:
                                    print(f"    {coin_name}: {balance} (–¥–æ—Å—Ç—É–ø–Ω–æ: {available})")

                    return True

                elif data:
                    ret_code = data.get("retCode")
                    ret_msg = data.get("retMsg", "")

                    print(f"\n‚ùå –û—à–∏–±–∫–∞ API:")
                    print(f"  –ö–æ–¥: {ret_code}")
                    print(f"  –°–æ–æ–±—â–µ–Ω–∏–µ: {ret_msg}")

                    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                    if ret_code == 10003:
                        print(f"\nüí° –ö–æ–¥ 10003 = Invalid API key")
                        print(f"  –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                        print(f"  1. –ö–ª—é—á –æ—Ç –¥—Ä—É–≥–æ–≥–æ —Ä–µ–∂–∏–º–∞ (—É –≤–∞—Å {BYBIT_MODE})")
                        print(f"  2. –ö–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Å –æ—à–∏–±–∫–æ–π")
                        print(f"  3. –ö–ª—é—á –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ")

                    elif ret_code == 10004:
                        print(f"\nüí° –ö–æ–¥ 10004 = Invalid signature")
                        print(f"  –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                        print(f"  1. API Secret —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Å –æ—à–∏–±–∫–æ–π")
                        print(f"  2. –õ–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ .env —Ñ–∞–π–ª–µ")
                        print(f"  3. –ö–∞–≤—ã—á–∫–∏ –≤ –∑–Ω–∞—á–µ–Ω–∏—è—Ö .env")

                    return False
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç")
                    return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ .env
    env_ok = check_env_file()

    if not env_ok:
        print("\n" + "=" * 80)
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò –í .env –§–ê–ô–õ–ï")
        print("=" * 80)
        print("\nüìù –ò—Å–ø—Ä–∞–≤—å—Ç–µ .env —Ñ–∞–π–ª:")
        print(f"  1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª: backend/.env")
        print(f"  2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π:")
        print(f"")
        print(f"     BYBIT_MODE=testnet")
        print(f"     BYBIT_API_KEY=–≤–∞—à_–∫–ª—é—á_–±–µ–∑_–ø—Ä–æ–±–µ–ª–æ–≤_–∏_–∫–∞–≤—ã—á–µ–∫")
        print(f"     BYBIT_API_SECRET=–≤–∞—à_—Å–µ–∫—Ä–µ—Ç_–±–µ–∑_–ø—Ä–æ–±–µ–ª–æ–≤_–∏_–∫–∞–≤—ã—á–µ–∫")
        print(f"")
        print(f"  3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
        print(f"     - –ù–ï–¢ –ø—Ä–æ–±–µ–ª–æ–≤ –¥–æ/–ø–æ—Å–ª–µ '='")
        print(f"     - –ù–ï–¢ –∫–∞–≤—ã—á–µ–∫ –≤–æ–∫—Ä—É–≥ –∑–Ω–∞—á–µ–Ω–∏–π")
        print(f"     - –ù–ï–¢ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –∫–ª—é—á–∞—Ö")
        print(f"")
        return

    # –®–∞–≥ 2: –¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ API
    public_ok = await test_public_endpoint()

    if not public_ok:
        print("\n‚ùå –°–µ—Ä–≤–µ—Ä Bybit –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        return

    # –®–∞–≥ 3: –¢–µ—Å—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ API
    auth_ok = await test_authenticated_endpoint()

    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
    print("=" * 80)
    print(f"  .env —Ñ–∞–π–ª: {'‚úÖ' if env_ok else '‚ùå'}")
    print(f"  –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ' if public_ok else '‚ùå'}")
    print(f"  API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç: {'‚úÖ' if auth_ok else '‚ùå'}")
    print("=" * 80)

    if not auth_ok:
        print("\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print(f"  1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞: https://{BYBIT_MODE}.bybit.com")
        print(f"  2. API Management ‚Üí Create New Key")
        print(f"  3. –í–∫–ª—é—á–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:")
        print(f"     ‚úÖ Read-Write")
        print(f"     ‚úÖ Contract Trading")
        print(f"  4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á–∏ –ë–ï–ó –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫")
        print(f"  5. –û–±–Ω–æ–≤–∏—Ç–µ .env —Ñ–∞–π–ª")
        print(f"  6. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python test_api_key.py")


if __name__ == "__main__":
    asyncio.run(main())