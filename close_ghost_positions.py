"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π.

–ü—Ä–∏–∑—Ä–∞—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è - —ç—Ç–æ –ø–æ–∑–∏—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è:
- –ï—Å—Ç—å –≤ –ë–î –≤ —Å—Ç–∞—Ç—É—Å–µ OPENING –∏–ª–∏ OPEN
- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ –±–∏—Ä–∂–µ (size = 0 –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    python close_ghost_positions.py --dry-run  # –¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å
    python close_ghost_positions.py --execute  # –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
"""

import asyncio
import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
backend_path = Path(__file__).parent / "backend"
sys.path.insert(0, str(backend_path))

from core.logger import get_logger
from database.connection import db_manager
from database.models import PositionStatus, AuditAction
from infrastructure.repositories.position_repository import position_repository
from infrastructure.repositories.audit_repository import audit_repository
from domain.state_machines.position_fsm import PositionStateMachine
from domain.services.fsm_registry import fsm_registry
from exchange.rest_client import rest_client

logger = get_logger(__name__)


class GhostPositionCleaner:
  """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π."""

  def __init__(self, dry_run: bool = True):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è.

    Args:
        dry_run: –ï—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å
    """
    self.dry_run = dry_run
    self.ghost_positions = []

  async def find_ghost_positions(self):
    """–ù–∞–π—Ç–∏ –≤—Å–µ –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏."""
    logger.info("=" * 80)
    logger.info("–ü–û–ò–°–ö –ü–†–ò–ó–†–ê–ß–ù–´–• –ü–û–ó–ò–¶–ò–ô")
    logger.info("=" * 80)

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –ë–î
    local_positions = await position_repository.get_active_positions()
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(local_positions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤ –ë–î")

    if not local_positions:
      logger.info("‚úì –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç")
      return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏
    try:
      exchange_response = await rest_client.get_positions()
      exchange_positions_list = exchange_response.get("result", {}).get("list", [])
      logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(exchange_positions_list)} –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–∏")

    except Exception as e:
      logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–∏: {e}")
      return

    # –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–∏
    exchange_map = {}
    for pos in exchange_positions_list:
      symbol = pos.get("symbol")
      size = float(pos.get("size", 0))

      if symbol and size > 0:
        exchange_map[symbol] = pos

    # –ò—â–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    for local_position in local_positions:
      symbol = local_position.symbol

      if symbol not in exchange_map:
        # –ü—Ä–∏–∑—Ä–∞–∫ –Ω–∞–π–¥–µ–Ω!
        self.ghost_positions.append(local_position)

        logger.warning(
          f"üëª –ü–†–ò–ó–†–ê–ö #{len(self.ghost_positions)}: {symbol}\n"
          f"   Position ID: {local_position.id}\n"
          f"   Status: {local_position.status.value}\n"
          f"   Quantity: {local_position.quantity}\n"
          f"   Entry Price: {local_position.entry_price}\n"
          f"   Opened At: {local_position.opened_at}\n"
          f"   Age: {(datetime.utcnow() - local_position.opened_at).days} days"
        )

    logger.info("=" * 80)
    logger.info(f"–ò–¢–û–ì–û: –ù–∞–π–¥–µ–Ω–æ {len(self.ghost_positions)} –ø—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
    logger.info("=" * 80)

  async def close_ghost_positions(self):
    """–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏."""
    if not self.ghost_positions:
      logger.info("‚úì –ü—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
      return

    if self.dry_run:
      logger.info("=" * 80)
      logger.info("–†–ï–ñ–ò–ú DRY-RUN: –ü–æ–∑–∏—Ü–∏–∏ –ù–ï –±—É–¥—É—Ç –∑–∞–∫—Ä—ã—Ç—ã")
      logger.info("=" * 80)
      logger.info(f"–ë—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ {len(self.ghost_positions)} –ø–æ–∑–∏—Ü–∏–π:")
      for i, pos in enumerate(self.ghost_positions, 1):
        print(f"  {i}. {pos.symbol} (ID: {pos.id})")
      return

    logger.info("=" * 80)
    logger.info(f"–ó–ê–ö–†–´–¢–ò–ï {len(self.ghost_positions)} –ü–†–ò–ó–†–ê–ß–ù–´–• –ü–û–ó–ò–¶–ò–ô")
    logger.info("=" * 80)

    closed_count = 0
    failed_count = 0

    for i, pos in enumerate(self.ghost_positions, 1):
      position_id = str(pos.id)
      symbol = pos.symbol

      logger.info(f"\n[{i}/{len(self.ghost_positions)}] –ó–∞–∫—Ä—ã—Ç–∏–µ {symbol}...")

      try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º FSM
        position_fsm = fsm_registry.get_position_fsm(position_id)

        if not position_fsm:
          position_fsm = PositionStateMachine(
            position_id=position_id,
            initial_state=pos.status
          )
          fsm_registry.register_position_fsm(position_id, position_fsm)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        if pos.status == PositionStatus.OPENING:
          # OPENING -> CLOSED (abort)
          position_fsm.abort()  # type: ignore[attr-defined]

          await position_repository.update_status(
            position_id=position_id,
            new_status=PositionStatus.CLOSED,
            exit_reason="Ghost position aborted (never opened on exchange)"
          )

          logger.info(f"‚úì {symbol} –ø—Ä–µ—Ä–≤–∞–Ω–∞ (OPENING -> CLOSED)")

        elif pos.status == PositionStatus.OPEN:
          # OPEN -> CLOSING -> CLOSED
          position_fsm.start_close()  # type: ignore[attr-defined]

          await position_repository.update_status(
            position_id=position_id,
            new_status=PositionStatus.CLOSING
          )

          position_fsm.confirm_close()  # type: ignore[attr-defined]

          await position_repository.update_status(
            position_id=position_id,
            new_status=PositionStatus.CLOSED,
            exit_price=pos.current_price or pos.entry_price,
            exit_reason="Ghost position closed (not found on exchange)"
          )

          logger.info(f"‚úì {symbol} –∑–∞–∫—Ä—ã—Ç–∞ (OPEN -> CLOSED)")

        # –£–¥–∞–ª—è–µ–º FSM
        fsm_registry.unregister_position_fsm(position_id)

        # –ê—É–¥–∏—Ç
        await audit_repository.log(
          action=AuditAction.POSITION_CLOSE,
          entity_type="Position",
          entity_id=position_id,
          old_value={"status": pos.status.value},
          new_value={"status": "CLOSED"},
          reason="Ghost position closed by cleanup script",
          success=True
        )

        closed_count += 1

      except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è {symbol}: {e}")
        failed_count += 1

    logger.info("=" * 80)
    logger.info(f"–ó–ê–ö–†–´–¢–ò–ï –ó–ê–í–ï–†–®–ï–ù–û:")
    logger.info(f"  ‚úì –ó–∞–∫—Ä—ã—Ç–æ: {closed_count}")
    logger.info(f"  ‚ùå –û—à–∏–±–æ–∫: {failed_count}")
    logger.info("=" * 80)

  async def run(self):
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞."""
    try:
      # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
      await db_manager.initialize()
      await rest_client.initialize()

      # –ü–æ–∏—Å–∫ –ø—Ä–∏–∑—Ä–∞–∫–æ–≤
      await self.find_ghost_positions()

      # –ó–∞–∫—Ä—ã—Ç–∏–µ
      await self.close_ghost_positions()

    finally:
      # –û—á–∏—Å—Ç–∫–∞
      await rest_client.close()
      await db_manager.close()


async def main():
  """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞."""
  import argparse

  parser = argparse.ArgumentParser(description="–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
  parser.add_argument(
    "--dry-run",
    action="store_true",
    help="–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å"
  )
  parser.add_argument(
    "--execute",
    action="store_true",
    help="–ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏"
  )

  args = parser.parse_args()

  if not args.dry_run and not args.execute:
    print("‚ùå –£–∫–∞–∂–∏—Ç–µ --dry-run –∏–ª–∏ --execute")
    parser.print_help()
    return

  dry_run = args.dry_run

  cleaner = GhostPositionCleaner(dry_run=dry_run)
  await cleaner.run()


if __name__ == "__main__":
  asyncio.run(main())