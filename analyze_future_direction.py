#!/usr/bin/env python3
"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ future direction labels.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
- –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö labels
- –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤
- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python analyze_future_direction.py --symbol BTCUSDT
    python analyze_future_direction.py --symbol BTCUSDT --threshold 0.0005
    python analyze_future_direction.py --symbol BTCUSDT --visualize
"""

import json
import numpy as np
from pathlib import Path
from typing import Dict, List, Tuple
from collections import Counter
import argparse


class FutureDirectionAnalyzer:
  """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä future direction labels."""

  def __init__(self, data_dir: str = "data/ml_training"):
    self.data_dir = Path(data_dir)

  def analyze_symbol(
      self,
      symbol: str,
      custom_threshold: float = None
  ) -> Dict:
    """
    –ê–Ω–∞–ª–∏–∑ future direction –¥–ª—è —Å–∏–º–≤–æ–ª–∞.

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        custom_threshold: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ä–æ–≥ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å)

    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
    """
    symbol_path = self.data_dir / symbol
    labels_dir = symbol_path / "labels"

    if not labels_dir.exists():
      print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {labels_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
      return {}

    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö labels
    all_labels = []
    label_files = sorted(labels_dir.glob("*.json"))

    for label_file in label_files:
      with open(label_file) as f:
        all_labels.extend(json.load(f))

    if not all_labels:
      print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
      return {}

    print(f"\n{'=' * 80}")
    print(f"–ê–ù–ê–õ–ò–ó FUTURE DIRECTION: {symbol}")
    print(f"{'=' * 80}\n")

    results = {
      "symbol": symbol,
      "total_samples": len(all_labels),
      "horizons": {}
    }

    # –ê–Ω–∞–ª–∏–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞
    for horizon in ["10s", "30s", "60s"]:
      print(f"\n{'‚îÄ' * 80}")
      print(f"–ì–û–†–ò–ó–û–ù–¢: {horizon}")
      print(f"{'‚îÄ' * 80}")

      horizon_data = self._analyze_horizon(
        all_labels,
        horizon,
        custom_threshold
      )
      results["horizons"][horizon] = horizon_data

      self._print_horizon_report(horizon_data, horizon)

    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    self._print_recommendations(results)

    return results

  def _analyze_horizon(
      self,
      labels: List[Dict],
      horizon: str,
      custom_threshold: float = None
  ) -> Dict:
    """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞."""
    direction_field = f"future_direction_{horizon}"
    movement_field = f"future_movement_{horizon}"

    # –¢–µ–∫—É—â–∏–µ labels (–µ—Å–ª–∏ –µ—Å—Ç—å)
    current_directions = []
    current_movements = []

    for label in labels:
      direction = label.get(direction_field)
      movement = label.get(movement_field)

      if direction is not None:
        current_directions.append(direction)
      if movement is not None:
        current_movements.append(movement)

    result = {
      "total_samples": len(labels),
      "samples_with_labels": len(current_directions),
      "samples_without_labels": len(labels) - len(current_directions)
    }

    # –ï—Å–ª–∏ –µ—Å—Ç—å labels, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    if current_directions:
      result["current"] = self._calculate_distribution(
        current_directions,
        current_movements
      )

    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω custom threshold, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º
    if custom_threshold is not None and current_movements:
      result["simulated"] = self._simulate_threshold(
        current_movements,
        custom_threshold
      )

    # –ê–Ω–∞–ª–∏–∑ –¥–≤–∏–∂–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if current_movements:
      movements = np.array(current_movements)
      result["movement_stats"] = {
        "mean": float(np.mean(movements)),
        "std": float(np.std(movements)),
        "min": float(np.min(movements)),
        "max": float(np.max(movements)),
        "median": float(np.median(movements)),
        "percentile_95": float(np.percentile(movements, 95)),
        "percentile_5": float(np.percentile(movements, 5))
      }

    return result

  def _calculate_distribution(
      self,
      directions: List[int],
      movements: List[float] = None
  ) -> Dict:
    """–†–∞—Å—á–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤."""
    counter = Counter(directions)
    total = len(directions)

    distribution = {
      "UP": counter.get(1, 0),
      "NEUTRAL": counter.get(0, 0),
      "DOWN": counter.get(-1, 0),
      "percentages": {
        "UP": (counter.get(1, 0) / total) * 100,
        "NEUTRAL": (counter.get(0, 0) / total) * 100,
        "DOWN": (counter.get(-1, 0) / total) * 100
      }
    }

    # Imbalance ratio
    counts = [counter.get(c, 0) for c in [-1, 0, 1]]
    max_count = max(counts)
    min_count = min(c for c in counts if c > 0) if any(c > 0 for c in counts) else 1

    distribution["imbalance_ratio"] = max_count / min_count

    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    if distribution["imbalance_ratio"] < 1.5:
      distribution["balance_quality"] = "–û—Ç–ª–∏—á–Ω–æ"
    elif distribution["imbalance_ratio"] < 2.5:
      distribution["balance_quality"] = "–•–æ—Ä–æ—à–æ"
    elif distribution["imbalance_ratio"] < 4.0:
      distribution["balance_quality"] = "–ü—Ä–∏–µ–º–ª–µ–º–æ"
    else:
      distribution["balance_quality"] = "–ü–ª–æ—Ö–æ"

    return distribution

  def _simulate_threshold(
      self,
      movements: List[float],
      threshold: float
  ) -> Dict:
    """–°–∏–º—É–ª—è—Ü–∏—è —Å –¥—Ä—É–≥–∏–º –ø–æ—Ä–æ–≥–æ–º."""
    simulated_directions = []

    for movement in movements:
      if movement > threshold:
        simulated_directions.append(1)
      elif movement < -threshold:
        simulated_directions.append(-1)
      else:
        simulated_directions.append(0)

    return self._calculate_distribution(simulated_directions, movements)

  def _print_horizon_report(self, data: Dict, horizon: str):
    """–ü–µ—á–∞—Ç—å –æ—Ç—á–µ—Ç–∞ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç—É."""
    total = data["total_samples"]
    with_labels = data["samples_with_labels"]
    without = data["samples_without_labels"]

    print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Å–µ–º–ø–ª–æ–≤: {total:,}")
    print(f"  ‚Ä¢ –° labels: {with_labels:,} ({(with_labels / total) * 100:.1f}%)")

    if without > 0:
      print(f"  ‚ö†Ô∏è  –ë–µ–∑ labels: {without:,} ({(without / total) * 100:.1f}%)")

    # –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    if "current" in data:
      current = data["current"]
      print(f"\nüìà –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (threshold = 0.1%):")
      self._print_distribution(current)

    # –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    if "simulated" in data:
      simulated = data["simulated"]
      print(f"\nüîÑ –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (custom threshold):")
      self._print_distribution(simulated)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏–π
    if "movement_stats" in data:
      stats = data["movement_stats"]
      print(f"\nüìâ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏–π —Ü–µ–Ω—ã:")
      print(f"  ‚Ä¢ Mean:   {stats['mean'] * 100:+.3f}%")
      print(f"  ‚Ä¢ Median: {stats['median'] * 100:+.3f}%")
      print(f"  ‚Ä¢ Std:    {stats['std'] * 100:.3f}%")
      print(f"  ‚Ä¢ Min:    {stats['min'] * 100:+.3f}%")
      print(f"  ‚Ä¢ Max:    {stats['max'] * 100:+.3f}%")
      print(f"  ‚Ä¢ 95%ile: {stats['percentile_95'] * 100:+.3f}%")
      print(f"  ‚Ä¢ 5%ile:  {stats['percentile_5'] * 100:+.3f}%")

  def _print_distribution(self, dist: Dict):
    """–ü–µ—á–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è."""
    up = dist["UP"]
    neutral = dist["NEUTRAL"]
    down = dist["DOWN"]

    up_pct = dist["percentages"]["UP"]
    neutral_pct = dist["percentages"]["NEUTRAL"]
    down_pct = dist["percentages"]["DOWN"]

    # –í–∏–∑—É–∞–ª—å–Ω—ã–µ –±–∞—Ä—ã
    bar_length = 40
    up_bar = "‚ñà" * int(up_pct / 100 * bar_length)
    neutral_bar = "‚ñà" * int(neutral_pct / 100 * bar_length)
    down_bar = "‚ñà" * int(down_pct / 100 * bar_length)

    print(f"  ‚Ä¢ UP (1):      {up:>8,} ({up_pct:5.1f}%)  {up_bar}")
    print(f"  ‚Ä¢ NEUTRAL (0): {neutral:>8,} ({neutral_pct:5.1f}%)  {neutral_bar}")
    print(f"  ‚Ä¢ DOWN (-1):   {down:>8,} ({down_pct:5.1f}%)  {down_bar}")
    print(f"\n  ‚Ä¢ Imbalance Ratio: {dist['imbalance_ratio']:.2f}")

    # –û—Ü–µ–Ω–∫–∞
    quality = dist["balance_quality"]
    emoji = "‚úÖ" if quality in ["–û—Ç–ª–∏—á–Ω–æ", "–•–æ—Ä–æ—à–æ"] else "‚ö†Ô∏è"
    print(f"  ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –±–∞–ª–∞–Ω—Å–∞: {emoji} {quality}")

  def _print_recommendations(self, results: Dict):
    """–ü–µ—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
    print(f"\n{'=' * 80}")
    print(f"üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print(f"{'=' * 80}\n")

    recommendations = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è labels
    for horizon, data in results["horizons"].items():
      without = data["samples_without_labels"]
      total = data["total_samples"]

      if without > 0:
        pct = (without / total) * 100
        recommendations.append(
          f"‚ùå {horizon}: {pct:.1f}% —Å–µ–º–ø–ª–æ–≤ –±–µ–∑ labels\n"
          f"   ‚Üí –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python preprocessing_add_future_labels.py"
        )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞—Å—Å–æ–≤
    for horizon, data in results["horizons"].items():
      if "current" in data:
        dist = data["current"]
        ratio = dist["imbalance_ratio"]

        if ratio > 3.0:
          recommendations.append(
            f"‚ö†Ô∏è  {horizon}: –°–∏–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤ ({ratio:.2f}x)\n"
            f"   ‚Üí –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            f"     1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä–æ–≥ (—Å–º. –Ω–∏–∂–µ)\n"
            f"     2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ class_weights –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏\n"
            f"     3. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ SMOTE/oversampling"
          )

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ—Ä–æ–≥—É
    for horizon, data in results["horizons"].items():
      if "movement_stats" in data:
        stats = data["movement_stats"]
        std = stats["std"]

        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä–æ–≥ = 0.5 * std
        recommended_threshold = std * 0.5

        recommendations.append(
          f"üí° {horizon}: –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏\n"
          f"   ‚Üí –¢–µ–∫—É—â–∏–π: 0.1% (0.001)\n"
          f"   ‚Üí –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π: {recommended_threshold * 100:.2f}% ({recommended_threshold:.5f})\n"
          f"   ‚Üí –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ: python analyze_future_direction.py "
          f"--symbol {results['symbol']} --threshold {recommended_threshold:.5f}"
        )

    # –í—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    if recommendations:
      for i, rec in enumerate(recommendations, 1):
        print(f"{i}. {rec}\n")
    else:
      print("‚úÖ –î–∞–Ω–Ω—ã–µ –≤—ã–≥–ª—è–¥—è—Ç —Ö–æ—Ä–æ—à–æ!\n")

  def test_multiple_thresholds(
      self,
      symbol: str,
      horizon: str = "60s"
  ):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤."""
    symbol_path = self.data_dir / symbol
    labels_dir = symbol_path / "labels"

    if not labels_dir.exists():
      print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {labels_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
      return

    # –ó–∞–≥—Ä—É–∑–∫–∞ movements
    all_movements = []
    label_files = sorted(labels_dir.glob("*.json"))

    for label_file in label_files:
      with open(label_file) as f:
        labels = json.load(f)

      movement_field = f"future_movement_{horizon}"
      for label in labels:
        movement = label.get(movement_field)
        if movement is not None:
          all_movements.append(movement)

    if not all_movements:
      print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–≤–∏–∂–µ–Ω–∏—è—Ö –¥–ª—è {symbol}")
      return

    print(f"\n{'=' * 80}")
    print(f"–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–†–û–ì–û–í: {symbol} ({horizon})")
    print(f"{'=' * 80}\n")
    print(f"–í—Å–µ–≥–æ —Å–µ–º–ø–ª–æ–≤: {len(all_movements):,}\n")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
    thresholds = [0.0005, 0.001, 0.0015, 0.002, 0.0025, 0.003]

    print(f"{'–ü–æ—Ä–æ–≥':>10} {'UP':>10} {'NEUTRAL':>10} {'DOWN':>10} {'Ratio':>8} {'–ö–∞—á–µ—Å—Ç–≤–æ':>12}")
    print(f"{'‚îÄ' * 70}")

    for threshold in thresholds:
      dist = self._simulate_threshold(all_movements, threshold)

      up_pct = dist["percentages"]["UP"]
      neutral_pct = dist["percentages"]["NEUTRAL"]
      down_pct = dist["percentages"]["DOWN"]
      ratio = dist["imbalance_ratio"]
      quality = dist["balance_quality"]

      print(
        f"{threshold * 100:>9.2f}% "
        f"{up_pct:>9.1f}% "
        f"{neutral_pct:>9.1f}% "
        f"{down_pct:>9.1f}% "
        f"{ratio:>7.2f}x "
        f"{quality:>12}"
      )

    print(f"\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä–æ–≥ —Å –±–∞–ª–∞–Ω—Å–æ–º '–û—Ç–ª–∏—á–Ω–æ' –∏–ª–∏ '–•–æ—Ä–æ—à–æ'\n")


def main():
  """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
  parser = argparse.ArgumentParser(
    description="–ê–Ω–∞–ª–∏–∑ future direction labels"
  )
  parser.add_argument(
    "--symbol",
    required=True,
    help="–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)"
  )
  parser.add_argument(
    "--threshold",
    type=float,
    help="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.0005)"
  )
  parser.add_argument(
    "--test-thresholds",
    action="store_true",
    help="–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ—Ä–æ–≥–∏"
  )
  parser.add_argument(
    "--horizon",
    default="60s",
    choices=["10s", "30s", "60s"],
    help="–ì–æ—Ä–∏–∑–æ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤"
  )
  parser.add_argument(
    "--data-dir",
    default="data/ml_training",
    help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏"
  )

  args = parser.parse_args()

  analyzer = FutureDirectionAnalyzer(data_dir=args.data_dir)

  if args.test_thresholds:
    analyzer.test_multiple_thresholds(args.symbol, args.horizon)
  else:
    analyzer.analyze_symbol(args.symbol, args.threshold)


if __name__ == "__main__":
  main()